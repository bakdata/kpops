{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "developer/api/", "title": "Python API", "text": ""}, {"location": "developer/api/#kpops.api", "title": "kpops.api", "text": ""}, {"location": "developer/api/#kpops.api.clean", "title": "clean", "text": "<pre><code>clean(pipeline_path: Path, dotenv: list[Path] | None = None, config: Path = Path(), steps: set[str] | None = None, filter_type: FilterType = FilterType.INCLUDE, environment: str | None = None, dry_run: bool = True, verbose: bool = True, parallel: bool = False)\n</code></pre> <p>Clean pipeline steps.</p> PARAMETER DESCRIPTION <code>pipeline_path</code> <p>Path to pipeline definition yaml file.</p> <p> TYPE: <code>Path</code> </p> <code>dotenv</code> <p>Paths to dotenv files.</p> <p> TYPE: <code>list[Path] | None</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Path to the dir containing config.yaml files.</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path()</code> </p> <code>steps</code> <p>Set of steps (components) to apply the command on.</p> <p> TYPE: <code>set[str] | None</code> DEFAULT: <code>None</code> </p> <code>filter_type</code> <p>Whether <code>steps</code> should include/exclude the steps.</p> <p> TYPE: <code>FilterType</code> DEFAULT: <code>INCLUDE</code> </p> <code>dry_run</code> <p>Whether to dry run the command or execute it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>environment</code> <p>The environment to generate and deploy the pipeline to.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>Enable verbose printing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>parallel</code> <p>Enable or disable parallel execution of pipeline steps.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def clean(\n    pipeline_path: Path,\n    dotenv: list[Path] | None = None,\n    config: Path = Path(),\n    steps: set[str] | None = None,\n    filter_type: FilterType = FilterType.INCLUDE,\n    environment: str | None = None,\n    dry_run: bool = True,\n    verbose: bool = True,\n    parallel: bool = False,\n):\n    \"\"\"Clean pipeline steps.\n\n    :param pipeline_path: Path to pipeline definition yaml file.\n    :param dotenv: Paths to dotenv files.\n    :param config: Path to the dir containing config.yaml files.\n    :param steps: Set of steps (components) to apply the command on.\n    :param filter_type: Whether `steps` should include/exclude the steps.\n    :param dry_run: Whether to dry run the command or execute it.\n    :param environment: The environment to generate and deploy the pipeline to.\n    :param verbose: Enable verbose printing.\n    :param parallel: Enable or disable parallel execution of pipeline steps.\n    \"\"\"\n    pipeline = generate(\n        pipeline_path=pipeline_path,\n        dotenv=dotenv,\n        config=config,\n        steps=steps,\n        filter_type=filter_type,\n        environment=environment,\n        verbose=verbose,\n    )\n\n    async def clean_runner(component: PipelineComponent):\n        log_action(\"Clean\", component)\n        await component.clean(dry_run)\n\n    async def async_clean():\n        if parallel:\n            pipeline_tasks = pipeline.build_execution_graph(clean_runner, reverse=True)\n            await pipeline_tasks\n        else:\n            for component in reversed(pipeline.components):\n                await clean_runner(component)\n\n    asyncio.run(async_clean())\n</code></pre>"}, {"location": "developer/api/#kpops.api.deploy", "title": "deploy", "text": "<pre><code>deploy(pipeline_path: Path, dotenv: list[Path] | None = None, config: Path = Path(), steps: set[str] | None = None, filter_type: FilterType = FilterType.INCLUDE, environment: str | None = None, dry_run: bool = True, verbose: bool = True, parallel: bool = False)\n</code></pre> <p>Deploy pipeline steps.</p> PARAMETER DESCRIPTION <code>pipeline_path</code> <p>Path to pipeline definition yaml file.</p> <p> TYPE: <code>Path</code> </p> <code>dotenv</code> <p>Paths to dotenv files.</p> <p> TYPE: <code>list[Path] | None</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Path to the dir containing config.yaml files.</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path()</code> </p> <code>steps</code> <p>Set of steps (components) to apply the command on.</p> <p> TYPE: <code>set[str] | None</code> DEFAULT: <code>None</code> </p> <code>filter_type</code> <p>Whether <code>steps</code> should include/exclude the steps.</p> <p> TYPE: <code>FilterType</code> DEFAULT: <code>INCLUDE</code> </p> <code>dry_run</code> <p>Whether to dry run the command or execute it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>environment</code> <p>The environment to generate and deploy the pipeline to.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>Enable verbose printing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>parallel</code> <p>Enable or disable parallel execution of pipeline steps.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def deploy(\n    pipeline_path: Path,\n    dotenv: list[Path] | None = None,\n    config: Path = Path(),\n    steps: set[str] | None = None,\n    filter_type: FilterType = FilterType.INCLUDE,\n    environment: str | None = None,\n    dry_run: bool = True,\n    verbose: bool = True,\n    parallel: bool = False,\n):\n    \"\"\"Deploy pipeline steps.\n\n    :param pipeline_path: Path to pipeline definition yaml file.\n    :param dotenv: Paths to dotenv files.\n    :param config: Path to the dir containing config.yaml files.\n    :param steps: Set of steps (components) to apply the command on.\n    :param filter_type: Whether `steps` should include/exclude the steps.\n    :param dry_run: Whether to dry run the command or execute it.\n    :param environment: The environment to generate and deploy the pipeline to.\n    :param verbose: Enable verbose printing.\n    :param parallel: Enable or disable parallel execution of pipeline steps.\n    \"\"\"\n    pipeline = generate(\n        pipeline_path=pipeline_path,\n        dotenv=dotenv,\n        config=config,\n        steps=steps,\n        filter_type=filter_type,\n        environment=environment,\n        verbose=verbose,\n    )\n\n    async def deploy_runner(component: PipelineComponent):\n        log_action(\"Deploy\", component)\n        await component.deploy(dry_run)\n\n    async def async_deploy():\n        if parallel:\n            pipeline_tasks = pipeline.build_execution_graph(deploy_runner)\n            await pipeline_tasks\n        else:\n            for component in pipeline.components:\n                await deploy_runner(component)\n\n    asyncio.run(async_deploy())\n</code></pre>"}, {"location": "developer/api/#kpops.api.destroy", "title": "destroy", "text": "<pre><code>destroy(pipeline_path: Path, dotenv: list[Path] | None = None, config: Path = Path(), steps: set[str] | None = None, filter_type: FilterType = FilterType.INCLUDE, environment: str | None = None, dry_run: bool = True, verbose: bool = True, parallel: bool = False)\n</code></pre> <p>Destroy pipeline steps.</p> PARAMETER DESCRIPTION <code>pipeline_path</code> <p>Path to pipeline definition yaml file.</p> <p> TYPE: <code>Path</code> </p> <code>dotenv</code> <p>Paths to dotenv files.</p> <p> TYPE: <code>list[Path] | None</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Path to the dir containing config.yaml files.</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path()</code> </p> <code>steps</code> <p>Set of steps (components) to apply the command on.</p> <p> TYPE: <code>set[str] | None</code> DEFAULT: <code>None</code> </p> <code>filter_type</code> <p>Whether <code>steps</code> should include/exclude the steps.</p> <p> TYPE: <code>FilterType</code> DEFAULT: <code>INCLUDE</code> </p> <code>dry_run</code> <p>Whether to dry run the command or execute it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>environment</code> <p>The environment to generate and deploy the pipeline to.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>Enable verbose printing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>parallel</code> <p>Enable or disable parallel execution of pipeline steps.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def destroy(\n    pipeline_path: Path,\n    dotenv: list[Path] | None = None,\n    config: Path = Path(),\n    steps: set[str] | None = None,\n    filter_type: FilterType = FilterType.INCLUDE,\n    environment: str | None = None,\n    dry_run: bool = True,\n    verbose: bool = True,\n    parallel: bool = False,\n):\n    \"\"\"Destroy pipeline steps.\n\n    :param pipeline_path: Path to pipeline definition yaml file.\n    :param dotenv: Paths to dotenv files.\n    :param config: Path to the dir containing config.yaml files.\n    :param steps: Set of steps (components) to apply the command on.\n    :param filter_type: Whether `steps` should include/exclude the steps.\n    :param dry_run: Whether to dry run the command or execute it.\n    :param environment: The environment to generate and deploy the pipeline to.\n    :param verbose: Enable verbose printing.\n    :param parallel: Enable or disable parallel execution of pipeline steps.\n    \"\"\"\n    pipeline = generate(\n        pipeline_path=pipeline_path,\n        dotenv=dotenv,\n        config=config,\n        steps=steps,\n        filter_type=filter_type,\n        environment=environment,\n        verbose=verbose,\n    )\n\n    async def destroy_runner(component: PipelineComponent):\n        log_action(\"Destroy\", component)\n        await component.destroy(dry_run)\n\n    async def async_destroy():\n        if parallel:\n            pipeline_tasks = pipeline.build_execution_graph(\n                destroy_runner, reverse=True\n            )\n            await pipeline_tasks\n        else:\n            for component in reversed(pipeline.components):\n                await destroy_runner(component)\n\n    asyncio.run(async_destroy())\n</code></pre>"}, {"location": "developer/api/#kpops.api.generate", "title": "generate", "text": "<pre><code>generate(pipeline_path: Path, dotenv: list[Path] | None = None, config: Path = Path(), steps: set[str] | None = None, filter_type: FilterType = FilterType.INCLUDE, environment: str | None = None, verbose: bool = False) -&gt; Pipeline\n</code></pre> <p>Generate enriched pipeline representation.</p> PARAMETER DESCRIPTION <code>pipeline_path</code> <p>Path to pipeline definition yaml file.</p> <p> TYPE: <code>Path</code> </p> <code>dotenv</code> <p>Paths to dotenv files.</p> <p> TYPE: <code>list[Path] | None</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Path to the dir containing config.yaml files.</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path()</code> </p> <code>steps</code> <p>Set of steps (components) to apply the command on.</p> <p> TYPE: <code>set[str] | None</code> DEFAULT: <code>None</code> </p> <code>filter_type</code> <p>Whether <code>steps</code> should include/exclude the steps.</p> <p> TYPE: <code>FilterType</code> DEFAULT: <code>INCLUDE</code> </p> <code>environment</code> <p>The environment to generate and deploy the pipeline to.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>Enable verbose printing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Pipeline</code> <p>Generated <code>Pipeline</code> object.</p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def generate(\n    pipeline_path: Path,\n    dotenv: list[Path] | None = None,\n    config: Path = Path(),\n    steps: set[str] | None = None,\n    filter_type: FilterType = FilterType.INCLUDE,\n    environment: str | None = None,\n    verbose: bool = False,\n) -&gt; Pipeline:\n    \"\"\"Generate enriched pipeline representation.\n\n    :param pipeline_path: Path to pipeline definition yaml file.\n    :param dotenv: Paths to dotenv files.\n    :param config: Path to the dir containing config.yaml files.\n    :param steps: Set of steps (components) to apply the command on.\n    :param filter_type: Whether `steps` should include/exclude the steps.\n    :param environment: The environment to generate and deploy the pipeline to.\n    :param verbose: Enable verbose printing.\n    :return: Generated `Pipeline` object.\n    \"\"\"\n    kpops_config = KpopsConfig.create(\n        config,\n        dotenv,\n        environment,\n        verbose,\n    )\n    pipeline = _create_pipeline(pipeline_path, kpops_config, environment)\n    log.info(f\"Picked up pipeline '{pipeline_path.parent.name}'\")\n    if steps:\n        component_names = steps\n        log.debug(\n            f\"KPOPS_PIPELINE_STEPS is defined with values: {component_names} and filter type of {filter_type.value}\"\n        )\n\n        predicate = filter_type.create_default_step_names_filter_predicate(\n            component_names\n        )\n        pipeline.filter(predicate)\n        log.info(f\"Filtered pipeline:\\n{pipeline.step_names}\")\n    return pipeline\n</code></pre>"}, {"location": "developer/api/#kpops.api.init", "title": "init", "text": "<pre><code>init(path: Path, config_include_opt: bool = False)\n</code></pre> <p>Initiate a default empty project.</p> PARAMETER DESCRIPTION <code>path</code> <p>Directory in which the project should be initiated.</p> <p> TYPE: <code>Path</code> </p> <code>conf_incl_opt</code> <p>Whether to include non-required settings in the generated config file.</p> <p> </p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def init(\n    path: Path,\n    config_include_opt: bool = False,\n):\n    \"\"\"Initiate a default empty project.\n\n    :param path: Directory in which the project should be initiated.\n    :param conf_incl_opt: Whether to include non-required settings\n        in the generated config file.\n    \"\"\"\n    if not path.exists():\n        path.mkdir(parents=False)\n    elif next(path.iterdir(), False):\n        log.warning(\"Please provide a path to an empty directory.\")\n        return\n    init_project(path, config_include_opt)\n</code></pre>"}, {"location": "developer/api/#kpops.api.manifest", "title": "manifest", "text": "<pre><code>manifest(pipeline_path: Path, dotenv: list[Path] | None = None, config: Path = Path(), steps: set[str] | None = None, filter_type: FilterType = FilterType.INCLUDE, environment: str | None = None, verbose: bool = False) -&gt; list[Resource]\n</code></pre> <p>Generate pipeline, return final resource representations for each step.</p> PARAMETER DESCRIPTION <code>pipeline_path</code> <p>Path to pipeline definition yaml file.</p> <p> TYPE: <code>Path</code> </p> <code>dotenv</code> <p>Paths to dotenv files.</p> <p> TYPE: <code>list[Path] | None</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Path to the dir containing config.yaml files.</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path()</code> </p> <code>steps</code> <p>Set of steps (components) to apply the command on.</p> <p> TYPE: <code>set[str] | None</code> DEFAULT: <code>None</code> </p> <code>filter_type</code> <p>Whether <code>steps</code> should include/exclude the steps.</p> <p> TYPE: <code>FilterType</code> DEFAULT: <code>INCLUDE</code> </p> <code>environment</code> <p>The environment to generate and deploy the pipeline to.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>Enable verbose printing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list[Resource]</code> <p>Resources.</p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def manifest(\n    pipeline_path: Path,\n    dotenv: list[Path] | None = None,\n    config: Path = Path(),\n    steps: set[str] | None = None,\n    filter_type: FilterType = FilterType.INCLUDE,\n    environment: str | None = None,\n    verbose: bool = False,\n) -&gt; list[Resource]:\n    \"\"\"Generate pipeline, return final resource representations for each step.\n\n    :param pipeline_path: Path to pipeline definition yaml file.\n    :param dotenv: Paths to dotenv files.\n    :param config: Path to the dir containing config.yaml files.\n    :param steps: Set of steps (components) to apply the command on.\n    :param filter_type: Whether `steps` should include/exclude the steps.\n    :param environment: The environment to generate and deploy the pipeline to.\n    :param verbose: Enable verbose printing.\n    :return: Resources.\n    \"\"\"\n    pipeline = generate(\n        pipeline_path=pipeline_path,\n        dotenv=dotenv,\n        config=config,\n        steps=steps,\n        filter_type=filter_type,\n        environment=environment,\n        verbose=verbose,\n    )\n    resources: list[Resource] = []\n    for component in pipeline.components:\n        resource = component.manifest()\n        resources.append(resource)\n    return resources\n</code></pre>"}, {"location": "developer/api/#kpops.api.reset", "title": "reset", "text": "<pre><code>reset(pipeline_path: Path, dotenv: list[Path] | None = None, config: Path = Path(), steps: set[str] | None = None, filter_type: FilterType = FilterType.INCLUDE, environment: str | None = None, dry_run: bool = True, verbose: bool = True, parallel: bool = False)\n</code></pre> <p>Reset pipeline steps.</p> PARAMETER DESCRIPTION <code>pipeline_path</code> <p>Path to pipeline definition yaml file.</p> <p> TYPE: <code>Path</code> </p> <code>dotenv</code> <p>Paths to dotenv files.</p> <p> TYPE: <code>list[Path] | None</code> DEFAULT: <code>None</code> </p> <code>config</code> <p>Path to the dir containing config.yaml files.</p> <p> TYPE: <code>Path</code> DEFAULT: <code>Path()</code> </p> <code>steps</code> <p>Set of steps (components) to apply the command on.</p> <p> TYPE: <code>set[str] | None</code> DEFAULT: <code>None</code> </p> <code>filter_type</code> <p>Whether <code>steps</code> should include/exclude the steps.</p> <p> TYPE: <code>FilterType</code> DEFAULT: <code>INCLUDE</code> </p> <code>dry_run</code> <p>Whether to dry run the command or execute it.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>environment</code> <p>The environment to generate and deploy the pipeline to.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>Enable verbose printing.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>parallel</code> <p>Enable or disable parallel execution of pipeline steps.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>kpops/api/__init__.py</code> <pre><code>def reset(\n    pipeline_path: Path,\n    dotenv: list[Path] | None = None,\n    config: Path = Path(),\n    steps: set[str] | None = None,\n    filter_type: FilterType = FilterType.INCLUDE,\n    environment: str | None = None,\n    dry_run: bool = True,\n    verbose: bool = True,\n    parallel: bool = False,\n):\n    \"\"\"Reset pipeline steps.\n\n    :param pipeline_path: Path to pipeline definition yaml file.\n    :param dotenv: Paths to dotenv files.\n    :param config: Path to the dir containing config.yaml files.\n    :param steps: Set of steps (components) to apply the command on.\n    :param filter_type: Whether `steps` should include/exclude the steps.\n    :param dry_run: Whether to dry run the command or execute it.\n    :param environment: The environment to generate and deploy the pipeline to.\n    :param verbose: Enable verbose printing.\n    :param parallel: Enable or disable parallel execution of pipeline steps.\n    \"\"\"\n    pipeline = generate(\n        pipeline_path=pipeline_path,\n        dotenv=dotenv,\n        config=config,\n        steps=steps,\n        filter_type=filter_type,\n        environment=environment,\n        verbose=verbose,\n    )\n\n    async def reset_runner(component: PipelineComponent):\n        log_action(\"Reset\", component)\n        await component.reset(dry_run)\n\n    async def async_reset():\n        if parallel:\n            pipeline_tasks = pipeline.build_execution_graph(reset_runner, reverse=True)\n            await pipeline_tasks\n        else:\n            for component in reversed(pipeline.components):\n                await reset_runner(component)\n\n    asyncio.run(async_reset())\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline", "title": "kpops.pipeline.Pipeline", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Pipeline representation.</p> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>class Pipeline(BaseModel):\n    \"\"\"Pipeline representation.\"\"\"\n\n    _component_index: dict[str, PipelineComponent] = {}\n    _graph: nx.DiGraph = nx.DiGraph()\n\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n\n    @property\n    def step_names(self) -&gt; list[str]:\n        return [step.name for step in self.components]\n\n    @computed_field(title=\"Components\")\n    @property\n    def components(self) -&gt; list[SerializeAsAny[PipelineComponent]]:\n        return list(self._component_index.values())\n\n    @property\n    def last(self) -&gt; PipelineComponent:\n        return self.components[-1]\n\n    def add(self, component: PipelineComponent) -&gt; None:\n        if self._component_index.get(component.id) is not None:\n            msg = (\n                f\"Pipeline steps must have unique id, '{component.id}' already exists.\"\n            )\n            raise ValidationError(msg)\n        self._component_index[component.id] = component\n        self.__add_to_graph(component)\n\n    def remove(self, component_id: str) -&gt; None:\n        self._component_index.pop(component_id)\n\n    def get(self, component_id: str) -&gt; PipelineComponent | None:\n        return self._component_index.get(component_id)\n\n    def find(self, predicate: ComponentFilterPredicate) -&gt; Iterator[PipelineComponent]:\n        \"\"\"Find pipeline components matching a custom predicate.\n\n        :param predicate: Filter function,\n            returns boolean value whether the component should be kept or removed\n        :returns: Iterator of components matching the predicate\n        \"\"\"\n        for component in self.components:\n            if predicate(component):\n                yield component\n\n    def filter(self, predicate: ComponentFilterPredicate) -&gt; None:\n        \"\"\"Filter pipeline components using a custom predicate.\n\n        :param predicate: Filter function,\n            returns boolean value whether the component should be kept or removed\n        \"\"\"\n        for component in self.components:\n            # filter out components not matching the predicate\n            if not predicate(component):\n                self.remove(component.id)\n\n    def validate(self) -&gt; None:  # pyright: ignore [reportIncompatibleMethodOverride]\n        self.__validate_graph()\n\n    def to_yaml(self) -&gt; str:\n        return yaml.dump(\n            self.model_dump(mode=\"json\", by_alias=True, exclude_none=True)[\"components\"]\n        )\n\n    def build_execution_graph(\n        self,\n        runner: Callable[[PipelineComponent], Coroutine[Any, Any, None]],\n        /,\n        reverse: bool = False,\n    ) -&gt; Awaitable[None]:\n        async def run_parallel_tasks(\n            coroutines: list[Coroutine[Any, Any, None]],\n        ) -&gt; None:\n            tasks: list[asyncio.Task[None]] = []\n            for coro in coroutines:\n                tasks.append(asyncio.create_task(coro))\n            await asyncio.gather(*tasks)\n\n        async def run_graph_tasks(pending_tasks: list[Awaitable[None]]) -&gt; None:\n            for pending_task in pending_tasks:\n                await pending_task\n\n        graph: nx.DiGraph = self._graph.copy()  # pyright: ignore[reportAssignmentType, reportGeneralTypeIssues] imprecise type hint in networkx\n\n        # We add an extra node to the graph, connecting all the leaf nodes to it\n        # in that way we make this node the root of the graph, avoiding backtracking\n        root_node = \"root_node_bfs\"\n        graph.add_node(root_node)\n\n        for node in graph:\n            predecessors = list(graph.predecessors(node))\n            if not predecessors:\n                graph.add_edge(root_node, node)\n\n        layers_graph: list[list[str]] = list(nx.bfs_layers(graph, root_node))\n\n        sorted_tasks: list[Awaitable[None]] = []\n        for layer in layers_graph[1:]:\n            if parallel_tasks := self.__get_parallel_tasks_from(layer, runner):\n                sorted_tasks.append(run_parallel_tasks(parallel_tasks))\n\n        if reverse:\n            sorted_tasks.reverse()\n\n        return run_graph_tasks(sorted_tasks)\n\n    def __getitem__(self, component_id: str) -&gt; PipelineComponent:\n        try:\n            return self._component_index[component_id]\n        except KeyError as exc:\n            msg = f\"Component {component_id} not found\"\n            raise ValueError(msg) from exc\n\n    def __bool__(self) -&gt; bool:\n        return bool(self._component_index)\n\n    def __iter__(self) -&gt; Iterator[PipelineComponent]:  # pyright: ignore [reportIncompatibleMethodOverride]\n        yield from self._component_index.values()\n\n    def __len__(self) -&gt; int:\n        return len(self.components)\n\n    def __add_to_graph(self, component: PipelineComponent):\n        self._graph.add_node(component.id)\n\n        for input_topic in component.inputs:\n            self.__add_input(input_topic.id, component.id)\n\n        for output_topic in component.outputs:\n            self.__add_output(output_topic.id, component.id)\n\n    def __add_output(self, topic_id: str, source: str) -&gt; None:\n        self._graph.add_node(topic_id)\n        self._graph.add_edge(source, topic_id)\n\n    def __add_input(self, topic_id: str, target: str) -&gt; None:\n        self._graph.add_node(topic_id)\n        self._graph.add_edge(topic_id, target)\n\n    def __get_parallel_tasks_from(\n        self,\n        layer: list[str],\n        runner: Callable[[PipelineComponent], Coroutine[Any, Any, None]],\n    ) -&gt; list[Coroutine[Any, Any, None]]:\n        def gen_parallel_tasks():\n            for node_in_layer in layer:\n                # check if component, skip topics\n                if (component := self._component_index.get(node_in_layer)) is not None:\n                    yield runner(component)\n\n        return list(gen_parallel_tasks())\n\n    def __validate_graph(self) -&gt; None:\n        if not nx.is_directed_acyclic_graph(self._graph):\n            msg = \"Pipeline is not a valid DAG.\"\n            raise ValueError(msg)\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.components", "title": "components  <code>property</code>", "text": "<pre><code>components: list[SerializeAsAny[PipelineComponent]]\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.last", "title": "last  <code>property</code>", "text": "<pre><code>last: PipelineComponent\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.step_names", "title": "step_names  <code>property</code>", "text": "<pre><code>step_names: list[str]\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.add", "title": "add", "text": "<pre><code>add(component: PipelineComponent) -&gt; None\n</code></pre> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def add(self, component: PipelineComponent) -&gt; None:\n    if self._component_index.get(component.id) is not None:\n        msg = (\n            f\"Pipeline steps must have unique id, '{component.id}' already exists.\"\n        )\n        raise ValidationError(msg)\n    self._component_index[component.id] = component\n    self.__add_to_graph(component)\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.build_execution_graph", "title": "build_execution_graph", "text": "<pre><code>build_execution_graph(runner: Callable[[PipelineComponent], Coroutine[Any, Any, None]], /, reverse: bool = False) -&gt; Awaitable[None]\n</code></pre> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def build_execution_graph(\n    self,\n    runner: Callable[[PipelineComponent], Coroutine[Any, Any, None]],\n    /,\n    reverse: bool = False,\n) -&gt; Awaitable[None]:\n    async def run_parallel_tasks(\n        coroutines: list[Coroutine[Any, Any, None]],\n    ) -&gt; None:\n        tasks: list[asyncio.Task[None]] = []\n        for coro in coroutines:\n            tasks.append(asyncio.create_task(coro))\n        await asyncio.gather(*tasks)\n\n    async def run_graph_tasks(pending_tasks: list[Awaitable[None]]) -&gt; None:\n        for pending_task in pending_tasks:\n            await pending_task\n\n    graph: nx.DiGraph = self._graph.copy()  # pyright: ignore[reportAssignmentType, reportGeneralTypeIssues] imprecise type hint in networkx\n\n    # We add an extra node to the graph, connecting all the leaf nodes to it\n    # in that way we make this node the root of the graph, avoiding backtracking\n    root_node = \"root_node_bfs\"\n    graph.add_node(root_node)\n\n    for node in graph:\n        predecessors = list(graph.predecessors(node))\n        if not predecessors:\n            graph.add_edge(root_node, node)\n\n    layers_graph: list[list[str]] = list(nx.bfs_layers(graph, root_node))\n\n    sorted_tasks: list[Awaitable[None]] = []\n    for layer in layers_graph[1:]:\n        if parallel_tasks := self.__get_parallel_tasks_from(layer, runner):\n            sorted_tasks.append(run_parallel_tasks(parallel_tasks))\n\n    if reverse:\n        sorted_tasks.reverse()\n\n    return run_graph_tasks(sorted_tasks)\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.filter", "title": "filter", "text": "<pre><code>filter(predicate: ComponentFilterPredicate) -&gt; None\n</code></pre> <p>Filter pipeline components using a custom predicate.</p> PARAMETER DESCRIPTION <code>predicate</code> <p>Filter function, returns boolean value whether the component should be kept or removed</p> <p> TYPE: <code>ComponentFilterPredicate</code> </p> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def filter(self, predicate: ComponentFilterPredicate) -&gt; None:\n    \"\"\"Filter pipeline components using a custom predicate.\n\n    :param predicate: Filter function,\n        returns boolean value whether the component should be kept or removed\n    \"\"\"\n    for component in self.components:\n        # filter out components not matching the predicate\n        if not predicate(component):\n            self.remove(component.id)\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.find", "title": "find", "text": "<pre><code>find(predicate: ComponentFilterPredicate) -&gt; Iterator[PipelineComponent]\n</code></pre> <p>Find pipeline components matching a custom predicate.</p> PARAMETER DESCRIPTION <code>predicate</code> <p>Filter function, returns boolean value whether the component should be kept or removed</p> <p> TYPE: <code>ComponentFilterPredicate</code> </p> RETURNS DESCRIPTION <code>Iterator[PipelineComponent]</code> <p>Iterator of components matching the predicate</p> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def find(self, predicate: ComponentFilterPredicate) -&gt; Iterator[PipelineComponent]:\n    \"\"\"Find pipeline components matching a custom predicate.\n\n    :param predicate: Filter function,\n        returns boolean value whether the component should be kept or removed\n    :returns: Iterator of components matching the predicate\n    \"\"\"\n    for component in self.components:\n        if predicate(component):\n            yield component\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.get", "title": "get", "text": "<pre><code>get(component_id: str) -&gt; PipelineComponent | None\n</code></pre> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def get(self, component_id: str) -&gt; PipelineComponent | None:\n    return self._component_index.get(component_id)\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.remove", "title": "remove", "text": "<pre><code>remove(component_id: str) -&gt; None\n</code></pre> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def remove(self, component_id: str) -&gt; None:\n    self._component_index.pop(component_id)\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.to_yaml", "title": "to_yaml", "text": "<pre><code>to_yaml() -&gt; str\n</code></pre> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def to_yaml(self) -&gt; str:\n    return yaml.dump(\n        self.model_dump(mode=\"json\", by_alias=True, exclude_none=True)[\"components\"]\n    )\n</code></pre>"}, {"location": "developer/api/#kpops.pipeline.Pipeline.validate", "title": "validate", "text": "<pre><code>validate() -&gt; None\n</code></pre> Source code in <code>kpops/pipeline/__init__.py</code> <pre><code>def validate(self) -&gt; None:  # pyright: ignore [reportIncompatibleMethodOverride]\n    self.__validate_graph()\n</code></pre>"}, {"location": "developer/auto-generation/", "title": "Auto generation", "text": "<p>Auto generation happens mostly with <code>pre-commit</code> hooks. You can find the pre-commit configuration here. These pre-commit hooks call different Python scripts to auto generate code for the documentation.</p>"}, {"location": "developer/auto-generation/#generation-scripts-and-their-respective-files", "title": "Generation scripts and their respective files", "text": ""}, {"location": "developer/auto-generation/#documentation", "title": "Documentation", "text": ""}, {"location": "developer/auto-generation/#variables", "title": "Variables", "text": "<ul> <li><code>cli_env_vars.env</code> -- All CLI environment variables in a <code>dotenv</code> file.</li> <li><code>cli_env_vars.md</code> -- All CLI environment variables in a table.</li> <li><code>config_env_vars.env</code> -- Almost all pipeline config environment variables in a <code>dotenv</code> file. The script checks for each field in <code>KpopsConfig</code> whether it has an <code>env</code> attribute defined. The script is currently unable to visit the classes of fields like <code>topic_name_config</code>, hence any environment variables defined there would remain unknown to it.</li> <li><code>config_env_vars.env</code> -- Almost all pipeline config environment variables in a table.</li> <li><code>variable_substitution.yaml</code> -- A copy of <code>./tests/pipeline/resources/component-type-substitution/pipeline.yaml</code> used as an example of substitution.</li> </ul>"}, {"location": "developer/auto-generation/#cli-commands", "title": "CLI commands", "text": "<p>Generated by <code>typer-cli</code> from the code in <code>main.py</code>. It is called with Python's <code>subprocess</code> module.</p>"}, {"location": "developer/auto-generation/#pipeline-and-defaults-example-definitions", "title": "Pipeline and defaults example definitions", "text": "<p>Generates example <code>pipeline.yaml</code> and <code>defaults.yaml</code> for each individual component, stores them and also concatenates them into 1 big pipeline definition and 1 big pipeline defaults definition.</p> <p>User input</p> <ul> <li><code>headers/*\\.yaml</code> -- The top of each example. Includes a description comment, <code>type</code> and <code>name</code>. The headers for <code>pipeline.yaml</code> reside in the <code>pipeline-components</code> dir and the <code>defaults.yaml</code> headers reside in the <code>pipeline-defaults</code> dir. The names of the files must be equal to the respective component <code>type</code>.</li> <li><code>sections/*\\.yaml</code> -- Each YAML file contains a single section (component attribute) definition. The intention is to keep the minimal set of definitions there from which any component definition can be built. The names of the files must be equal to the respective component <code>type</code> and the attribute name. The sections are used for both <code>defaults.yaml</code> and <code>pipeline.yaml</code> generation and reside in the <code>pipeline-components</code> dir.</li> </ul> <p>Generated</p> <ul> <li><code>pipeline-components/dependencies/*</code>   Cached information about KPOps components</li> <li><code>pipeline_component_dependencies.yaml</code> -- Specifies per component which files in the <code>sections</code> dir should be used for the <code>pipeline.yaml</code> generation.</li> <li><code>defaults_pipeline_component_dependencies.yaml</code> -- Specifies per component which files in the <code>sections</code> dir should be used for the <code>defaults.yaml</code> generation.</li> <li><code>kpops_structure.yaml</code> -- Specifies the inheritance hierarchy of the components and what sections exist in each component.</li> <li><code>pipeline-components/*\\.yaml</code> -- All single-component pipeline definitions and one big (complete) <code>pipeline.yaml</code> that contains all of them.</li> <li><code>pipeline-defaults/*\\.yaml</code> -- All single-component defaults definitions and one big (complete) <code>defaults.yaml</code> that contains all of them.</li> </ul>"}, {"location": "developer/auto-generation/#editor-integration", "title": "Editor integration", "text": ""}, {"location": "developer/auto-generation/#schemas", "title": "Schemas", "text": "<ul> <li>config.json</li> <li>pipeline.json</li> </ul>"}, {"location": "developer/contributing/", "title": "How to contribute", "text": "<p>Welcome! We are glad to have you visit our contributing guide!</p> <p>If you find any bugs or have suggestions for improvements, please open an issue and optionally a pull request (PR). In the case of a PR, we would appreciate it if you preface it with an issue outlining your goal and means of achieving it.</p>"}, {"location": "developer/contributing/#git", "title": "git", "text": "<p>We are using git submodules to import the KPOps examples repository. You need to fetch the repository locally on your machine. To do so use this command:</p> <pre><code>git submodule init\ngit submodule update --recursive\n</code></pre> <p>This will fetch the resources under the <code>examples</code> folder.</p>"}, {"location": "developer/contributing/#style", "title": "Style", "text": "<p>We advise that you stick to our <code>pre-commit</code> hooks for code linting, formatting, and auto-generation of documentation. After you install them using <code>poetry run pre-commit install</code> they're triggered automatically during <code>git commit</code>. Additionally, you can manually invoke them with <code>poetry run pre-commit run -a</code>. In order for <code>dprint</code> to work, you have to manually install it locally. It will work in the CI, so it is also possible to manually carry out formatting changes flagged by <code>dprint</code> in the CI and skip installing it locally.</p>"}, {"location": "developer/contributing/#python", "title": "Python", "text": "<p>To ensure a consistent Python code style, we use Ruff for both linting and formatting. The official docs contain a guide on editor integration.</p> <p>Our configuration can be found in KPOps' top-level <code>pyproject.toml</code>.</p>"}, {"location": "developer/contributing/#markdown", "title": "Markdown", "text": "<p>To ensure a consistent markdown style, we use dprint's Markdown code formatter. Our configuration can be found here.</p>"}, {"location": "developer/contributing/#css", "title": "CSS", "text": "<p>To ensure a consistent CSS style, we use the malva dprint's plugin. Our configuration can be found here.</p>"}, {"location": "developer/contributing/#toml", "title": "TOML", "text": "<p>To ensure a consistent TOML style, we use dprint's TOML code formatter. Our configuration can be found here.</p>"}, {"location": "developer/getting-started/", "title": "Getting started", "text": "<p>Welcome! We are glad to have you visit our developer guide! If you find any bugs or have suggestions for improvements, please open an issue and optionally a pull request (PR). In the case of a PR, we would appreciate it if you preface it with an issue outlining your goal and means of achieving it.</p> <p>Find more about our code-style or insights into KPOps' code base here in our developer guide.</p> <p>Work in progress</p> <p>The developer guide is still under construction. If you have a question left unanswered here, feel free to ask it by opening an issue.</p>"}, {"location": "user/changelog/", "title": "Changelog", "text": ""}, {"location": "user/changelog/#814-release-date-2024-12-09", "title": "8.1.4 - Release Date: [2024-12-09]", "text": ""}, {"location": "user/changelog/#fixes", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix <code>kpops --version</code> - #551</li> </ul>"}, {"location": "user/changelog/#miscellaneous", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Trim Helm name override for Producer CronJob to 52 characters - #550</li> </ul>"}, {"location": "user/changelog/#813-release-date-2024-12-05", "title": "8.1.3 - Release Date: [2024-12-05]", "text": ""}, {"location": "user/changelog/#miscellaneous_1", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Remove repeated defaults from streams-bootstrap values - #547</li> </ul>"}, {"location": "user/changelog/#812-release-date-2024-12-04", "title": "8.1.2 - Release Date: [2024-12-04]", "text": ""}, {"location": "user/changelog/#miscellaneous_2", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Convert all values of Kafka connector and topic config to string - #544</li> </ul>"}, {"location": "user/changelog/#811-release-date-2024-12-02", "title": "8.1.1 - Release Date: [2024-12-02]", "text": ""}, {"location": "user/changelog/#fixes_1", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>Fix <code>files</code> field value type in Streamsboostrap component - #542</p> </li> <li> <p>Fix: Use enum values when dumping models - #543</p> </li> </ul>"}, {"location": "user/changelog/#810-release-date-2024-10-25", "title": "8.1.0 - Release Date: [2024-10-25]", "text": ""}, {"location": "user/changelog/#dependencies", "title": "\ud83e\uddea Dependencies", "text": "<ul> <li>Upgrade typer to support union types - #533</li> </ul>"}, {"location": "user/changelog/#miscellaneous_3", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Extend StreamsBootstrap model - #534</li> </ul>"}, {"location": "user/changelog/#801-release-date-2024-08-22", "title": "8.0.1 - Release Date: [2024-08-22]", "text": ""}, {"location": "user/changelog/#documentation", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Fix changelog in docs - #532</li> </ul>"}, {"location": "user/changelog/#800-release-date-2024-08-21", "title": "8.0.0 - Release Date: [2024-08-21]", "text": ""}, {"location": "user/changelog/#breaking-changes", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li>Make KafkaApp responsible for deploying/cleaning streams bootstrap components - https://github.com/bakdata/kpops/pull/522</li> <li>Rename role to label - https://github.com/bakdata/kpops/pull/525</li> <li>Fix Pyright warning about type override without default value - https://github.com/bakdata/kpops/pull/524</li> <li>Remove -v3 suffix and suffix old streams bootstrap with -v2 - https://github.com/bakdata/kpops/pull/526</li> </ul>"}, {"location": "user/changelog/#features", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Add support for streams-bootstrap v3 - https://github.com/bakdata/kpops/pull/519</li> </ul>"}, {"location": "user/changelog/#refactor", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Rename role to label - https://github.com/bakdata/kpops/pull/525</li> <li>Fix Pyright warning about type override without default value - https://github.com/bakdata/kpops/pull/524</li> </ul>"}, {"location": "user/changelog/#710-release-date-2024-08-15", "title": "7.1.0 - Release Date: [2024-08-15]", "text": ""}, {"location": "user/changelog/#dependencies_1", "title": "\ud83e\uddea Dependencies", "text": "<ul> <li>Update pytest - #527</li> </ul>"}, {"location": "user/changelog/#refactor_1", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Improve incomplete type hints - #515</p> </li> <li> <p>Fallback to user defined model when the validation of cluster model fails - #521</p> </li> <li> <p>Replace kubernetes-asyncio with lightkube - #517</p> </li> </ul>"}, {"location": "user/changelog/#miscellaneous_4", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Fix incorrect parameter type annotation - #523</li> </ul>"}, {"location": "user/changelog/#700-release-date-2024-07-23", "title": "7.0.0 - Release Date: [2024-07-23]", "text": ""}, {"location": "user/changelog/#breaking-changes_1", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li> <p>Automatic loading of namespaced custom components - #500</p> </li> <li> <p>Call destroy from inside of reset or clean - #501</p> </li> <li> <p>Rename app field - #506</p> </li> </ul>"}, {"location": "user/changelog/#features_1", "title": "\ud83d\ude80 Features", "text": "<ul> <li>clean/reset streams-bootstrap components with cluster values - #498</li> </ul>"}, {"location": "user/changelog/#refactor_2", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Call destroy from inside of reset or clean - #501</p> </li> <li> <p>Rename app field - #506</p> </li> </ul>"}, {"location": "user/changelog/#610-release-date-2024-07-09", "title": "6.1.0 - Release Date: [2024-07-09]", "text": ""}, {"location": "user/changelog/#features_2", "title": "\ud83d\ude80 Features", "text": "<ul> <li> <p>Add image tag field to streams-bootstrap app values - #499</p> </li> <li> <p>Delete ignored keys from diff - #510</p> </li> </ul>"}, {"location": "user/changelog/#refactor_3", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Improve dataclass instance check - #507</li> </ul>"}, {"location": "user/changelog/#602-release-date-2024-07-04", "title": "6.0.2 - Release Date: [2024-07-04]", "text": ""}, {"location": "user/changelog/#documentation_1", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Generate developer docs for Python API - #503</li> </ul>"}, {"location": "user/changelog/#miscellaneous_5", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Update codeowners - #504</li> </ul>"}, {"location": "user/changelog/#601-release-date-2024-06-12", "title": "6.0.1 - Release Date: [2024-06-12]", "text": ""}, {"location": "user/changelog/#fixes_2", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix connector resetter offset topic - #497</li> </ul>"}, {"location": "user/changelog/#600-release-date-2024-06-06", "title": "6.0.0 - Release Date: [2024-06-06]", "text": ""}, {"location": "user/changelog/#breaking-changes_2", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li>KPOps <code>6.0.0</code> - #496</li> </ul>"}, {"location": "user/changelog/#features_3", "title": "\ud83d\ude80 Features", "text": "<ul> <li>KPOps <code>6.0.0</code> - #496</li> </ul>"}, {"location": "user/changelog/#refactor_4", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>KPOps <code>6.0.0</code> - #496</li> </ul>"}, {"location": "user/changelog/#511-release-date-2024-05-22", "title": "5.1.1 - Release Date: [2024-05-22]", "text": ""}, {"location": "user/changelog/#fixes_3", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Add YAML separator (---) to stdout - #491</li> </ul>"}, {"location": "user/changelog/#510-release-date-2024-05-22", "title": "5.1.0 - Release Date: [2024-05-22]", "text": ""}, {"location": "user/changelog/#miscellaneous_6", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Add computed field for Helm release name and name override - #490</li> </ul>"}, {"location": "user/changelog/#501-release-date-2024-05-15", "title": "5.0.1 - Release Date: [2024-05-15]", "text": ""}, {"location": "user/changelog/#fixes_4", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix missing await on Kubernetes API - #488</li> </ul>"}, {"location": "user/changelog/#500-release-date-2024-05-02", "title": "5.0.0 - Release Date: [2024-05-02]", "text": ""}, {"location": "user/changelog/#breaking-changes_3", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li>Allow custom timeout for external services - #485</li> </ul>"}, {"location": "user/changelog/#miscellaneous_7", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Update examples for v4 - #486</li> </ul>"}, {"location": "user/changelog/#421-release-date-2024-04-25", "title": "4.2.1 - Release Date: [2024-04-25]", "text": ""}, {"location": "user/changelog/#features_4", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Add support for cleaning StatefulSets with PVCs - #482</li> </ul>"}, {"location": "user/changelog/#420-release-date-2024-04-25", "title": "4.2.0 - Release Date: [2024-04-25]", "text": ""}, {"location": "user/changelog/#refactor_5", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Improve type annotations for parallel pipeline jobs - #476</li> </ul>"}, {"location": "user/changelog/#miscellaneous_8", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Update Ruff - #475</p> </li> <li> <p>Set Pyright to warn on unknown types - #480</p> </li> <li> <p>Quiet faker debug logs in tests - #483</p> </li> <li> <p>Add pyright matcher - #481</p> </li> </ul>"}, {"location": "user/changelog/#412-release-date-2024-03-11", "title": "4.1.2 - Release Date: [2024-03-11]", "text": ""}, {"location": "user/changelog/#documentation_2", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>fix(docs): Correct <code>from.components.&lt;component-name&gt;.type</code> to input - #473</li> </ul>"}, {"location": "user/changelog/#411-release-date-2024-03-11", "title": "4.1.1 - Release Date: [2024-03-11]", "text": ""}, {"location": "user/changelog/#fixes_5", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix import errors - #472</li> </ul>"}, {"location": "user/changelog/#refactor_6", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Fix import errors - #472</li> </ul>"}, {"location": "user/changelog/#miscellaneous_9", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Update httpx - #471</li> </ul>"}, {"location": "user/changelog/#410-release-date-2024-03-07", "title": "4.1.0 - Release Date: [2024-03-07]", "text": ""}, {"location": "user/changelog/#documentation_3", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Document precedence between env vars and config.yaml - #465</li> </ul>"}, {"location": "user/changelog/#miscellaneous_10", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Create init command - #394</li> </ul>"}, {"location": "user/changelog/#402-release-date-2024-03-04", "title": "4.0.2 - Release Date: [2024-03-04]", "text": ""}, {"location": "user/changelog/#documentation_4", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Reference editor plugin for Neovim in docs - #464</li> </ul>"}, {"location": "user/changelog/#miscellaneous_11", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Add support for Python 3.12 - #467</p> </li> <li> <p>Update Pyright - #468</p> </li> <li> <p>Remove package classifiers that are automatically assigned by Poetry - #469</p> </li> <li> <p>Validate autoscaling mandatory fields when enabled - #470</p> </li> </ul>"}, {"location": "user/changelog/#401-release-date-2024-02-29", "title": "4.0.1 - Release Date: [2024-02-29]", "text": ""}, {"location": "user/changelog/#fixes_6", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Set supported Python cutoff to 3.11 - #466</li> </ul>"}, {"location": "user/changelog/#400-release-date-2024-02-27", "title": "4.0.0 - Release Date: [2024-02-27]", "text": ""}, {"location": "user/changelog/#breaking-changes_4", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li>Distribute defaults across multiple files - #438</li> </ul>"}, {"location": "user/changelog/#features_5", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Distribute defaults across multiple files - #438</li> </ul>"}, {"location": "user/changelog/#324-release-date-2024-02-26", "title": "3.2.4 - Release Date: [2024-02-26]", "text": ""}, {"location": "user/changelog/#fixes_7", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>Fix docs CI to include the latest changes to a tagged version in the changelog - #459</p> </li> <li> <p>Fix tempfile creation - #461</p> </li> <li> <p>Fix symbolic link to CONTRIBUTING.md and parallel option in action.yaml - #462</p> </li> </ul>"}, {"location": "user/changelog/#refactor_7", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Refactor Kafka topics - #447</p> </li> <li> <p>Refactor PipelineGenerator to use component ids - #460</p> </li> </ul>"}, {"location": "user/changelog/#documentation_5", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Fix docs CI to include the latest changes to a tagged version in the changelog - #459</li> </ul>"}, {"location": "user/changelog/#323-release-date-2024-02-19", "title": "3.2.3 - Release Date: [2024-02-19]", "text": ""}, {"location": "user/changelog/#fixes_8", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Trim and hash Helm name override to 63 characters - #456</li> </ul>"}, {"location": "user/changelog/#322-release-date-2024-02-12", "title": "3.2.2 - Release Date: [2024-02-12]", "text": ""}, {"location": "user/changelog/#fixes_9", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix nested substitution - #451</li> </ul>"}, {"location": "user/changelog/#321-release-date-2024-02-08", "title": "3.2.1 - Release Date: [2024-02-08]", "text": ""}, {"location": "user/changelog/#fixes_10", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>Fix order of pipeline steps for clean/reset - #450</p> </li> <li> <p>Fix substitution - #449</p> </li> <li> <p>Fix cleaner inheritance, parent model should be aliased during instantiation - #452</p> </li> </ul>"}, {"location": "user/changelog/#refactor_8", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Simplify execution graph logic - #446</li> </ul>"}, {"location": "user/changelog/#320-release-date-2024-02-01", "title": "3.2.0 - Release Date: [2024-02-01]", "text": ""}, {"location": "user/changelog/#features_6", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Refactor pipeline filter and add to public API - #405</li> </ul>"}, {"location": "user/changelog/#refactor_9", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Refactor enrichment using Pydantic model validator - #444</p> </li> <li> <p>Refactor pipeline filter and add to public API - #405</p> </li> </ul>"}, {"location": "user/changelog/#documentation_6", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Improve Sphinx docs highlighting using RST markup - #443</li> </ul>"}, {"location": "user/changelog/#310-release-date-2024-01-30", "title": "3.1.0 - Release Date: [2024-01-30]", "text": ""}, {"location": "user/changelog/#features_7", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Add support for pipeline steps parallelization  - #312</li> </ul>"}, {"location": "user/changelog/#fixes_11", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Update poetry publish workflow version to latest - #430</li> </ul>"}, {"location": "user/changelog/#refactor_10", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Simplify loading of defaults - #435</li> </ul>"}, {"location": "user/changelog/#miscellaneous_12", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Add custom PascalCase to snake_case alias generator - #436</p> </li> <li> <p>Add parallel flag support to kpops runner - #439</p> </li> </ul>"}, {"location": "user/changelog/#302-release-date-2024-01-23", "title": "3.0.2 - Release Date: [2024-01-23]", "text": ""}, {"location": "user/changelog/#fixes_12", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix Helm diff output - #434</li> </ul>"}, {"location": "user/changelog/#documentation_7", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Add step for submodule initialization on the docs - #431</li> </ul>"}, {"location": "user/changelog/#miscellaneous_13", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Add message if examples git submodule is not initialized - #432</p> </li> <li> <p>Update type annotation for deserialized pipeline - #433</p> </li> </ul>"}, {"location": "user/changelog/#301-release-date-2024-01-19", "title": "3.0.1 - Release Date: [2024-01-19]", "text": ""}, {"location": "user/changelog/#fixes_13", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>Fix broken doc link - #427</p> </li> <li> <p>Add warning log if SR handler is disabled but URL is set - #428</p> </li> </ul>"}, {"location": "user/changelog/#documentation_8", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Update docs of word-count example for v3 &amp; new folder structure - #423</p> </li> <li> <p>Move ATM fraud to examples repo - #425</p> </li> <li> <p>Fix broken doc link - #427</p> </li> </ul>"}, {"location": "user/changelog/#miscellaneous_14", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Update pydantic dependency - #422</p> </li> <li> <p>Add git submodule instructions to the contributing.md - #429</p> </li> </ul>"}, {"location": "user/changelog/#300-release-date-2024-01-17", "title": "3.0.0 - Release Date: [2024-01-17]", "text": ""}, {"location": "user/changelog/#breaking-changes_5", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li> <p>Move GitHub action to repository root - #356</p> </li> <li> <p>Make Kafka REST Proxy &amp; Kafka Connect hosts default and improve Schema Registry config - #354</p> </li> <li> <p>Create HelmApp component - #370</p> </li> <li> <p>Change substitution variables separator to <code>.</code> - #388</p> </li> <li> <p>Refactor pipeline generator &amp; representation - #392</p> </li> <li> <p>Define custom components module &amp; pipeline base dir globally - #387</p> </li> <li> <p>Use hash and trim long Helm release names instead of only trimming - #390</p> </li> <li> <p>Refactor generate template for Python API usage - #380</p> </li> <li> <p>Namespace substitution vars - #408</p> </li> <li> <p>Refactor streams-bootstrap cleanup jobs as individual HelmApp - #398</p> </li> <li> <p>Refactor Kafka Connector resetter as individual HelmApp - #400</p> </li> <li> <p>Fix wrong Helm release name character limit - #418</p> </li> </ul>"}, {"location": "user/changelog/#features_8", "title": "\ud83d\ude80 Features", "text": "<ul> <li> <p>Allow overriding config files - #391</p> </li> <li> <p>Generate defaults schema - #402</p> </li> </ul>"}, {"location": "user/changelog/#fixes_14", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>Fix missing component type in pipeline schema - #401</p> </li> <li> <p>Fix enrichment of nested Pydantic BaseModel - #415</p> </li> <li> <p>Fix wrong Helm release name character limit - #418</p> </li> <li> <p>Update release workflow template to support custom changelog file path - #421</p> </li> </ul>"}, {"location": "user/changelog/#dependencies_2", "title": "\ud83e\uddea Dependencies", "text": "<ul> <li>Migrate to Pydantic v2 - #347</li> </ul>"}, {"location": "user/changelog/#refactor_11", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Make Kafka REST Proxy &amp; Kafka Connect hosts default and improve Schema Registry config - #354</p> </li> <li> <p>Migrate to Pydantic v2 - #347</p> </li> <li> <p>Refactor pipeline generator &amp; representation - #392</p> </li> <li> <p>Use hash and trim long Helm release names instead of only trimming - #390</p> </li> <li> <p>Refactor Helm <code>nameOverride</code> - #397</p> </li> <li> <p>Mark component type as computed Pydantic field - #399</p> </li> <li> <p>Refactor generate template for Python API usage - #380</p> </li> <li> <p>Support multiple inheritance for doc generation - #406</p> </li> <li> <p>Refactor streams-bootstrap cleanup jobs as individual HelmApp - #398</p> </li> <li> <p>Refactor Kafka Connector resetter as individual HelmApp - #400</p> </li> </ul>"}, {"location": "user/changelog/#documentation_9", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Move GitHub action to repository root - #356</p> </li> <li> <p>Create HelmApp component - #370</p> </li> <li> <p>Update docs for substitution variable usage in v3 - #409</p> </li> <li> <p>Support multiple inheritance for doc generation - #406</p> </li> <li> <p>Update docs for v3 - #416</p> </li> <li> <p>Update tests resources - #417</p> </li> <li> <p>Summarize all breaking changes in diffs at the top of the migration guide - #419</p> </li> </ul>"}, {"location": "user/changelog/#miscellaneous_15", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Replace black with ruff - #365</p> </li> <li> <p>Add toml formatter to dprint - #386</p> </li> <li> <p>Add malva to dprint - #385</p> </li> <li> <p>Update KPOps runner with the new options - #395</p> </li> <li> <p>Fix KPOps action to get package from testPyPI - #396</p> </li> <li> <p>KPOps 3.0 - #420</p> </li> </ul>"}, {"location": "user/changelog/#2011-release-date-2023-10-24", "title": "2.0.11 - Release Date: [2023-10-24]", "text": ""}, {"location": "user/changelog/#fixes_15", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>Fix early exit upon Helm exit code 1 - #376</p> </li> <li> <p>Fix docs setup page list indentation - #377</p> </li> </ul>"}, {"location": "user/changelog/#documentation_10", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Migrate deprecated mkdocs-material-extensions - #378</p> </li> <li> <p>Fix docs setup page list indentation - #377</p> </li> <li> <p>Exclude resources from docs search - #371</p> </li> </ul>"}, {"location": "user/changelog/#2010-release-date-2023-10-12", "title": "2.0.10 - Release Date: [2023-10-12]", "text": ""}, {"location": "user/changelog/#miscellaneous_16", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Fix environment variables documentation generation - #362</p> </li> <li> <p>Introduce ruff - #363</p> </li> <li> <p>Print details on connector name mismatch error - #369</p> </li> <li> <p>Enable transparent OS environment lookups from internal environment - #368</p> </li> </ul>"}, {"location": "user/changelog/#209-release-date-2023-09-19", "title": "2.0.9 - Release Date: [2023-09-19]", "text": ""}, {"location": "user/changelog/#fixes_16", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix Kafka connect config name for deletion - #361</li> </ul>"}, {"location": "user/changelog/#documentation_11", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Fix link to kpops-examples - #357</li> </ul>"}, {"location": "user/changelog/#208-release-date-2023-09-06", "title": "2.0.8 - Release Date: [2023-09-06]", "text": ""}, {"location": "user/changelog/#fixes_17", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix config.yaml overriding environment variables - #353</li> </ul>"}, {"location": "user/changelog/#refactor_12", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Refactor component prefix &amp; name - #326</p> </li> <li> <p>Remove unnecessary condition during inflate - #328</p> </li> </ul>"}, {"location": "user/changelog/#207-release-date-2023-08-31", "title": "2.0.7 - Release Date: [2023-08-31]", "text": ""}, {"location": "user/changelog/#fixes_18", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Print only rendered templates when <code>--template</code> flag is set - #350</li> </ul>"}, {"location": "user/changelog/#documentation_12", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Add migration guide - #352</li> </ul>"}, {"location": "user/changelog/#206-release-date-2023-08-30", "title": "2.0.6 - Release Date: [2023-08-30]", "text": ""}, {"location": "user/changelog/#refactor_13", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Simplify deployment with local Helm charts - #349</li> </ul>"}, {"location": "user/changelog/#205-release-date-2023-08-30", "title": "2.0.5 - Release Date: [2023-08-30]", "text": ""}, {"location": "user/changelog/#fixes_19", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix versioning of docs when releasing - #346</li> </ul>"}, {"location": "user/changelog/#204-release-date-2023-08-29", "title": "2.0.4 - Release Date: [2023-08-29]", "text": ""}, {"location": "user/changelog/#fixes_20", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix GitHub ref variable for pushing docs to main branch - #343</li> </ul>"}, {"location": "user/changelog/#documentation_13", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Add <code>dprint</code> as the markdown formatter - #337</p> </li> <li> <p>Publish pre-release docs for PRs &amp; main branch - #339</p> </li> <li> <p>Align docs colours - #345</p> </li> </ul>"}, {"location": "user/changelog/#miscellaneous_17", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Exclude abstract components from pipeline schema - #332</li> </ul>"}, {"location": "user/changelog/#203-release-date-2023-08-24", "title": "2.0.3 - Release Date: [2023-08-24]", "text": ""}, {"location": "user/changelog/#fixes_21", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix GitHub action error in non-Python projects - #340</li> </ul>"}, {"location": "user/changelog/#miscellaneous_18", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Lint GitHub action - #342</li> </ul>"}, {"location": "user/changelog/#202-release-date-2023-08-23", "title": "2.0.2 - Release Date: [2023-08-23]", "text": ""}, {"location": "user/changelog/#documentation_14", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Add version dropdown to the documentation - #336</p> </li> <li> <p>Break the documentation down into smaller subsection - #329</p> </li> </ul>"}, {"location": "user/changelog/#201-release-date-2023-08-22", "title": "2.0.1 - Release Date: [2023-08-22]", "text": ""}, {"location": "user/changelog/#fixes_22", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Fix optional flags in GitHub action - #334</li> </ul>"}, {"location": "user/changelog/#200-release-date-2023-08-17", "title": "2.0.0 - Release Date: [2023-08-17]", "text": ""}, {"location": "user/changelog/#breaking-changes_6", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li> <p>Remove camel case conversion of internal models - #308</p> </li> <li> <p>Derive component type automatically from class name - #309</p> </li> <li> <p>Refactor input/output types - #232</p> </li> <li> <p>v2 - #321</p> </li> </ul>"}, {"location": "user/changelog/#features_9", "title": "\ud83d\ude80 Features", "text": "<ul> <li> <p>Automatically support schema generation for custom components - #307</p> </li> <li> <p>Derive component type automatically from class name - #309</p> </li> </ul>"}, {"location": "user/changelog/#refactor_14", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Refactor input/output types - #232</li> </ul>"}, {"location": "user/changelog/#documentation_15", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Fix editor integration example in docs - #273</li> </ul>"}, {"location": "user/changelog/#172-release-date-2023-08-16", "title": "1.7.2 - Release Date: [2023-08-16]", "text": ""}, {"location": "user/changelog/#refactor_15", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Refactor Kafka Connect handler - #322</li> </ul>"}, {"location": "user/changelog/#documentation_16", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Add KPOps Runner GitHub Action to the documentation - #325</p> </li> <li> <p>Remove <code>:type</code> and <code>:rtype</code> from docstrings - #324</p> </li> </ul>"}, {"location": "user/changelog/#171-release-date-2023-08-15", "title": "1.7.1 - Release Date: [2023-08-15]", "text": ""}, {"location": "user/changelog/#documentation_17", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li> <p>Modularize and autogenerate examples for the documentation - #267</p> </li> <li> <p>Update the variable documentation - #266</p> </li> </ul>"}, {"location": "user/changelog/#170-release-date-2023-08-15", "title": "1.7.0 - Release Date: [2023-08-15]", "text": ""}, {"location": "user/changelog/#features_10", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Add flag to exclude pipeline steps - #300</li> </ul>"}, {"location": "user/changelog/#160-release-date-2023-08-10", "title": "1.6.0 - Release Date: [2023-08-10]", "text": ""}, {"location": "user/changelog/#refactor_16", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Refactor handling of Helm flags - #319</li> </ul>"}, {"location": "user/changelog/#150-release-date-2023-08-10", "title": "1.5.0 - Release Date: [2023-08-10]", "text": ""}, {"location": "user/changelog/#features_11", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Refactor Helm wrapper and add <code>--set-file</code> flag - #311</li> </ul>"}, {"location": "user/changelog/#refactor_17", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Refactor Helm wrapper and add <code>--set-file</code> flag - #311</p> </li> <li> <p>Set default for ToSection topics - #313</p> </li> <li> <p>Annotate types for ToSection models mapping - #315</p> </li> </ul>"}, {"location": "user/changelog/#miscellaneous_19", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Check Poetry lock file consistency - #316</li> </ul>"}, {"location": "user/changelog/#140-release-date-2023-08-02", "title": "1.4.0 - Release Date: [2023-08-02]", "text": ""}, {"location": "user/changelog/#fixes_23", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Validate unique step names - #292</li> </ul>"}, {"location": "user/changelog/#refactor_18", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Order PipelineComponent fields - #290</p> </li> <li> <p>Migrate requests to httpx - #302</p> </li> <li> <p>Refactor CLI using dtyper - #306</p> </li> </ul>"}, {"location": "user/changelog/#miscellaneous_20", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Update Black - #294</p> </li> <li> <p>Fix vulnerability in mkdocs-material - #295</p> </li> <li> <p>Move breaking changes section upper in the change log config - #287</p> </li> </ul>"}, {"location": "user/changelog/#132-release-date-2023-07-13", "title": "1.3.2 - Release Date: [2023-07-13]", "text": ""}, {"location": "user/changelog/#fixes_24", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Exclude Helm tests from dry-run diff - #293</li> </ul>"}, {"location": "user/changelog/#131-release-date-2023-07-11", "title": "1.3.1 - Release Date: [2023-07-11]", "text": ""}, {"location": "user/changelog/#refactor_19", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Remove workaround for pipeline steps - #276</li> </ul>"}, {"location": "user/changelog/#miscellaneous_21", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Update codeowners - #281</p> </li> <li> <p>Reactivate Windows CI - #255</p> </li> <li> <p>Downgrade Poetry version on the Windows CI pipeline - #286</p> </li> <li> <p>Set ANSI theme for output of <code>kpops generate</code> - #289</p> </li> </ul>"}, {"location": "user/changelog/#130-release-date-2023-07-07", "title": "1.3.0 - Release Date: [2023-07-07]", "text": ""}, {"location": "user/changelog/#refactor_20", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Plural broker field in pipeline config - #278</li> </ul>"}, {"location": "user/changelog/#documentation_18", "title": "\ud83d\udcdd Documentation", "text": "<ul> <li>Update KPOps runner readme for dev versions - #279</li> </ul>"}, {"location": "user/changelog/#breaking-changes_7", "title": "\ud83c\udfd7\ufe0f Breaking changes", "text": "<ul> <li>Plural broker field in pipeline config - #278</li> </ul>"}, {"location": "user/changelog/#miscellaneous_22", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Add breaking changes section to change log config - #280</li> </ul>"}, {"location": "user/changelog/#124-release-date-2023-06-27", "title": "1.2.4 - Release Date: [2023-06-27]", "text": ""}, {"location": "user/changelog/#miscellaneous_23", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li>Update changelog action to contain miscellaneous PRs - #269</li> </ul>"}, {"location": "user/changelog/#123-release-date-2023-06-22", "title": "1.2.3 - Release Date: [2023-06-22]", "text": ""}, {"location": "user/changelog/#fixes_25", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li>Refactor custom component validation &amp; hide field from kpops output - #265</li> </ul>"}, {"location": "user/changelog/#refactor_21", "title": "\ud83c\udfed Refactor", "text": "<ul> <li>Refactor custom component validation &amp; hide field from kpops output - #265</li> </ul>"}, {"location": "user/changelog/#miscellaneous_24", "title": "\ud83c\udf00 Miscellaneous", "text": ""}, {"location": "user/changelog/#122-release-date-2023-06-21", "title": "1.2.2 - Release Date: [2023-06-21]", "text": ""}, {"location": "user/changelog/#miscellaneous_25", "title": "\ud83c\udf00 Miscellaneous", "text": "<ul> <li> <p>Create workflow to lint CI - #260</p> </li> <li> <p>Fix update docs when releasing - #261</p> </li> <li> <p>Rename change log message for uncategorized issues - #262</p> </li> </ul>"}, {"location": "user/changelog/#121-release-date-2023-06-21", "title": "1.2.1 - Release Date: [2023-06-21]", "text": "Uncategorized <ul> <li>Fix update docs in release workflow - #258</li> </ul>"}, {"location": "user/changelog/#120-release-date-2023-06-21", "title": "1.2.0 - Release Date: [2023-06-21]", "text": ""}, {"location": "user/changelog/#features_12", "title": "\ud83d\ude80 Features", "text": "<ul> <li>Add <code>helm repo update &lt;repo-name&gt;</code> for Helm &gt;3.7 - #239</li> </ul>"}, {"location": "user/changelog/#fixes_26", "title": "\ud83d\udc1b Fixes", "text": "<ul> <li> <p>add --namespace option to Helm template command - #237</p> </li> <li> <p>Add missing type annotation for Pydantic attributes - #238</p> </li> <li> <p>Fix helm version check - #242</p> </li> <li> <p>Fix Helm Version Check - #244</p> </li> <li> <p>Fix import from external module - #256</p> </li> </ul>"}, {"location": "user/changelog/#refactor_22", "title": "\ud83c\udfed Refactor", "text": "<ul> <li> <p>Remove enable option from helm diff - #235</p> </li> <li> <p>Refactor variable substitution - #198</p> </li> </ul> Uncategorized <ul> <li> <p>Add background to docs home page - #236</p> </li> <li> <p>Update Poetry version in CI - #247</p> </li> <li> <p>Add pip cache in KPOps runner action - #249</p> </li> <li> <p>Check types using Pyright - #251</p> </li> <li> <p>Remove MyPy - #252</p> </li> <li> <p>Disable broken Windows CI temporarily - #253</p> </li> <li> <p>Update release and publish workflows - #254</p> </li> <li> <p>Fix release &amp; publish workflows - #257</p> </li> </ul>"}, {"location": "user/what-is-kpops/", "title": "What is KPOps?", "text": "<p>With a couple of easy commands in the shell, and a <code>pipeline.yaml</code> of under 30 lines, KPOps can not only <code>deploy</code> a Kafka pipeline<sup>1</sup> to a Kubernetes cluster, but also <code>reset</code>, <code>clean</code> or <code>destroy</code> it!</p>"}, {"location": "user/what-is-kpops/#key-features", "title": "Key features", "text": "<ul> <li>Deploy Kafka apps to Kubernetes: KPOps allows to deploy consecutive Kafka Streams applications and producers using an easy-to-read and -write pipeline definition.</li> <li>Manage Kafka Connectors: KPOps connects with your Kafka Connect cluster and deploys, validates, and deletes your connectors.</li> <li>Configure multiple pipelines and steps: KPOps has various abstractions that simplify configuring multiple pipelines and steps within pipelines by sharing common configuration between different components, such as producers or streaming applications.</li> <li>Handle your topics and schemas: KPOps not only creates and deletes your topics but also registers and deletes your schemas.</li> <li>Clean termination of Kafka components: KPOps removes your pipeline components (i.e., Kafka Streams applications) from the Kubernetes cluster and cleans up the component-related states (i.e., removing/resetting offset of Kafka consumer groups).</li> <li>Preview your pipeline changes: With the KPOps dry-run, you can ensure your pipeline definition is set up correctly. This helps to minimize downtime and prevent potential errors or issues that could impact your production environment.</li> </ul>"}, {"location": "user/what-is-kpops/#example", "title": "Example", "text": "An overview of Word-count pipeline shown in Streams Explorer Word-count pipeline.yaml<pre><code>- type: producer-app\n  name: data-producer\n  values:\n    image: bakdata/kpops-demo-sentence-producer\n    imageTag: \"2.0.0\"\n\n- type: streams-app\n  name: word-count-app\n  values:\n    image: bakdata/kpops-demo-word-count-app\n    imageTag: \"2.0.0\"\n    replicaCount: 1\n  to:\n    topics:\n      ${output_topic_name}:\n        type: output\n        configs:\n          cleanup.policy: compact\n\n- type: kafka-sink-connector\n  name: redis-sink-connector\n  config:\n    connector.class: com.github.jcustenborder.kafka.connect.redis.RedisSinkConnector\n    redis.hosts: redis-headless:6379\n    redis.database: 0\n    tasks.max: 1\n    key.converter: org.apache.kafka.connect.storage.StringConverter\n    value.converter: org.apache.kafka.connect.storage.StringConverter\n</code></pre> <ol> <li> <p>A Kafka pipeline can consist of consecutive streaming applications, producers, and connectors.\u00a0\u21a9</p> </li> </ol>"}, {"location": "user/core-concepts/config/", "title": "Configuration", "text": "<p>KPOps reads its global configuration that is unrelated to a pipeline's components from <code>config.yaml</code>.</p> <p>Consider enabling KPOps' editor integration feature to enjoy the benefits of autocompletion and validation when configuring your pipeline.</p> <p>To learn about any of the available settings, take a look at the example below.</p> <code>config.yaml</code> <pre><code># CONFIGURATION\n#\n# Base directory to the pipelines (default is current working directory)\npipeline_base_dir: .\n# The Kafka brokers address.\n# REQUIRED\nkafka_brokers: \"http://broker1:9092,http://broker2:9092\"\n# Configure the topic name variables you can use in the pipeline definition.\ntopic_name_config:\n  # Configures the value for the variable ${output_topic_name}\n  default_output_topic_name: ${pipeline.name}-${component.name}\n  # Configures the value for the variable ${error_topic_name}\n  default_error_topic_name: ${pipeline.name}-${component.name}-error\n# Configuration for Schema Registry.\nschema_registry:\n  # Whether the Schema Registry handler should be initialized.\n  enabled: false\n  # Address of the Schema Registry.\n  url: \"http://localhost:8081\"\n# Configuration for the Kafka REST Proxy.\nkafka_rest:\n  # Address of the Kafka REST Proxy.\n  url: \"http://localhost:8082\"\n# Configuration for Kafka Connect.\nkafka_connect:\n  # Address of Kafka Connect.\n  url: \"http://localhost:8083\"\n# Flag for `helm upgrade --install`.\n# Create the release namespace if not present.\ncreate_namespace: false\n# Global flags for Helm.\nhelm_config:\n  # Name of kubeconfig context (`--kube-context`)\n  context: name\n  # Run Helm in Debug mode.\n  debug: false\n  # Kubernetes API version used for Capabilities.APIVersions\n  api_version: null\n# Configure Helm Diff.\nhelm_diff_config:\n  # Set of keys that should not be checked.\n  ignore:\n    - name\n    - imageTag\n# Whether to retain clean up jobs in the cluster or uninstall the, after\n# completion.\nretain_clean_jobs: false\n</code></pre> <p>Environment-specific pipeline definitions</p> <p>Similarly to defaults, it is possible to have an unlimited amount of additional environment-specific pipeline definitions. The naming convention is the same: add a suffix of the form <code>_{environment}</code> to the filename.</p>"}, {"location": "user/core-concepts/defaults/", "title": "Defaults", "text": "<p>KPOps has a very efficient way of dealing with repeating settings which manifests as <code>defaults.yaml</code>. This file provides the user with the power to set defaults for any and all components, thus omitting the need to repeat the same settings in <code>pipeline.yaml</code>.</p> <p>See real-world examples for <code>defaults</code>.</p>"}, {"location": "user/core-concepts/defaults/#features", "title": "Features", "text": ""}, {"location": "user/core-concepts/defaults/#inheritance", "title": "Inheritance", "text": "<p>An important mechanic of KPOps is that <code>defaults</code> set for a component apply to all components that inherit from it.</p> <p>It is possible, although not recommended, to add settings that are specific to a component's subclass. An example would be configuring <code>offset_topic</code> under <code>kafka-connector</code> instead of <code>kafka-source-connector</code>.</p>"}, {"location": "user/core-concepts/defaults/#configuration", "title": "Configuration", "text": "<p>KPOps allows using multiple default values. The <code>defaults.yaml</code> (or <code>defaults_&lt;env&gt;.yaml</code>) files can be distributed across multiple files. These will be picked up by KPOps and get merged into a single <code>pipeline.yaml</code> file. KPOps starts from reading the default files from where the pipeline path is defined and picks up every defaults file on its way to where the <code>pipeline_base_dir</code> is defined.</p> <p>The deepest <code>defaults.yaml</code> file in the folder hierarchy (i.e., the closest one to the <code>pipeline.yaml</code>) overwrites the higher-level defaults' values.</p> <p>It is important to note that <code>defaults_{environment}.yaml</code> overrides only the settings that are explicitly set to be different from the ones in the base <code>defaults</code> file.</p> defaults merge priority <p>Imagine the following folder structure, where the <code>pipeline_base_dir</code> is configured to <code>pipelines</code>:</p> <pre><code>\u2514\u2500 pipelines\n   \u2514\u2500\u2500 distributed-defaults\n       \u251c\u2500\u2500 defaults.yaml\n       \u251c\u2500\u2500 defaults_dev.yaml\n       \u2514\u2500\u2500 pipeline-deep\n           \u251c\u2500\u2500 defaults.yaml\n           \u2514\u2500\u2500 pipeline.yaml\n</code></pre> <p>KPOps picks up the defaults in the following order (high to low priority):</p> <ul> <li><code>./pipelines/distributed-defaults/pipeline-deep/defaults.yaml</code></li> <li><code>./pipelines/distributed-defaults/defaults_dev.yaml</code></li> <li><code>./pipelines/distributed-defaults/defaults.yaml</code></li> </ul>"}, {"location": "user/core-concepts/defaults/#components", "title": "Components", "text": "<p>The <code>defaults</code> codeblocks in this section contain the full set of settings that are specific to the component. If a setting already exists in a parent config, it will not be included in the child's.</p>"}, {"location": "user/core-concepts/defaults/#kubernetesapp", "title": "KubernetesApp", "text": "<code>defaults.yaml</code> <pre><code># Base Kubernetes App\n#\n# Parent of: HelmApp\n# Child of: PipelineComponent\nkubernetes-app:\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline.name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline.name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline.name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: input # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  values: # required\n    image: exampleImage # Example\n    debug: false # Example\n    commandLine: {} # Example\n</code></pre>"}, {"location": "user/core-concepts/defaults/#streamsapp", "title": "StreamsApp", "text": "<code>defaults.yaml</code> <pre><code># StreamsApp component that configures a streams bootstrap app.\n#\n# Child of: KafkaApp\n# More documentation on StreamsApp: https://github.com/bakdata/streams-bootstrap\nstreams-app:\n  # No arbitrary keys are allowed under `app`here\n  # Allowed configs:\n  # https://github.com/bakdata/streams-bootstrap/tree/master/charts/streams-app\n  values: # required\n    # Streams Bootstrap streams section\n    streams: # required, streams-app-specific\n      brokers: ${config.kafka_brokers} # required\n      schemaRegistryUrl: ${config.schema_registry.url}\n      inputTopics:\n        - topic1\n        - topic2\n      outputTopic: output-topic\n      inputPattern: input-pattern\n      extraInputTopics:\n        input_role1:\n          - input_topic1\n          - input_topic2\n        input_role2:\n          - input_topic3\n          - input_topic4\n      extraInputPatterns:\n        pattern_role1: input_pattern1\n      extraOutputTopics:\n        output_role1: output_topic1\n        output_role2: output_topic2\n      errorTopic: error-topic\n      config:\n        my.streams.config: my.value\n    nameOverride: override-with-this-name # streams-app-specific\n    autoscaling: # streams-app-specific\n      consumerGroup: consumer-group # required\n      lagThreshold: 0 # Average target value to trigger scaling actions.\n      enabled: false # Whether to enable auto-scaling using KEDA.\n      # This is the interval to check each trigger on.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#pollinginterval\n      pollingInterval: 30\n      # The period to wait after the last trigger reported active before scaling\n      #  the resource back to 0. https://keda.sh/docs/2.9/concepts/scaling-deployments/#cooldownperiod\n      cooldownPeriod: 300\n      # The offset reset policy for the consumer if the the consumer group is\n      # not yet subscribed to a partition.\n      offsetResetPolicy: earliest\n      # This setting is passed to the HPA definition that KEDA will create for a\n      # given resource and holds the maximum number of replicas of the target resouce.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#maxreplicacount\n      maxReplicas: 1\n      # Minimum number of replicas KEDA will scale the resource down to.\n      # https://keda.sh/docs/2.7/concepts/scaling-deployments/#minreplicacount\n      minReplicas: 0\n      # If this property is set, KEDA will scale the resource down to this\n      # number of replicas.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#idlereplicacount\n      idleReplicas: 0\n      topics: # List of auto-generated Kafka Streams topics used by the streams app.\n        - topic1\n        - topic2\n</code></pre>"}, {"location": "user/core-concepts/defaults/#producerapp", "title": "ProducerApp", "text": "<code>defaults.yaml</code> <pre><code>\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkaconnector", "title": "KafkaConnector", "text": "<code>defaults.yaml</code> <pre><code># Kafka connector\n#\n# Parent of: KafkaSinkConnector, KafkaSourceConnector\n# Child of: PipelineComponent\nkafka-connector:\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline.name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline.name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline.name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: input # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  # Full documentation on connectors: https://kafka.apache.org/documentation/#connectconfigs\n  config: # required\n    tasks.max: 1\n  # Overriding Kafka Connect Resetter Helm values. E.g. to override the\n  # Image Tag etc.\n  resetter_values:\n    imageTag: \"1.2.3\"\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkasourceconnector", "title": "KafkaSourceConnector", "text": "<code>defaults.yaml</code> <pre><code># Kafka source connector\n#\n# Child of: KafkaConnector\nkafka-source-connector:\n  # The source connector has no `from` section\n  # from:\n  # offset.storage.topic\n  # https://kafka.apache.org/documentation/#connect_running\n  offset_topic: offset_topic\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkasinkconnector", "title": "KafkaSinkConnector", "text": "<code>defaults.yaml</code> <pre><code># Kafka sink connector\n#\n# Child of: KafkaConnector\nkafka-sink-connector:\n  # No settings differ from `kafka-connector`\n</code></pre>"}, {"location": "user/core-concepts/components/helm-app/", "title": "HelmApp", "text": ""}, {"location": "user/core-concepts/components/helm-app/#usage", "title": "Usage", "text": "<p>Can be used to deploy any app in Kubernetes using Helm, for example, a REST service that serves Kafka data.</p>"}, {"location": "user/core-concepts/components/helm-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Kubernetes app managed through Helm with an associated Helm chart\n- type: helm-app\n  name: helm-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline.name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline.name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline.name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: input # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  values: # required\n    image: exampleImage # Example\n    debug: false # Example\n    commandLine: {} # Example\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/helm-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/helm-app/#deploy", "title": "deploy", "text": "<p>Deploy using Helm.</p>"}, {"location": "user/core-concepts/components/helm-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/helm-app/#reset", "title": "reset", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/helm-app/#clean", "title": "clean", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kafka-connector/", "title": "KafkaConnector", "text": "<p><code>KafkaConnector</code> is a component that deploys Kafka Connectors. Since a connector cannot be different from sink or source it is not recommended to use <code>KafkaConnector</code> for deployment in <code>pipeline.yaml</code>. Instead, <code>KafkaConnector</code> should be used in <code>defaults.yaml</code> to set defaults for all connectors in the pipeline as they can share some common settings.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/", "title": "KafkaSinkConnector", "text": "<p>Subclass of KafkaConnector.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#usage", "title": "Usage", "text": "<p>Lets other systems pull data from Apache Kafka.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Kafka sink connector\n- type: kafka-sink-connector\n  name: kafka-sink-connector # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline.name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline.name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline.name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: input # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  # Full documentation on connectors: https://kafka.apache.org/documentation/#connectconfigs\n  config: # required\n    tasks.max: 1\n  # Overriding Kafka Connect Resetter Helm values. E.g. to override the\n  # Image Tag etc.\n  resetter_values:\n    imageTag: \"1.2.3\"\n</code></pre>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kafka-sink-connector/#deploy", "title": "deploy", "text": "<ul> <li>Add the sink connector to the Kafka Connect cluster</li> <li>Create the output topics if provided (optional)</li> <li>Register schemas in the Schema Registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#destroy", "title": "destroy", "text": "<p>The associated sink connector is removed from the Kafka Connect cluster.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#reset", "title": "reset", "text": "<p>Reset the consumer group offsets using bakdata's sink resetter.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#clean", "title": "clean", "text": "<ul> <li>Delete associated consumer group</li> <li>Delete configured error topics</li> </ul>"}, {"location": "user/core-concepts/components/kafka-source-connector/", "title": "KafkaSourceConnector", "text": "<p>Subclass of KafkaConnector.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#usage", "title": "Usage", "text": "<p>Manages source connectors in your Kafka Connect cluster.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Kafka source connector\n- type: kafka-source-connector # required\n  name: kafka-source-connector # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  # The source connector has no `from` section\n  # from:\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  # Full documentation on connectors: https://kafka.apache.org/documentation/#connectconfigs\n  config: # required\n    tasks.max: 1\n  # Overriding Kafka Connect Resetter Helm values. E.g. to override the\n  # Image Tag etc.\n  resetter_values:\n    imageTag: \"1.2.3\"\n  # offset.storage.topic\n  # https://kafka.apache.org/documentation/#connect_running\n  offset_topic: offset_topic\n</code></pre>"}, {"location": "user/core-concepts/components/kafka-source-connector/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kafka-source-connector/#deploy", "title": "deploy", "text": "<ul> <li>Add the source connector to the Kafka Connect cluster</li> <li>Create the output topics if provided (optional)</li> <li>Register schemas in the Schema registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/kafka-source-connector/#destroy", "title": "destroy", "text": "<p>Remove the source connector from the Kafka Connect cluster.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#reset", "title": "reset", "text": "<p>Delete state associated with the connector using bakdata's source resetter.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#clean", "title": "clean", "text": "<ul> <li>Delete all associated output topics</li> <li>Delete all associated schemas in the Schema Registry</li> <li>Delete state associated with the connector</li> </ul>"}, {"location": "user/core-concepts/components/kubernetes-app/", "title": "KubernetesApp", "text": ""}, {"location": "user/core-concepts/components/kubernetes-app/#usage", "title": "Usage", "text": "<p>Can be used to create components for any Kubernetes app.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Base Kubernetes App\n- type: kubernetes-app\n  name: kubernetes-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline.name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline.name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline.name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: input # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  values: # required\n    image: exampleImage # Example\n    debug: false # Example\n    commandLine: {} # Example\n</code></pre>"}, {"location": "user/core-concepts/components/kubernetes-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kubernetes-app/#deploy", "title": "deploy", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#destroy", "title": "destroy", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#reset", "title": "reset", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#clean", "title": "clean", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/overview/", "title": "Overview", "text": "<p>This section explains the different components of KPOps, their usage and configuration in the pipeline definition <code>pipeline.yaml</code>.</p> <pre><code>flowchart BT\n    KubernetesApp --&gt; PipelineComponent\n    HelmApp --&gt; KubernetesApp\n    StreamsBootstrap --&gt; HelmApp\n    StreamsApp --&gt; StreamsBootstrap\n    ProducerApp --&gt; StreamsBootstrap\n    KafkaConnector --&gt; PipelineComponent\n    KafkaSourceConnector --&gt; KafkaConnector\n    KafkaSinkConnector --&gt; KafkaConnector\n\n    click KubernetesApp \"./../kubernetes-app\"\n    click HelmApp \"./../helm-app\"\n    click StreamsBootstrap \"./../streams-bootstrap\"\n    click StreamsApp \"./../streams-app\"\n    click ProducerApp \"./../producer-app\"\n    click KafkaConnector \"./../kafka-connector\"\n    click KafkaSourceConnector \"./../kafka-source-connector\"\n    click KafkaSinkConnector \"./../kafka-sink-connector\"</code></pre> <p>KPOps component hierarchy</p>"}, {"location": "user/core-concepts/components/producer-app/", "title": "ProducerApp", "text": "<p>Subclass of StreamsBootstrap.</p>"}, {"location": "user/core-concepts/components/producer-app/#usage", "title": "Usage", "text": "<p>Configures a streams-bootstrap Kafka producer app</p>"}, {"location": "user/core-concepts/components/producer-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Holds configuration to use as values for the streams bootstrap producer-app Helm\n# chart.\n# More documentation on ProducerApp:\n# https://github.com/bakdata/streams-bootstrap\n- type: producer-app\n  name: producer-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  # from: # While the producer-app does inherit from kafka-app, it does not need a\n  # `from` section, hence it does not support it.\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # Allowed configs:\n  # https://github.com/bakdata/streams-bootstrap/tree/master/charts/producer-app\n  values: # required\n    streams: # required, producer-app-specific\n      brokers: ${config.kafka_brokers} # required\n      schemaRegistryUrl: ${config.schema_registry.url}\n      outputTopic: output_topic\n      extraOutputTopics:\n        output_role1: output_topic1\n        output_role2: output_topic2\n    nameOverride: override-with-this-name # kafka-app-specific\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"2.12.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/producer-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/producer-app/#deploy", "title": "deploy", "text": "<p>In addition to KubernetesApp's <code>deploy</code>:</p> <ul> <li>Create topics if provided (optional)</li> <li>Submit Avro schemas to the registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/producer-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/producer-app/#reset", "title": "reset", "text": "<p>Do nothing, producers are stateless.</p>"}, {"location": "user/core-concepts/components/producer-app/#clean", "title": "clean", "text": "<ul> <li>Delete the output topics of the Kafka producer</li> <li>Delete all associated schemas in the Schema Registry</li> </ul>"}, {"location": "user/core-concepts/components/streams-app/", "title": "StreamsApp", "text": "<p>Subclass of and StreamsBootstrap.</p>"}, {"location": "user/core-concepts/components/streams-app/#usage", "title": "Usage", "text": "<p>Configures a streams-bootstrap Kafka Streams app</p>"}, {"location": "user/core-concepts/components/streams-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># StreamsApp component that configures a streams bootstrap app.\n# More documentation on StreamsApp: https://github.com/bakdata/streams-bootstrap\n- type: streams-app # required\n  name: streams-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline.name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline.name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline.name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline.name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: input # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline.name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline.name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline.name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # No arbitrary keys are allowed under `app`here\n  # Allowed configs:\n  # https://github.com/bakdata/streams-bootstrap/tree/master/charts/streams-app\n  values: # required\n    # Streams Bootstrap streams section\n    streams: # required, streams-app-specific\n      brokers: ${config.kafka_brokers} # required\n      schemaRegistryUrl: ${config.schema_registry.url}\n      inputTopics:\n        - topic1\n        - topic2\n      outputTopic: output-topic\n      inputPattern: input-pattern\n      extraInputTopics:\n        input_role1:\n          - input_topic1\n          - input_topic2\n        input_role2:\n          - input_topic3\n          - input_topic4\n      extraInputPatterns:\n        pattern_role1: input_pattern1\n      extraOutputTopics:\n        output_role1: output_topic1\n        output_role2: output_topic2\n      errorTopic: error-topic\n      config:\n        my.streams.config: my.value\n    nameOverride: override-with-this-name # streams-app-specific\n    autoscaling: # streams-app-specific\n      consumerGroup: consumer-group # required\n      lagThreshold: 0 # Average target value to trigger scaling actions.\n      enabled: false # Whether to enable auto-scaling using KEDA.\n      # This is the interval to check each trigger on.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#pollinginterval\n      pollingInterval: 30\n      # The period to wait after the last trigger reported active before scaling\n      #  the resource back to 0. https://keda.sh/docs/2.9/concepts/scaling-deployments/#cooldownperiod\n      cooldownPeriod: 300\n      # The offset reset policy for the consumer if the the consumer group is\n      # not yet subscribed to a partition.\n      offsetResetPolicy: earliest\n      # This setting is passed to the HPA definition that KEDA will create for a\n      # given resource and holds the maximum number of replicas of the target resouce.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#maxreplicacount\n      maxReplicas: 1\n      # Minimum number of replicas KEDA will scale the resource down to.\n      # https://keda.sh/docs/2.7/concepts/scaling-deployments/#minreplicacount\n      minReplicas: 0\n      # If this property is set, KEDA will scale the resource down to this\n      # number of replicas.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#idlereplicacount\n      idleReplicas: 0\n      topics: # List of auto-generated Kafka Streams topics used by the streams app.\n        - topic1\n        - topic2\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"2.12.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/streams-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/streams-app/#deploy", "title": "deploy", "text": "<p>In addition to KubernetesApp's <code>deploy</code>:</p> <ul> <li>Create topics if provided (optional)</li> <li>Submit Avro schemas to the registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/streams-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/streams-app/#reset", "title": "reset", "text": "<ul> <li>Delete the consumer group offsets</li> <li>Delete Kafka Streams state</li> </ul>"}, {"location": "user/core-concepts/components/streams-app/#clean", "title": "clean", "text": "<p>Similar to <code>reset</code> with to additional steps:</p> <ul> <li>Delete the app's output topics</li> <li>Delete all associated schemas in the Schema Registry</li> </ul>"}, {"location": "user/core-concepts/components/streams-bootstrap/", "title": "Streams Bootstrap", "text": "<p>Subclass of HelmApp.</p>"}, {"location": "user/core-concepts/components/streams-bootstrap/#usage", "title": "Usage", "text": "<ul> <li> <p>Defines a streams-bootstrap component</p> </li> <li> <p>Often used in <code>defaults.yaml</code></p> </li> </ul>"}, {"location": "user/core-concepts/components/streams-bootstrap/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/streams-bootstrap/#deploy", "title": "deploy", "text": "<p>Deploy using Helm.</p>"}, {"location": "user/core-concepts/components/streams-bootstrap/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/streams-bootstrap/#reset", "title": "reset", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/streams-bootstrap/#clean", "title": "clean", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/variables/environment_variables/", "title": "Environment variables", "text": "<p>Environment variables can be set by using the export command in Linux or the set command in Windows.</p> <p>dotenv files</p> <p>KPOps currently supports <code>.env</code> files only for variables related to the config. Full support for <code>.env</code> files is on the roadmap. One of the possible ways to use one and export the contents manually is with the following command: <code>export $(xargs &lt; .env)</code>. This would work in <code>bash</code> suppose there are no spaces inside the values.</p>"}, {"location": "user/core-concepts/variables/environment_variables/#config", "title": "Config", "text": "<p>These variables take precedence over the settings in <code>config.yaml</code>. Variables marked as required can instead be set in the global config.</p> Name Default Value Required Description Setting name KPOPS_PIPELINE_BASE_DIR . False Base directory to the pipelines (default is current working directory) pipeline_base_dir KPOPS_KAFKA_BROKERS True The comma separated Kafka brokers address. kafka_brokers KPOPS_TOPIC_NAME_CONFIG__DEFAULT_OUTPUT_TOPIC_NAME ${pipeline.name}-${component.name} False Configures the value for the variable ${output_topic_name} topic_name_config.default_output_topic_name KPOPS_TOPIC_NAME_CONFIG__DEFAULT_ERROR_TOPIC_NAME ${pipeline.name}-${component.name}-error False Configures the value for the variable ${error_topic_name} topic_name_config.default_error_topic_name KPOPS_SCHEMA_REGISTRY__ENABLED False False Whether the Schema Registry handler should be initialized. schema_registry.enabled KPOPS_SCHEMA_REGISTRY__URL http://localhost:8081/ False Address of the Schema Registry. schema_registry.url KPOPS_SCHEMA_REGISTRY__TIMEOUT 30 False Operation timeout in seconds. schema_registry.timeout KPOPS_KAFKA_REST__URL http://localhost:8082/ False Address of the Kafka REST Proxy. kafka_rest.url KPOPS_KAFKA_REST__TIMEOUT 30 False Operation timeout in seconds. kafka_rest.timeout KPOPS_KAFKA_CONNECT__URL http://localhost:8083/ False Address of Kafka Connect. kafka_connect.url KPOPS_KAFKA_CONNECT__TIMEOUT 30 False Operation timeout in seconds. kafka_connect.timeout KPOPS_CREATE_NAMESPACE False False Flag for <code>helm upgrade --install</code>. Create the release namespace if not present. create_namespace KPOPS_HELM_CONFIG__CONTEXT False Name of kubeconfig context (<code>--kube-context</code>) helm_config.context KPOPS_HELM_CONFIG__DEBUG False False Run Helm in Debug mode helm_config.debug KPOPS_HELM_CONFIG__API_VERSION False Kubernetes API version used for <code>Capabilities.APIVersions</code> helm_config.api_version KPOPS_HELM_DIFF_CONFIG__IGNORE True Set of keys that should not be checked. helm_diff_config.ignore KPOPS_RETAIN_CLEAN_JOBS False False Whether to retain clean up jobs in the cluster or uninstall the, after completion. retain_clean_jobs config_env_vars.env Exhaustive list of all config-related environment variables<pre><code># Global config environment variables\n#\n# The default setup is shown. These variables take precedence over the\n# settings in `config.yaml`. Variables marked as required can instead\n# be set in the global config.\n#\n# pipeline_base_dir\n# Base directory to the pipelines (default is current working\n# directory)\nKPOPS_PIPELINE_BASE_DIR=.\n# kafka_brokers\n# The comma separated Kafka brokers address.\nKPOPS_KAFKA_BROKERS # No default value, required\n# topic_name_config.default_output_topic_name\n# Configures the value for the variable ${output_topic_name}\nKPOPS_TOPIC_NAME_CONFIG__DEFAULT_OUTPUT_TOPIC_NAME=${pipeline.name}-${component.name}\n# topic_name_config.default_error_topic_name\n# Configures the value for the variable ${error_topic_name}\nKPOPS_TOPIC_NAME_CONFIG__DEFAULT_ERROR_TOPIC_NAME=${pipeline.name}-${component.name}-error\n# schema_registry.enabled\n# Whether the Schema Registry handler should be initialized.\nKPOPS_SCHEMA_REGISTRY__ENABLED=False\n# schema_registry.url\n# Address of the Schema Registry.\nKPOPS_SCHEMA_REGISTRY__URL=http://localhost:8081/\n# schema_registry.timeout\n# Operation timeout in seconds.\nKPOPS_SCHEMA_REGISTRY__TIMEOUT=30\n# kafka_rest.url\n# Address of the Kafka REST Proxy.\nKPOPS_KAFKA_REST__URL=http://localhost:8082/\n# kafka_rest.timeout\n# Operation timeout in seconds.\nKPOPS_KAFKA_REST__TIMEOUT=30\n# kafka_connect.url\n# Address of Kafka Connect.\nKPOPS_KAFKA_CONNECT__URL=http://localhost:8083/\n# kafka_connect.timeout\n# Operation timeout in seconds.\nKPOPS_KAFKA_CONNECT__TIMEOUT=30\n# create_namespace\n# Flag for `helm upgrade --install`. Create the release namespace if\n# not present.\nKPOPS_CREATE_NAMESPACE=False\n# helm_config.context\n# Name of kubeconfig context (`--kube-context`)\nKPOPS_HELM_CONFIG__CONTEXT # No default value, not required\n# helm_config.debug\n# Run Helm in Debug mode\nKPOPS_HELM_CONFIG__DEBUG=False\n# helm_config.api_version\n# Kubernetes API version used for `Capabilities.APIVersions`\nKPOPS_HELM_CONFIG__API_VERSION # No default value, not required\n# helm_diff_config.ignore\n# Set of keys that should not be checked.\nKPOPS_HELM_DIFF_CONFIG__IGNORE # No default value, required\n# retain_clean_jobs\n# Whether to retain clean up jobs in the cluster or uninstall the,\n# after completion.\nKPOPS_RETAIN_CLEAN_JOBS=False\n</code></pre>"}, {"location": "user/core-concepts/variables/environment_variables/#cli", "title": "CLI", "text": "<p>These variables take precedence over the commands' flags. If a variable is set, the corresponding flag does not have to be specified in commands. Variables marked as required can instead be set as flags.</p> Name Default Value Required Description KPOPS_CONFIG_PATH . False Path to the dir containing config.yaml files KPOPS_DOTENV_PATH False Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one. KPOPS_ENVIRONMENT False The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development). KPOPS_PIPELINE_PATHS True Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'. KPOPS_PIPELINE_STEPS False Comma separated list of steps to apply the command on cli_env_vars.env Exhaustive list of all cli-related environment variables<pre><code># CLI Environment variables\n#\n# The default setup is shown. These variables take precedence over the\n# commands' flags. If a variable is set, the corresponding flag does\n# not have to be specified in commands. Variables marked as required\n# can instead be set as flags.\n#\n# Path to the dir containing config.yaml files\nKPOPS_CONFIG_PATH=.\n# Path to dotenv file. Multiple files can be provided. The files will\n# be loaded in order, with each file overriding the previous one.\nKPOPS_DOTENV_PATH # No default value, not required\n# The environment you want to generate and deploy the pipeline to.\n# Suffix your environment files with this value (e.g.\n# defaults_development.yaml for environment=development).\nKPOPS_ENVIRONMENT # No default value, not required\n# Paths to dir containing 'pipeline.yaml' or files named\n# 'pipeline.yaml'.\nKPOPS_PIPELINE_PATHS # No default value, required\n# Comma separated list of steps to apply the command on\nKPOPS_PIPELINE_STEPS # No default value, not required\n</code></pre>"}, {"location": "user/core-concepts/variables/substitution/", "title": "Substitution", "text": "<p>KPOps supports the usage of placeholders and environment variables in pipeline definition and defaults.</p>"}, {"location": "user/core-concepts/variables/substitution/#component-specific-variables", "title": "Component-specific variables", "text": "<p>These variables can be used in a component's definition to refer to any of its attributes, including ones that the user has defined in the defaults.</p> <p>All of them are prefixed with <code>component.</code> and follow the following form: <code>component.{attribute_name}</code>. If the attribute itself contains attributes, they can be referred to like this: <code>component.{attribute_name}.{subattribute_name}</code>.</p> Example <pre><code>- type: scheduled-producer\n  values:\n    labels:\n      app_type: \"${component.type}\"\n      app_name: \"${component.name}\"\n      app_schedule: \"${component.values.schedule}\"\n    commandLine:\n      FAKE_ARG: \"fake-arg-value\"\n    schedule: \"30 3/8 * * *\"\n- type: converter\n  values:\n    commandLine:\n      CONVERT_XML: true\n    resources:\n      limits:\n        memory: 2G\n      requests:\n        memory: 2G\n- type: filter\n  name: \"filter-app\"\n  values:\n    labels:\n      app_type: \"${component.type}\"\n      app_name: \"${component.name}\"\n      app_resources_requests_memory: \"${component.values.resources.requests.memory}\"\n      ${component.type}: \"${component.values.labels.app_name}-${component.values.labels.app_type}\"\n      test_placeholder_in_placeholder: \"${component.values.labels.${component.type}}\"\n    commandLine:\n      TYPE: \"nothing\"\n    resources:\n      requests:\n        memory: 3G\n    replicaCount: 4\n    autoscaling:\n      minReplicas: 4\n      maxReplicas: 4\n</code></pre>"}, {"location": "user/core-concepts/variables/substitution/#pipeline-config-specific-variables", "title": "Pipeline-config-specific variables", "text": "<p>These variables include all fields in the config and refer to the pipeline configuration that is independent of the components.</p> <p>All such variables are prefixed with <code>config.</code> and are of the same form as the component-specific variables.</p> <p>Info</p> <p><code>error_topic_name</code> is an alias for <code>config.topic_name_config.default_error_topic_name</code> <code>output_topic_name</code> is an alias for <code>config.topic_name_config.default_output_topic_name</code></p>"}, {"location": "user/core-concepts/variables/substitution/#environment-variables", "title": "Environment variables", "text": "<p>Environment variables such as <code>$PATH</code> can be used in the pipeline definition and defaults without any transformation following the form <code>${ENV_VAR_NAME}</code>. This, of course, includes variables like the ones relevant to the KPOps cli that are exported by the user.</p> <p>See all KPOps environment variables</p>"}, {"location": "user/core-concepts/variables/substitution/#pipeline-name-variables", "title": "Pipeline name variables", "text": "<p>These are special variables that refer to the name and path of a pipeline.</p> <ul> <li> <p><code>${pipeline.name}</code>: Concatenated path of the parent directory where pipeline.yaml is defined in.   For instance, <code>./data/pipelines/v1/pipeline.yaml</code>, here the value for the variable would be <code>data-pipelines-v1</code>.</p> </li> <li> <p><code>${pipeline_name_&lt;level&gt;}</code>: Similar to the previous variable, each <code>&lt;level&gt;</code> contains a part of the path to the <code>pipeline.yaml</code> file.   Consider the previous example, <code>${pipeline_name_0}</code> would be <code>data</code>, <code>${pipeline_name_1}</code> would be <code>pipelines</code>, and <code>${pipeline_name_2}</code> equals to <code>v1</code>.</p> </li> </ul>"}, {"location": "user/core-concepts/variables/substitution/#advanced-use-cases", "title": "Advanced use cases", "text": "<ol> <li>Refer to default component field values: As long as a value is assigned to a component attribute, it is possible to refer to it with a placeholder. To see all component fields, take a look at the pipeline schema.</li> <li>Chaining variables: It is possible to chain any number of variables, see the example above.</li> <li>Cross-component substitution: YAML is quite an intricate language and with some of its magic one could write cross-component references.</li> </ol>"}, {"location": "user/examples/atm-fraud-pipeline/", "title": "ATM fraud detection pipeline", "text": "<p>ATM fraud is a demo pipeline for ATM fraud detection. The original by Confluent is written in KSQL and outlined in this blogpost. The one used in this example is re-built from scratch using bakdata's <code>streams-bootstrap</code> library.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#what-this-will-demonstrate", "title": "What this will demonstrate", "text": "<ul> <li>Deploying a PostgreSQL database using Helm</li> <li>Deploying a pipeline using KPOps</li> <li>Destroying a pipeline using KPOps</li> </ul>"}, {"location": "user/examples/atm-fraud-pipeline/#prerequisites", "title": "Prerequisites", "text": "<p>Completed all steps in the setup.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#setup-and-deployment", "title": "Setup and deployment", "text": ""}, {"location": "user/examples/atm-fraud-pipeline/#postgresql", "title": "PostgreSQL", "text": "<p>Deploy PostgreSQL using the Bitnami Helm chart: Add the helm repository:</p> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami &amp;&amp; \\\nhelm repo update\n</code></pre> <p>Install the PostgreSQL with helm:</p> <pre><code>helm upgrade --install -f ./postgresql.yaml \\\n--namespace kpops \\\npostgresql bitnami/postgresql\n</code></pre> PostgreSQL Example Helm chart values (<code>postgresql.yaml</code>) <pre><code>auth:\n  database: app_db\n  enablePostgresUser: true\n  password: AppPassword\n  postgresPassword: StrongPassword\n  username: app1\nprimary:\n  persistence:\n    enabled: false\n    existingClaim: postgresql-data-claim\nvolumePermissions:\n  enabled: true\n</code></pre>"}, {"location": "user/examples/atm-fraud-pipeline/#atm-fraud-detection-example-pipeline-setup", "title": "ATM fraud detection example pipeline setup", "text": ""}, {"location": "user/examples/atm-fraud-pipeline/#port-forwarding", "title": "Port forwarding", "text": "<p>Before we deploy the pipeline, we need to forward the ports of <code>kafka-rest-proxy</code> and <code>kafka-connect</code>. Run the following commands in two different terminals.</p> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-rest 8082:8082\n</code></pre> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-kafka-connect 8083:8083\n</code></pre>"}, {"location": "user/examples/atm-fraud-pipeline/#deploying-the-atm-fraud-detection-pipeline", "title": "Deploying the ATM fraud detection pipeline", "text": "<ol> <li> <p>Clone the kpops-examples repository and <code>cd</code> into the directory.</p> </li> <li> <p>Install KPOps <code>pip install -r requirements.txt</code>.</p> </li> <li> <p>Export environment variables in your terminal:</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Deploy the pipeline</p> <pre><code>kpops deploy atm-fraud/pipeline.yaml --execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be deployed correctly.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#check-if-the-deployment-is-successful", "title": "Check if the deployment is successful", "text": "<p>You can use the Streams Explorer to see the deployed pipeline. To do so, port-forward the service in a separate terminal session using the command below:</p> <pre><code>kubectl port-forward -n kpops service/streams-explorer 8080:8080\n</code></pre> <p>After that open http://localhost:8080 in your browser. You should be able to see pipeline shown in the image below:</p> <p> </p> An overview of ATM fraud pipeline shown in Streams Explorer <p>Attention</p> <p>Kafka Connect needs some time to set up the connector. Moreover, Streams Explorer needs a while to scrape the information from Kafka connect. Therefore, it might take a bit until you see the whole graph.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#teardown-resources", "title": "Teardown resources", "text": ""}, {"location": "user/examples/atm-fraud-pipeline/#postrgresql", "title": "PostrgreSQL", "text": "<p>PostgreSQL can be uninstalled by running the following command:</p> <pre><code>helm --namespace kpops uninstall postgresql\n</code></pre>"}, {"location": "user/examples/atm-fraud-pipeline/#atm-fraud-pipeline", "title": "ATM fraud pipeline", "text": "<ol> <li> <p>Export environment variables in your terminal.</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Remove the pipeline</p> <pre><code>kpops clean atm-fraud/pipeline.yaml --verbose  --execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be destroyed correctly.</p> <p>Attention</p> <p>If you face any issues destroying this example see Teardown for manual deletion.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#common-errors", "title": "Common errors", "text": "<ul> <li><code>deploy</code> fails:</li> <li>Read the error message.</li> <li>Try to correct the mistakes if there were any. Likely the configuration is incorrect, or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>Run <code>deploy --dry-run</code> to avoid havig to <code>clean</code> again. If an error is dropped, start over from step 1.</li> <li>If the dry-run is succesful, run <code>deploy</code>.</li> <li><code>clean</code> fails:</li> <li>Read the error message.</li> <li>Try to correct the indicated mistakes if there were any. Likely the configuration is incorrect, or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>If <code>clean</code> fails, follow the steps in teardown.</li> </ul>"}, {"location": "user/getting-started/quick-start/", "title": "Quick start", "text": ""}, {"location": "user/getting-started/quick-start/#word-count", "title": "Word-count", "text": "<p>Word-count is a demo pipeline consisting of a producer producing words to Kafka, a Kafka streams app counting the number of times each word occurs, and finally a Redis database into which the words are exported.</p>"}, {"location": "user/getting-started/quick-start/#what-this-will-demonstrate", "title": "What this will demonstrate", "text": "<ul> <li>Deploying a Redis database using Helm</li> <li>Deploying a pipeline using KPOps</li> <li>Destroying a pipeline using KPOps</li> </ul>"}, {"location": "user/getting-started/quick-start/#prerequisites", "title": "Prerequisites", "text": "<p>Completed all steps in the setup.</p>"}, {"location": "user/getting-started/quick-start/#setup-and-deployment", "title": "Setup and deployment", "text": ""}, {"location": "user/getting-started/quick-start/#redis", "title": "Redis", "text": "<p>Deploy Redis using the Bitnami Helm chart: Add the Helm repository:</p> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami &amp;&amp; \\\nhelm repo update\n</code></pre> <p>Install Redis with Helm:</p> <pre><code>helm upgrade --install -f ./values-redis.yaml \\\n--namespace kpops \\\nredis bitnami/redis\n</code></pre> Redis example Helm chart values (<code>values-redis.yaml</code>) <pre><code>architecture: standalone\nauth:\n  enabled: false\nmaster:\n  count: 1\n  configuration: \"databases 1\"\nimage:\n  tag: 7.0.8\n</code></pre>"}, {"location": "user/getting-started/quick-start/#word-count-example-pipeline-setup", "title": "Word-count example pipeline setup", "text": ""}, {"location": "user/getting-started/quick-start/#port-forwarding", "title": "Port forwarding", "text": "<p>Before we deploy the pipeline, we need to forward the ports of <code>kafka-rest-proxy</code> and <code>kafka-connect</code>. Run the following commands in two different terminals.</p> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-rest 8082:8082\n</code></pre> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-kafka-connect 8083:8083\n</code></pre>"}, {"location": "user/getting-started/quick-start/#deploying-the-word-count-pipeline", "title": "Deploying the Word-count pipeline", "text": "<ol> <li> <p>Clone the kpops-examples repository and <code>cd</code> into the directory.</p> </li> <li> <p>Install KPOps <code>pip install -r requirements.txt</code>.</p> </li> <li> <p>Export environment variables in your terminal:</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Deploy the pipeline</p> <pre><code>kpops deploy word-count/pipeline.yaml --execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be deployed correctly.</p>"}, {"location": "user/getting-started/quick-start/#check-if-the-deployment-is-successful", "title": "Check if the deployment is successful", "text": "<p>You can use the Streams Explorer to inspect the deployed pipeline. To do so, port-forward the service in a separate terminal session using the command below:</p> <pre><code>kubectl port-forward -n kpops service/streams-explorer 8080:8080\n</code></pre> <p>After that open http://localhost:8080 in your browser.</p> <p>You should be able to see pipeline shown in the image below:</p> <p> </p> An overview of Word-count pipeline shown in Streams Explorer <p>Attention</p> <p>Kafka Connect needs some time to set up the connector. Moreover, Streams Explorer needs a while to scrape the information from Kafka Connect. Therefore, it might take a bit until you see the whole graph.</p>"}, {"location": "user/getting-started/quick-start/#teardown-resources", "title": "Teardown resources", "text": ""}, {"location": "user/getting-started/quick-start/#redis_1", "title": "Redis", "text": "<p>Redis can be uninstalled by running the following command:</p> <pre><code>helm --namespace kpops uninstall redis\n</code></pre>"}, {"location": "user/getting-started/quick-start/#word-count-pipeline", "title": "Word-count pipeline", "text": "<ol> <li> <p>Export environment variables in your terminal.</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Remove the pipeline</p> <pre><code>kpops clean word-count/pipeline.yaml --verbose --execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be destroyed correctly.</p> <p>Attention</p> <p>If you face any issues destroying this example see Teardown for manual deletion.</p>"}, {"location": "user/getting-started/quick-start/#common-errors", "title": "Common errors", "text": "<ul> <li><code>deploy</code> fails:<ol> <li>Read the error message.</li> <li>Try to correct the mistakes if there were any. Likely the configuration is incorrect, or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>Run <code>deploy --dry-run</code> to avoid having to <code>clean</code> again. If an error is dropped, start over from step 1.</li> <li>If the dry-run is successful, run <code>deploy</code>.</li> </ol> </li> <li><code>clean</code> fails:<ol> <li>Read the error message.</li> <li>Try to correct the indicated mistakes if there were any. Likely the configuration is incorrect, or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>If <code>clean</code> fails, follow the steps in teardown.</li> </ol> </li> </ul>"}, {"location": "user/getting-started/setup/", "title": "Setup KPOps", "text": "<p>In this part, you will set up KPOps. This includes:</p> <ul> <li>optionally creating a local Kubernetes cluster</li> <li>running Apache Kafka and Confluent's Schema Registry</li> <li>installing KPOps</li> </ul>"}, {"location": "user/getting-started/setup/#prerequisites", "title": "Prerequisites", "text": "<ul> <li>k3d (Version 5.4.6+) and Docker (Version &gt;= v20.10.5) or an existing Kubernetes cluster (&gt;= 1.21.0)</li> <li>kubectl (Compatible with server version 1.21.0)</li> <li>Helm (Version 3.8.0+)</li> </ul>"}, {"location": "user/getting-started/setup/#setup-kubernetes-with-k3d", "title": "Setup Kubernetes with k3d", "text": "<p>If you don't have access to an existing Kubernetes cluster, this section will guide you through creating a local cluster. We recommend the lightweight Kubernetes distribution k3s for this. k3d is a wrapper around k3s in Docker that lets you get started fast.</p> <ol> <li> <p>You can install k3d with its installation script:</p> <pre><code>wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/v5.4.6/install.sh | bash\n</code></pre> <p>For other ways of installing k3d, you can have a look at their installation guide.</p> </li> <li> <p>The Kafka deployment needs a modified Docker image. In that case the image is built and pushed to a Docker registry that holds it. If you do not have access to an existing Docker registry, you can use k3d's Docker registry:</p> <pre><code>k3d registry create kpops-registry.localhost --port 12345\n</code></pre> </li> <li> <p>Now you can create a new cluster called <code>kpops</code> that uses the previously created Docker registry:</p> <pre><code>k3d cluster create kpops --k3s-arg \"--no-deploy=traefik@server:*\" --registry-use k3d-kpops-registry.localhost:12345\n</code></pre> </li> </ol> <p>Note</p> <p>Creating a new k3d cluster automatically configures <code>kubectl</code> to connect to the local cluster by modifying your <code>~/.kube/config</code>. In case you manually set the <code>KUBECONFIG</code> variable or don't want k3d to modify your config, k3d offers many other options.</p> <p>You can check the cluster status with <code>kubectl get pods -n kube-system</code>. If all returned elements have a <code>STATUS</code> of <code>Running</code> or <code>Completed</code>, then the cluster is up and running.</p>"}, {"location": "user/getting-started/setup/#deploy-kafka", "title": "Deploy Kafka", "text": "<p>Kafka is an open-source data streaming platform. More information about Kafka can be found in the documentation. To deploy Kafka, this guide uses Confluent's Helm chart.</p> <ol> <li> <p>To allow connectivity to other systems Kafka Connect needs to be extended with drivers. You can install a JDBC driver for Kafka Connect by creating a new Docker image:</p> <ol> <li> <p>Create a <code>Dockerfile</code> with the following content:</p> <pre><code>FROM confluentinc/cp-kafka-connect:7.1.3\n\nRUN confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.6.0\n</code></pre> </li> <li> <p>Build and push the modified image to your private Docker registry:</p> <pre><code>docker build . --tag localhost:12345/kafka-connect-jdbc:7.1.3 &amp;&amp; \\\ndocker push localhost:12345/kafka-connect-jdbc:7.1.3\n</code></pre> </li> </ol> <p>Detailed instructions on building, tagging and pushing a docker image can be found in Docker docs.</p> </li> <li> <p>Add Confluent's Helm chart repository and update the index:</p> <pre><code>helm repo add confluentinc https://confluentinc.github.io/cp-helm-charts/ &amp;&amp;  \nhelm repo update\n</code></pre> </li> <li> <p>Install Kafka, Zookeeper, Confluent's Schema Registry, Kafka Rest Proxy, and Kafka Connect. A single Helm chart installs all five components. Below you can find an example for the <code>--values ./kafka.yaml</code> file configuring the deployment accordingly. Deploy the services:</p> <pre><code>helm upgrade \\\n    --install \\\n    --version 0.6.1 \\\n    --values ./kafka.yaml \\\n    --namespace kpops \\\n    --create-namespace \\\n    --wait \\\n    k8kafka confluentinc/cp-helm-charts\n</code></pre> </li> </ol> Kafka Helm chart values (<code>kafka.yaml</code>) <p>An example value configuration for Confluent's Helm chart. This configuration deploys a single Kafka Broker, a Schema Registry, Zookeeper, Kafka Rest Proxy, and Kafka Connect with minimal resources.</p> <pre><code>cp-zookeeper:\n  enabled: true\n  servers: 1\n  imageTag: 7.1.3\n  heapOptions: \"-Xms124M -Xmx124M\"\n  overrideGroupId: k8kafka\n  fullnameOverride: \"k8kafka-cp-zookeeper\"\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.2G\n    limits:\n      cpu: 250m\n      memory: 0.2G\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-kafka:\n  enabled: true\n  brokers: 1\n  imageTag: 7.1.3\n  podManagementPolicy: Parallel\n  configurationOverrides:\n    \"auto.create.topics.enable\": false\n    \"offsets.topic.replication.factor\": 1\n    \"transaction.state.log.replication.factor\": 1\n    \"transaction.state.log.min.isr\": 1\n    \"confluent.metrics.reporter.topic.replicas\": 1\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.5G\n    limits:\n      cpu: 250m\n      memory: 0.5G\n  prometheus:\n    jmx:\n      enabled: false\n  persistence:\n    enabled: false\n\ncp-schema-registry:\n  enabled: true\n  imageTag: 7.1.3\n  fullnameOverride: \"k8kafka-cp-schema-registry\"\n  overrideGroupId: k8kafka\n  kafka:\n    bootstrapServers: \"PLAINTEXT://k8kafka-cp-kafka-headless:9092\"\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.25G\n    limits:\n      cpu: 250m\n      memory: 0.25G\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-kafka-connect:\n  enabled: true\n  replicaCount: 1\n  image: k3d-kpops-registry.localhost:12345/kafka-connect-jdbc\n  imageTag: 7.1.3\n  fullnameOverride: \"k8kafka-cp-kafka-connect\"\n  overrideGroupId: k8kafka\n  kafka:\n    bootstrapServers: \"PLAINTEXT://k8kafka-cp-kafka-headless:9092\"\n  heapOptions: \"-Xms256M -Xmx256M\"\n  resources:\n    requests:\n      cpu: 500m\n      memory: 0.25G\n    limits:\n      cpu: 500m\n      memory: 0.25G\n  configurationOverrides:\n    \"consumer.max.poll.records\": \"10\"\n    \"consumer.max.poll.interval.ms\": \"900000\"\n    \"config.storage.replication.factor\": \"1\"\n    \"offset.storage.replication.factor\": \"1\"\n    \"status.storage.replication.factor\": \"1\"\n  cp-schema-registry:\n    url: http://k8kafka-cp-schema-registry:8081\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-kafka-rest:\n  enabled: true\n  imageTag: 7.1.3\n  fullnameOverride: \"k8kafka-cp-rest\"\n  heapOptions: \"-Xms256M -Xmx256M\"\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.25G\n    limits:\n      cpu: 250m\n      memory: 0.5G\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-ksql-server:\n  enabled: false\ncp-control-center:\n  enabled: false\n</code></pre>"}, {"location": "user/getting-started/setup/#deploy-streams-explorer", "title": "Deploy Streams Explorer", "text": "<p>Streams Explorer allows examining Apache Kafka data pipelines in a Kubernetes cluster including the inspection of schemas and monitoring of metrics. First, add the Helm repository:</p> <pre><code>helm repo add streams-explorer https://bakdata.github.io/streams-explorer &amp;&amp; \\\nhelm repo update\n</code></pre> <p>Below you can find an example for the <code>--values ./streams-explorer.yaml</code> file configuring the deployment accordingly. Now, deploy the service:</p> <pre><code>helm upgrade \\\n    --install \\\n    --version 0.2.3 \\\n    --values ./streams-explorer.yaml \\\n    --namespace kpops \\\n    streams-explorer streams-explorer/streams-explorer\n</code></pre> Streams Explorer Helm chart values (<code>streams-explorer.yaml</code>) <p>An example value configuration for Steams Explorer Helm chart.</p> <pre><code>imageTag: \"v2.1.2\"\nconfig:\n   K8S__deployment__cluster: true\n   SCHEMAREGISTRY__url: http://k8kafka-cp-schema-registry.kpops.svc.cluster.local:8081\n   KAFKACONNECT__url: http://k8kafka-cp-kafka-connect.kpops.svc.cluster.local:8083\nresources:\n   requests:\n       cpu: 200m\n       memory: 300Mi\n   limits:\n       cpu: 200m\n       memory: 300Mi\n</code></pre>"}, {"location": "user/getting-started/setup/#check-the-status-of-your-deployments", "title": "Check the status of your deployments", "text": "<p>Now we will check if all the pods are running in our namespace. You can list all pods in the namespace with this command:</p> <pre><code>kubectl --namespace kpops get pods\n</code></pre> <p>Then you should see the following output in your terminal:</p> <pre><code>NAME                                          READY   STATUS    RESTARTS   AGE\nk8kafka-cp-kafka-connect-8fc7d544f-8pjnt      1/1     Running   0          15m\nk8kafka-cp-zookeeper-0                        1/1     Running   0          15m\nk8kafka-cp-kafka-0                            1/1     Running   0          15m\nk8kafka-cp-schema-registry-588f8c65db-jdwbq   1/1     Running   0          15m\nk8kafka-cp-rest-6bbfd7b645-nwkf8              1/1     Running   0          15m\nstreams-explorer-54db878c67-s8wbz             1/1     Running   0          15m\n</code></pre> <p>Pay attention to the <code>STATUS</code> row. The pods should have a status of <code>Running</code>.</p>"}, {"location": "user/getting-started/setup/#install-kpops", "title": "Install KPOps", "text": "<p>KPOps comes as a PyPI package. You can install it with <code>pip</code>:</p> <pre><code>pip install kpops\n</code></pre>"}, {"location": "user/getting-started/teardown/", "title": "Teardown resources", "text": ""}, {"location": "user/getting-started/teardown/#kpops-teardown-commands", "title": "KPOps teardown commands", "text": "<ul> <li><code>destroy</code>: Removes Kubernetes resources.</li> <li><code>reset</code>: Runs <code>destroy</code>, resets the states of Kafka Streams apps and resets offsets to zero.</li> <li><code>clean</code>: Runs <code>reset</code> and removes all Kafka resources.</li> </ul>"}, {"location": "user/getting-started/teardown/#kpops-deployed-pipeline", "title": "KPOps-deployed pipeline", "text": "<p>The <code>kpops</code> CLI can be used to destroy a pipeline that was previously deployed with KPOps. In case that doesn't work, the pipeline can always be taken down manually with <code>helm</code> (see section Infrastructure).</p> <ol> <li> <p>Export environment variables.</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Navigate to the <code>examples</code> folder.     Replace the <code>&lt;name-of-the-example-directory&gt;</code> with the example you want to tear down.     For example the <code>atm-fraud-detection</code>.</p> </li> <li> <p>Remove the pipeline</p> <pre><code># Uncomment 1 line to either destroy, reset or clean.\n\n# poetry run kpops destroy &lt;name-of-the-example-directory&gt;/pipeline.yaml \\\n# poetry run kpops reset &lt;name-of-the-example-directory&gt;/pipeline.yaml \\\n# poetry run kpops clean &lt;name-of-the-example-directory&gt;/pipeline.yaml \\\n--config &lt;name-of-the-example-directory&gt;/config.yaml \\\n--execute\n</code></pre> </li> </ol>"}, {"location": "user/getting-started/teardown/#infrastructure", "title": "Infrastructure", "text": "<p>Delete namespace:</p> <pre><code>kubectl delete namespace kpops\n</code></pre> <p>Note</p> <p>In case <code>kpops destroy</code> is not working one can uninstall the pipeline services one by one. This is equivalent to running <code>kpops destroy</code>. In case a clean uninstall (like the one <code>kpops clean</code> does)  is needed, one needs to also delete the topics and schemas created by deployment of the pipeline.</p>"}, {"location": "user/getting-started/teardown/#local-cluster", "title": "Local cluster", "text": "<p>Delete local cluster:</p> <pre><code>k3d cluster delete kpops\n</code></pre>"}, {"location": "user/getting-started/teardown/#local-image-registry", "title": "Local image registry", "text": "<p>Delete local registry:</p> <pre><code>k3d registry delete k3d-kpops-registry.localhost\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/", "title": "Migrate from V1 to V2", "text": ""}, {"location": "user/migration-guide/v1-v2/#derive-component-type-automatically-from-class-name", "title": "Derive component type automatically from class name", "text": "<p>KPOps automatically infers the component <code>type</code> from the class name. Therefore, the <code>type</code> and <code>schema_type</code> attributes can be removed from your custom components. By convention the <code>type</code> would be the lower, and kebab cased name of the class.</p> <pre><code>class MyCoolStreamApp(StreamsApp):\n-    type = \"my-cool-stream-app\"\n+    ...\n</code></pre> <p>Because of this new convention <code>producer</code> has been renamed to <code>producer-app</code>. This must be addressed in your <code>pipeline.yaml</code> and <code>defaults.yaml</code>.</p> <pre><code>- producer:\n+ producer-app:\n    app:\n        streams:\n        outputTopic: output_topic\n        extraOutputTopics:\n            output_role1: output_topic1\n            output_role2: output_topic2\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#refactor-inputoutput-types", "title": "Refactor input/output types", "text": ""}, {"location": "user/migration-guide/v1-v2/#to-section", "title": "To section", "text": "<p>In the <code>to</code> section these have changed:</p> <ul> <li>The default type is <code>output</code></li> <li>If <code>role</code> is set, type is inferred to be <code>extra</code></li> <li>The type <code>error</code> needs to be defined explicitly</li> </ul> <pre><code>  to:\n    topics:\n      ${pipeline_name}-topic-1:\n-       type: extra\n        role: \"role-1\"\n        ...\n      ${pipeline_name}-topic-2:\n-       type: output\n        ...\n      ${pipeline_name}-topic-3:\n         type: error\n         ...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#from-section", "title": "From section", "text": "<p>In the <code>from</code> section these have changed:</p> <ul> <li>The default type is <code>input</code></li> <li><code>input-pattern</code> type is replaced by <code>pattern</code></li> <li>If <code>role</code> is set, type is inferred to be <code>extra</code></li> <li>If <code>role</code> is set, type is explicitly set to <code>pattern</code>, this would be inferred type <code>extra-pattern</code></li> </ul> <pre><code>  from:\n    topics:\n      ${pipeline_name}-input-topic:\n-       type: input\n        ...\n      ${pipeline_name}-extra-topic:\n-       type: extra\n        role: topic-role\n        ...\n      ${pipeline_name}-input-pattern-topic:\n-       type: input-pattern\n+       type: pattern\n        ...\n      ${pipeline_name}-extra-pattern-topic:\n-       type: extra-pattern\n+       type: pattern\n        role: some-role\n        ...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#remove-camel-case-conversion-of-internal-models", "title": "Remove camel case conversion of internal models", "text": "<p>All the internal KPOps models are now snake_case, and only Helm/Kubernetes values require camel casing. You can find an example of a <code>pipeline.yaml</code> in the following. Notice that the <code>app</code> section here remains untouched.</p> <pre><code>...\ntype: streams-app\n  name: streams-app\n  namespace: namespace\n  app:\n    streams:\n      brokers: ${brokers}\n      schemaRegistryUrl: ${schema_registry_url}\n     autoscaling:\n      consumerGroup: consumer-group\n      lagThreshold: 0\n      enabled: false\n      pollingInterval: 30\n\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: error\n-       keySchema: key-schema\n+       key_schema: key-schema\n-       valueSchema: value-schema\n+       value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs:\n          cleanup.policy: compact\n    models:\n      model: model\n  prefix: ${pipeline_name}-\n- repoConfig:\n+ repo_config:\n-   repositoryName: bakdata-streams-bootstrap\n+   repository_name: bakdata-streams-bootstrap\n    url: https://bakdata.github.io/streams-bootstrap/\n-   repoAuthFlags:\n+   repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.4\"\n...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#refactor-handling-of-helm-flags", "title": "Refactor handling of Helm flags", "text": "<p>If you are using the <code>KubernetesApp</code> class to define your own Kubernetes resource to deploy, the abstract function <code>get_helm_chart</code> that returns the chart for deploying the app using Helm is now a Python property and renamed to <code>helm_chart</code>.</p> <pre><code>class MyCoolApp(KubernetesApp):\n\n+   @property\n    @override\n-   def get_helm_chart(self) -&gt; str:\n+   def helm_chart(self) -&gt; str:\n        return \"./charts/charts-folder\"\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#plural-broker-field-in-pipeline-config", "title": "Plural broker field in pipeline config", "text": "<p>Since you can pass a comma separated string of broker address, the broker field in KPOps is now plural. The pluralization has affected multiple areas:</p>"}, {"location": "user/migration-guide/v1-v2/#configyaml", "title": "config.yaml", "text": "<pre><code>  environment: development\n- broker: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n+ brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n  kafka_connect_host: \"http://localhost:8083\"\n  kafka_rest_host: \"http://localhost:8082\"\n  schema_registry_url: \"http://localhost:8081\"\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#pipelineyaml-and-defaultyaml", "title": "pipeline.yaml and default.yaml", "text": "<p>The variable is now called <code>brokers</code>.</p> <pre><code>...\n  app:\n    streams:\n-     brokers: ${broker}\n+     brokers: ${brokers}\n      schemaRegistryUrl: ${schema_registry_url}\n    nameOverride: override-with-this-name\n    imageTag: \"1.0.0\"\n...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#environment-variable", "title": "Environment variable", "text": "<p>Previously, if you set the environment variable <code>KPOPS_KAFKA_BROKER</code>, you need to replace that now with <code>KPOPS_KAFKA_BROKERS</code>.</p>"}, {"location": "user/migration-guide/v2-v3/", "title": "Migrate from V2 to V3", "text": "<p>Jump to the summary</p>"}, {"location": "user/migration-guide/v2-v3/#use-hash-and-trim-long-helm-release-names-instead-of-only-trimming", "title": "Use hash and trim long Helm release names instead of only trimming", "text": "<p>KPOps handles long (more than 53 characters) Helm releases names differently. Helm will not find your (long) old release names anymore. Therefore, it is recommended that you should once destroy your pipeline with KPOps v2 to remove old Helm release names. After a clean destroy, re-deploy your pipeline with the KPOps v3.</p> <p>For example if you have a component with the Helm release name <code>example-component-name-too-long-fake-fakefakefakefakefake</code>. The new release name will shorten the original name to 53 characters and then replace the last 6 characters of the trimmed name with the first 5 characters of the result of SHA-1(helm_release_name).</p> <pre><code>example-component-name-too-long-fake-fakefakef-0a7fc ----&gt; 53 chars\n---------------------------------------------- -----\n  ^Shortened helm_release_name                 ^first 5 characters of SHA1(helm_release_name)\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#create-helmapp-component", "title": "Create HelmApp component", "text": "<p>All Helm-specific parts of the built-in <code>KubernetesApp</code> have been extracted to a new child component that is more appropriately named <code>HelmApp</code>. It has to be renamed in your existing pipeline defintions and custom components module.</p>"}, {"location": "user/migration-guide/v2-v3/#pipelineyaml", "title": "pipeline.yaml", "text": "<pre><code>-- type: kubernetes-app\n+- type: helm-app\n   name: foo\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#custom_modulepy", "title": "custom_module.py", "text": "<pre><code>- from kpops.components import KubernetesApp\n+ from kpops.components import HelmApp\n\n\n- class CustomHelmApp(KubernetesApp):\n+ class CustomHelmApp(HelmApp):\n      ...\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#create-streamsbootstrap-component-refactor-cleanup-jobs-as-individual-helmapp", "title": "Create StreamsBootstrap component &amp; refactor cleanup jobs as individual HelmApp", "text": "<p>Previously the default <code>KafkaApp</code> component configured the streams-bootstrap Helm Charts. Now, this component is no longer tied to Helm (or Kubernetes). Instead, there is a new <code>StreamsBootstrap</code> component that configures the Helm Chart repository for the components that use it, e.g. <code>StreamsApp</code> and <code>ProducerApp</code>. If you are using non-default values for the Helm Chart repository or version, it has to be updated as shown below.</p>"}, {"location": "user/migration-guide/v2-v3/#defaultsyaml", "title": "defaults.yaml", "text": "<pre><code>  kafka-app:\n    app:\n      streams: ...\n\n+ streams-bootstrap:\n    repo_config: ...\n    version: ...\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#refactor-kafka-connector-resetter-as-individual-helmapp", "title": "Refactor Kafka Connector resetter as individual HelmApp", "text": "<p>Internally, the Kafka Connector resetter is now its own standard <code>HelmApp</code>, removing a lot of the shared code. It is configured using the <code>resetter_namespace</code> (formerly <code>namespace</code>) and <code>resetter_values</code> attributes.</p>"}, {"location": "user/migration-guide/v2-v3/#defaultsyaml_1", "title": "defaults.yaml", "text": "<pre><code>  kafka-connector:\n-   namespace: my-namespace\n+   resetter_namespace: my-namespace\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#make-kafka-rest-proxy-kafka-connect-hosts-default-and-improve-schema-registry-config", "title": "Make Kafka REST Proxy &amp; Kafka Connect hosts default and improve Schema Registry config", "text": "<p>The breaking changes target the <code>config.yaml</code> file:</p> <ul> <li> <p>The <code>schema_registry_url</code> is replaced with <code>schema_registry.url</code> (default <code>http://localhost:8081</code>) and <code>schema_registry.enabled</code> (default <code>false</code>).</p> </li> <li> <p><code>kafka_rest_host</code> is renamed to <code>kafka_rest.url</code> (default <code>http://localhost:8082</code>).</p> </li> <li> <p><code>kafka_connect_host</code> is replaced with <code>kafka_connect.url</code> (default <code>http://localhost:8083</code>).</p> </li> <li> <p><code>brokers</code> is renamed to <code>kafka_brokers</code>.</p> </li> </ul> <p>The environment variable names of these config fields changed respectively. Please refer to the environment variables documentation page to see the newest changes.</p>"}, {"location": "user/migration-guide/v2-v3/#configyaml", "title": "config.yaml", "text": "<pre><code>  environment: development\n- brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n- kafka_rest_host: \"http://my-custom-rest.url:8082\"\n- kafka_connect_host: \"http://my-custom-connect.url:8083\"\n- schema_registry_url: \"http://my-custom-sr.url:8081\"\n+ kafka_brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n+ kafka_rest:\n+   url: \"http://my-custom-rest.url:8082\"\n+ kafka_connect:\n+   url: \"http://my-custom-connect.url:8083\"\n+ schema_registry:\n+   enabled: true\n+   url: \"http://my-custom-sr.url:8081\"\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#pipelineyaml-and-defaultyaml", "title": "pipeline.yaml and default.yaml", "text": "<p>The variable is now called <code>kafka_brokers</code>.</p> <pre><code>...\n  app:\n    streams:\n-     brokers: ${brokers}\n+     brokers: ${kafka_brokers}\n      schemaRegistryUrl: ${schema_registry_url}\n    nameOverride: override-with-this-name\n    imageTag: \"1.0.0\"\n...\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#define-custom-components-module-pipeline-base-dir-globally", "title": "Define custom components module &amp; pipeline base dir globally", "text": "<p>Warning</p> <p>The previous CLI parameters have been removed.</p> <p>The options for a custom <code>components_module</code> and <code>pipeline_base_dir</code> are now global settings, defined in <code>config.yaml</code>.</p>"}, {"location": "user/migration-guide/v2-v3/#configyaml_1", "title": "config.yaml", "text": "<pre><code>  kafka_brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n  environment: development\n+ components_module: components\n+ pipeline_base_dir: pipelines\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#move-github-action-to-repsitory-root", "title": "Move GitHub action to repsitory root", "text": "<p>The location of the GitHub action has changed, and it's now available directly as <code>bakdata/kpops</code>.</p> <p>You'll need to change it in your GitHub CI workflows.</p> <pre><code>steps:\n  - name: kpops deploy\n-   uses: bakdata/kpops/actions/kpops-runner@main\n+   uses: bakdata/kpops@main\n    with:\n      command: deploy --execute\n      # ...\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#allow-overriding-config-files", "title": "Allow overriding config files", "text": "<p>Specifying the environment is no longer mandatory. If not defined, only the global files will be used.</p> <p><code>environment</code> is no longer specified in <code>config.yaml</code>. Instead, it can be either set via the CLI flag <code>--environment</code> or with the environment variable <code>KPOPS_ENVIRONMENT</code>.</p> <p>The <code>--config</code> flag in the CLI now points to the directory that contains <code>config*.yaml</code> files. The files to be used are resolved based on the provided (or not) <code>environment</code>.</p>"}, {"location": "user/migration-guide/v2-v3/#configyaml_2", "title": "config.yaml", "text": "<pre><code>- environment: development\n  kafka_brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n  schema_registry:\n    enabled: true\n    url: \"http://my-custom-sr.url:8081\"\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#change-substitution-variables-separator-to", "title": "Change substitution variables separator to <code>.</code>", "text": "<p>The delimiter in the substitution variables is changed to <code>.</code>.</p>"}, {"location": "user/migration-guide/v2-v3/#pipelineyaml-and-defaultyaml_1", "title": "pipeline.yaml and default.yaml", "text": "<pre><code>steps:\n  - type: scheduled-producer\n    app:\n      labels:\n-       app_type: \"${component_type}\"\n-       app_name: \"${component_name}\"\n-       app_schedule: \"${component_app_schedule}\"\n+       app_type: \"${component.type}\"\n+       app_name: \"${component.name}\"\n+       app_schedule: \"${component.app.schedule}\"\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#configyaml_3", "title": "config.yaml", "text": "<pre><code>topic_name_config:\n- default_error_topic_name: \"${pipeline_name}-${component_name}-dead-letter-topic\"\n- default_output_topic_name: \"${pipeline_name}-${component_name}-topic\"\n+ default_error_topic_name: \"${pipeline_name}-${component.name}-dead-letter-topic\"\n+ default_output_topic_name: \"${pipeline_name}-${component.name}-topic\"\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#refactor-generate-template-for-python-api-usage", "title": "Refactor generate template for Python API usage", "text": "<p>The <code>template</code> method of every pipeline component has been renamed to <code>manifest</code> as it is no longer strictly tied to Helm template. Instead, it can be used to render the final resources of a component, such as Kubernetes manifests.</p> <p>There is also a new <code>kpops manifest</code> command replacing the existing <code>kpops generate --template</code> flag.</p> <p>If you're using this functionality in your custom components, it needs to be updated.</p> <pre><code>  from kpops.components.base_components.models.resource import Resource\n\n  @override\n- def template(self) -&gt; None:\n+ def manifest(self) -&gt; Resource:\n  \"\"\"Render final component resources, e.g. Kubernetes manifests.\"\"\"\n      return []  # list of manifests\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#namespace-substitution-vars", "title": "Namespace substitution vars", "text": "<p>The global configuration variables are now namespaced under the config key, such as <code>${config.kafka_brokers}</code>, <code>${config.schema_registry.url}</code>. Same with pipeline variables, e.g. <code>${pipeline_name} \u2192 ${pipeline.name}</code>. This would make it more uniform with the existing <code>${component.&lt;key&gt;}</code> variables.</p>"}, {"location": "user/migration-guide/v2-v3/#pipelineyaml_1", "title": "pipeline.yaml", "text": "<pre><code>  name: kafka-app\n- prefix: ${pipeline_name}-\n+ prefix: ${pipeline.name}-\n  app:\n    streams:\n-     brokers: ${kafka_brokers}\n-     schemaRegistryUrl: ${schema_registry.url}\n+     brokers: ${config.kafka_brokers}\n+     schemaRegistryUrl: ${config.schema_registry.url}\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#summary", "title": "Summary", "text": "<p>Warning</p> <p>Helm will not find your (long) old release names anymore.</p> defaults.yaml <pre><code>  kafka-app:\n    app:\n      streams: ...\n\n+ streams-bootstrap:\n    repo_config: ...\n    version: ...\n</code></pre> pipeline.yaml <pre><code>- - type: kubernetes-app\n+ - type: helm-app\n  ...\n  - type: kafka-app\n    app:\n-     brokers: ${brokers}\n+     brokers: ${config.kafka_brokers}\n      labels:\n-       app_schedule: \"${component_app_schedule}\"\n+       app_schedule: \"${component.app.schedule}\"\n  ...\n  - type: kafka-connector\n-   namespace: my-namespace\n+   resetter_namespace: my-namespace\n  ...\n</code></pre> config.yaml <pre><code>- environment: development\n\n+ components_module: components\n\n+ pipeline_base_dir: pipelines\n\n- brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n+ kafka_brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n\n- kafka_rest_host: \"http://my-custom-rest.url:8082\"\n+ kafka_rest:\n+   url: \"http://my-custom-rest.url:8082\"\n\n- kafka_connect_host: \"http://my-custom-connect.url:8083\"\n+ kafka_connect:\n+   url: \"http://my-custom-connect.url:8083\"\n\n- schema_registry_url: \"http://my-custom-sr.url:8081\"\n+ schema_registry:\n+   enabled: true\n+   url: \"http://my-custom-sr.url:8081\"\n\n  topic_name_config:\n- default_error_topic_name: \"${pipeline_name}-${component_name}-dead-letter-topic\"\n+ default_error_topic_name: \"${pipeline.name}-${component.name}-dead-letter-topic\"\n  ...\n</code></pre> custom_module.py <pre><code>- from kpops.components import KubernetesApp\n+ from kpops.components import HelmApp\n+ from kpops.components.base_components.models.resource import Resource\n\n- class CustomHelmApp(KubernetesApp):\n+ class CustomHelmApp(HelmApp):\n\n  @override\n- def template(self) -&gt; None:\n+ def manifest(self) -&gt; Resource:\n  \"\"\"Render final component resources, e.g. Kubernetes manifests.\"\"\"\n      return []  # list of manifests\n  ...\n</code></pre> github_ci_workflow.yaml <pre><code>  steps:\n    - name: ...\n-     uses: bakdata/kpops/actions/kpops-runner@main\n+     uses: bakdata/kpops@main\n  ...\n</code></pre>"}, {"location": "user/migration-guide/v3-v4/", "title": "Migrate from V3 to V4", "text": ""}, {"location": "user/migration-guide/v3-v4/#distribute-defaults-across-multiple-files", "title": "Distribute defaults across multiple files", "text": "<p>Warning</p> <p>The <code>--defaults</code> flag is removed</p> <p>It is possible now to use multiple default values. The <code>defaults.yaml</code> (or <code>defaults_&lt;env&gt;.yaml</code>) files can be distributed across multiple files. These will be picked up by KPOps and get merged into a single <code>pipeline.yaml</code> file. KPOps starts from reading the default files from where the pipeline path is defined and picks up every defaults file on its way to where the <code>pipeline_base_dir</code> is defined.</p> <p>For example, imagine the following folder structure:</p> <pre><code>\u2514\u2500 pipelines\n   \u2514\u2500\u2500 distributed-defaults\n       \u251c\u2500\u2500 defaults.yaml\n       \u251c\u2500\u2500 defaults_dev.yaml\n       \u2514\u2500\u2500 pipeline-deep\n           \u251c\u2500\u2500 defaults.yaml\n           \u2514\u2500\u2500 pipeline.yaml\n</code></pre> <p>The <code>pipeline_base_dir</code> is configured to <code>pipelines</code>. Now if we generate this pipeline with the following command:</p> <pre><code>kpops generate \\\n      --environment dev\n      ./pipelines/distributed-defaults/pipeline-deep/pipeline.yaml\n</code></pre> <p>The defaults would be picked in the following order (high to low priority):</p> <ul> <li><code>./pipelines/distributed-defaults/pipeline-deep/defaults.yaml</code></li> <li><code>./pipelines/distributed-defaults/defaults_dev.yaml</code></li> <li><code>./pipelines/distributed-defaults/defaults.yaml</code></li> </ul> <p>The deepest <code>defaults.yaml</code> file in the folder hierarchy (i.e., the closest one to the <code>pipeline.yaml</code>) overwrites the higher-level defaults' values.</p>"}, {"location": "user/migration-guide/v4-v5/", "title": "Migrate from V4 to V5", "text": ""}, {"location": "user/migration-guide/v4-v5/#allow-custom-timeout-for-external-services", "title": "Allow custom timeout for external services", "text": "<p>The global <code>timeout</code> setting has been removed. Instead, an individual timeout can be set for each external service. The default is 30 seconds.</p>"}, {"location": "user/migration-guide/v4-v5/#configyaml", "title": "config.yaml", "text": "<pre><code>- timeout: 300\n\n  kafka_rest:\n    url: \"http://my-custom-rest.url:8082\"\n+   timeout: 30\n  kafka_connect:\n    url: \"http://my-custom-connect.url:8083\"\n+   timeout: 30\n  schema_registry:\n    enabled: true\n    url: \"http://my-custom-sr.url:8081\"\n+   timeout: 30\n</code></pre>"}, {"location": "user/migration-guide/v5-v6/", "title": "Migrate from V5 to V6", "text": ""}, {"location": "user/migration-guide/v5-v6/#deploy-multiple-pipelines", "title": "Deploy multiple pipelines", "text": "<p>KPOps can now deploy multiple pipelines in a single command. It is possible to pass one or many pipeline.yaml files or pass a directory with many pipeline.yaml files within it.</p> <p>The environment variable <code>KPOPS_PIPELINE_PATH</code> is changed to <code>KPOPS_PIPELINE_PATHS</code>.</p> <p>Read more:</p> <ul> <li>CLI Usage</li> <li>Environment variables</li> </ul>"}, {"location": "user/migration-guide/v5-v6/#separate-kpops-api-from-the-cli", "title": "Separate KPOps API from the CLI", "text": "<p>KPops Python API is now stable and separated from the CLI! \ud83c\udf89</p>"}, {"location": "user/migration-guide/v6-v7/", "title": "Migrate from V6 to V7", "text": ""}, {"location": "user/migration-guide/v6-v7/#automatic-loading-of-namespaced-custom-components", "title": "Automatic loading of namespaced custom components", "text": "<p>KPOps is now distributed as a Python namespace package (as defined by PEP 420). This allows us to standardize the namespace <code>kpops.components</code> for both builtin and custom pipeline components.</p> <p>As a result of the restructure, some imports need to be adjusted:</p> <p>KPOps Python API</p> <pre><code>- import kpops\n+ import kpops.api as kpops\n</code></pre> <p>builtin KPOps components</p> <pre><code>- from kpops.components import (\n-     HelmApp,\n-     KafkaApp,\n-     KafkaConnector,\n-     KafkaSinkConnector,\n-     KafkaSourceConnector,\n-     KubernetesApp,\n-     StreamsBootstrap,\n-     ProducerApp,\n-     StreamsApp,\n-     PipelineComponent,\n-     StreamsApp,\n-     ProducerApp,\n- )\n+ from kpops.components.base_components import (\n+     HelmApp,\n+     KafkaApp,\n+     KafkaConnector,\n+     KafkaSinkConnector,\n+     KafkaSourceConnector,\n+     KubernetesApp,\n+     PipelineComponent,\n+ )\n+ from kpops.components.streams_bootstrap import (\n+     StreamsBootstrap,\n+     StreamsApp,\n+     ProducerApp,\n+ )\n</code></pre>"}, {"location": "user/migration-guide/v6-v7/#your-custom-kpops-components", "title": "your custom KPOps components", "text": ""}, {"location": "user/migration-guide/v6-v7/#configyaml", "title": "config.yaml", "text": "<pre><code>- components_module: components\n</code></pre>"}, {"location": "user/migration-guide/v6-v7/#python-module", "title": "Python module", "text": "<pre><code>- components/__init__.py\n+ kpops/components/custom/__init__.py\n</code></pre>"}, {"location": "user/migration-guide/v6-v7/#rename-app-field", "title": "Rename app field", "text": "<p>The <code>app</code> attribute of the builtin KPOps components has been renamed to better differentiate them. Both your <code>pipeline.yaml</code> and <code>defaults.yaml</code> files have to be updated, e.g.:</p>"}, {"location": "user/migration-guide/v6-v7/#defaultsyaml", "title": "defaults.yaml", "text": "<pre><code>  kubernetes-app:\n-   app: {}\n+   values: {}\n\n  helm-app:\n-   app: {}\n+   values: {}\n\n  kafka-app:\n-   app: {}\n+   values: {}\n\n  streams-app:\n-   app: {}\n+   values: {}\n\n  producer-app:\n-   app: {}\n+   values: {}\n\n  kafka-connector:\n-   app: {}\n+   config: {}\n\n  kafka-source-connector:\n-   app: {}\n+   config: {}\n\n  kafka-sink-connector:\n-   app: {}\n+   config: {}\n</code></pre>"}, {"location": "user/migration-guide/v6-v7/#call-destroy-from-inside-of-reset-or-clean", "title": "Call destroy from inside of reset or clean", "text": "<p>Before v7, the KPOps CLI executed <code>destroy</code> before running <code>reset/clean</code> to ensure the component was destroyed.</p> <p>This logic has changed. The <code>destroy</code> method is now called within the <code>PipelineComponent</code>'s <code>reset</code>/<code>clean</code>.</p> <p>During migrating to v7, you should check your custom components and see if they override the <code>reset</code>/<code>clean</code> methods. If so, you need to call the supermethod <code>reset</code>/<code>clean</code> to trigger the <code>destroy</code> inside the parent class. Alternatively, if you are implementing the <code>PipelineComponent</code> class, you need to call the <code>destroy</code> method at the beginning of the method.</p>"}, {"location": "user/migration-guide/v6-v7/#componentspy", "title": "components.py", "text": "<p>For example, when creating a custom <code>StreamsApp</code> or <code>ProducerApp</code> (or any other custom component), you must call the supermethod <code>reset</code>/<code>clean</code> to execute the <code>destroy</code> in the parent class. Otherwise, the logic of destroy will not be executed!</p> <pre><code>class MyStreamsApp(StreamsApp):\n\n    @override\n    async def clean(self, dry_run: bool) -&gt; None:\n+       await super().clean(dry_run)\n        # Some custom clean logic\n        # ...\n        ```diff\n        \n \nclass MyCustomComponent(PipelineComponent):\n    \n    @override\n    async def destroy(self, dry_run: bool) -&gt; None:\n        # Some custom destroy logic\n        # ...\n\n    @override\n    async def clean(self, dry_run: bool) -&gt; None:\n+       await super().clean(dry_run)\n        # Some custom clean logic\n        # ...\n</code></pre>"}, {"location": "user/migration-guide/v7-v8/", "title": "Migrate from V7 to V8", "text": ""}, {"location": "user/migration-guide/v7-v8/#add-support-for-streams-bootstrap-v3", "title": "Add support for streams-bootstrap v3", "text": "<p>From now on KPOps supports streams-bootstrap v3 as its default component. The previous streams-bootstrap version (below 3.x.x) is marked as deprecated and will be removed in a future version of KPOps. If you don't want to migrate your producer or streams app to v3, you should suffix your components with <code>-v2</code>. Here is an example of a <code>pipeline.yaml</code> file.</p>"}, {"location": "user/migration-guide/v7-v8/#pipelineyaml", "title": "pipeline.yaml", "text": "<pre><code>- - type: producer-app\n+ - type: producer-app-v2\n\n- - type: streams-app\n+ - type: streams-app-v2\n\n# rest of your pipeline\n</code></pre>"}, {"location": "user/migration-guide/v7-v8/#my-componentspy", "title": "my-components.py", "text": "<pre><code>- class MyStreamsApp(StreamsApp):\n+ class MyStreamsApp(StreamsAppV2):\n    ...\n</code></pre> <p>Info</p> <p>The <code>streams-boostrap</code>, <code>streams-app</code>, and <code>producer-app</code> now all take the Helm values of streams-bootstrap version 3. You can find these values under the Helm charts documentation or by referring to the Base model definitions.</p>"}, {"location": "user/migration-guide/v7-v8/#rename-role-to-label", "title": "Rename role to label", "text": "<p>The keyword <code>role</code> is renamed to <code>label</code>. You need to replace it in your <code>pipeline.yaml</code>, <code>defaults.yaml</code>, and the Python components definition files. Here is a simple example of the <code>defaults.yaml</code>.</p>"}, {"location": "user/migration-guide/v7-v8/#defaultsyaml", "title": "defaults.yaml", "text": "<pre><code>streams-app-v2:\n  values:\n    streams:\n      brokers: localhost:9092\n  from:\n    topics:\n      my-labeled-input-topic:\n-       role: my-input-topic-label\n+       label: my-input-topic-label\n      my-labeled-input-pattern:\n        type: pattern\n-       role: my-input-topic-labeled-pattern\n+       label: my-input-topic-labeled-pattern\n\n  to:\n    topics:\n      my-labeled-topic-output:\n-       role: my-output-topic-label\n+       label: my-output-topic-label\n\n# rest of your pipeline\n</code></pre>"}, {"location": "user/migration-guide/v7-v8/#make-kafkaapp-responsible-for-deployingcleaning-streams-bootstrap-components", "title": "Make KafkaApp responsible for deploying/cleaning streams bootstrap components", "text": "<p>The <code>KafkaApp</code> component now only contains the deployment logic of the stream-bootstrap applications (streams-app, producer-app). It should not be used in the <code>defaults.yaml</code> nor the <code>pipeline.yaml</code>. If you are using it, it should be replaced by <code>streams-bootstrap</code>.</p>"}, {"location": "user/migration-guide/v7-v8/#defaultsyaml_1", "title": "defaults.yaml", "text": "<pre><code>- kafka-app:\n+ streams-bootstrap-v2:\n    values:\n      streams:\n        brokers: 127.0.0.1:9092\n        schemaRegistryUrl: 127.0.0.1:8081\n</code></pre>"}, {"location": "user/references/cli-commands/", "title": "CLI Usage", "text": "<p>Usage:</p> <pre><code>$ kpops [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>-V, --version</code>: Print KPOps version</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>clean</code>: Clean pipeline steps</li> <li><code>deploy</code>: Deploy pipeline steps</li> <li><code>destroy</code>: Destroy pipeline steps</li> <li><code>generate</code>: Generate enriched pipeline representation</li> <li><code>init</code>: Initialize a new KPOps project.</li> <li><code>manifest</code>: Render final resource representation</li> <li><code>reset</code>: Reset pipeline steps</li> <li><code>schema</code>: Generate JSON schema.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-clean", "title": "<code>kpops clean</code>", "text": "<p>Clean pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops clean [OPTIONS] PIPELINE_PATHS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATHS...</code>: Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'.  [env var: KPOPS_PIPELINE_PATHS;required]</li> </ul> <p>Options:</p> <ul> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--config DIRECTORY</code>: Path to the dir containing config.yaml files  [env var: KPOPS_CONFIG_PATH; default: .]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--environment TEXT</code>: The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development).   [env var: KPOPS_ENVIRONMENT]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--parallel / --no-parallel</code>: Enable or disable parallel execution of pipeline steps. If enabled, multiple steps can be processed concurrently. If disabled, steps will be processed sequentially.  [default: no-parallel]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-deploy", "title": "<code>kpops deploy</code>", "text": "<p>Deploy pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops deploy [OPTIONS] PIPELINE_PATHS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATHS...</code>: Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'.  [env var: KPOPS_PIPELINE_PATHS;required]</li> </ul> <p>Options:</p> <ul> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--config DIRECTORY</code>: Path to the dir containing config.yaml files  [env var: KPOPS_CONFIG_PATH; default: .]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--environment TEXT</code>: The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development).   [env var: KPOPS_ENVIRONMENT]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--parallel / --no-parallel</code>: Enable or disable parallel execution of pipeline steps. If enabled, multiple steps can be processed concurrently. If disabled, steps will be processed sequentially.  [default: no-parallel]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-destroy", "title": "<code>kpops destroy</code>", "text": "<p>Destroy pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops destroy [OPTIONS] PIPELINE_PATHS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATHS...</code>: Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'.  [env var: KPOPS_PIPELINE_PATHS;required]</li> </ul> <p>Options:</p> <ul> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--config DIRECTORY</code>: Path to the dir containing config.yaml files  [env var: KPOPS_CONFIG_PATH; default: .]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--environment TEXT</code>: The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development).   [env var: KPOPS_ENVIRONMENT]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--parallel / --no-parallel</code>: Enable or disable parallel execution of pipeline steps. If enabled, multiple steps can be processed concurrently. If disabled, steps will be processed sequentially.  [default: no-parallel]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-generate", "title": "<code>kpops generate</code>", "text": "<p>Enrich pipeline steps with defaults. The enriched pipeline is used for all KPOps operations (deploy, destroy, ...).</p> <p>Usage:</p> <pre><code>$ kpops generate [OPTIONS] PIPELINE_PATHS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATHS...</code>: Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'.  [env var: KPOPS_PIPELINE_PATHS;required]</li> </ul> <p>Options:</p> <ul> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--config DIRECTORY</code>: Path to the dir containing config.yaml files  [env var: KPOPS_CONFIG_PATH; default: .]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--environment TEXT</code>: The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development).   [env var: KPOPS_ENVIRONMENT]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-init", "title": "<code>kpops init</code>", "text": "<p>Initialize a new KPOps project.</p> <p>Usage:</p> <pre><code>$ kpops init [OPTIONS] PATH\n</code></pre> <p>Arguments:</p> <ul> <li><code>PATH</code>: Path for a new KPOps project. It should lead to an empty (or non-existent) directory. The part of the path that doesn't exist will be created.  [required]</li> </ul> <p>Options:</p> <ul> <li><code>--config-include-opt / --no-config-include-opt</code>: Whether to include non-required settings in the generated 'config.yaml'  [default: no-config-include-opt]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-manifest", "title": "<code>kpops manifest</code>", "text": "<p>In addition to generate, render final resource representation for each pipeline step, e.g. Kubernetes manifests.</p> <p>Usage:</p> <pre><code>$ kpops manifest [OPTIONS] PIPELINE_PATHS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATHS...</code>: Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'.  [env var: KPOPS_PIPELINE_PATHS;required]</li> </ul> <p>Options:</p> <ul> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--config DIRECTORY</code>: Path to the dir containing config.yaml files  [env var: KPOPS_CONFIG_PATH; default: .]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--environment TEXT</code>: The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development).   [env var: KPOPS_ENVIRONMENT]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-reset", "title": "<code>kpops reset</code>", "text": "<p>Reset pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops reset [OPTIONS] PIPELINE_PATHS...\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATHS...</code>: Paths to dir containing 'pipeline.yaml' or files named 'pipeline.yaml'.  [env var: KPOPS_PIPELINE_PATHS;required]</li> </ul> <p>Options:</p> <ul> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--config DIRECTORY</code>: Path to the dir containing config.yaml files  [env var: KPOPS_CONFIG_PATH; default: .]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--environment TEXT</code>: The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development).   [env var: KPOPS_ENVIRONMENT]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--parallel / --no-parallel</code>: Enable or disable parallel execution of pipeline steps. If enabled, multiple steps can be processed concurrently. If disabled, steps will be processed sequentially.  [default: no-parallel]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-schema", "title": "<code>kpops schema</code>", "text": "<p>Generate JSON schema.</p> <p>The schemas can be used to enable support for KPOps files in a text editor.</p> <p>Usage:</p> <pre><code>$ kpops schema [OPTIONS] SCOPE:{pipeline|defaults|config}\n</code></pre> <p>Arguments:</p> <ul> <li><code>SCOPE:{pipeline|defaults|config}</code>:          Scope of the generated schema<pre><code>- pipeline: Schema of PipelineComponents for KPOps pipeline.yaml\n\n- defaults: Schema of PipelineComponents for KPOps defaults.yaml\n\n- config: Schema for KPOps config.yaml  [required]\n</code></pre> </li> </ul> <p>Options:</p> <ul> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/editor-integration/", "title": "Editor integration", "text": ""}, {"location": "user/references/editor-integration/#native", "title": "Native", "text": "<p>We are working towards first-class editor support by providing plugins that work out of the box.</p> <ul> <li>Neovim: kpops.nvim</li> <li>Visual Studio Code: planned</li> </ul>"}, {"location": "user/references/editor-integration/#manual-for-unsupported-editors-with-lsp", "title": "Manual (for unsupported editors with LSP)", "text": "<ol> <li>Install the yaml-language-server in your editor of choice. (requires LSP support)</li> <li>Configure the extension with the settings below.</li> </ol> <code>settings.json</code> <pre><code>{\n    \"yaml.schemas\": {\n        \"https://bakdata.github.io/kpops/4.0/schema/pipeline.json\": [\n            \"pipeline.yaml\",\n            \"pipeline_*.yaml\"\n        ],\n        \"https://bakdata.github.io/kpops/4.0/schema/defaults.json\": [\n            \"defaults.yaml\",\n            \"defaults_*.yaml\"\n        ],\n        \"https://bakdata.github.io/kpops/4.0/schema/config.json\": [\n            \"config.yaml\",\n            \"config_*.yaml\"\n        ]\n    }\n}\n</code></pre> <p>Advanced usage</p> <p>It is possible to generate schemas with the <code>kpops schema</code> command. Useful for including custom components or when using a pre-release version of KPOps.</p>"}, {"location": "user/references/editor-integration/#concepts", "title": "Concepts", "text": "<p>KPOps provides JSON schemas that enable autocompletion and validation for all YAML files that the user must work with.</p>"}, {"location": "user/references/editor-integration/#supported-files", "title": "Supported files", "text": "<ul> <li><code>pipeline.yaml</code></li> <li><code>defaults.yaml</code></li> <li><code>config.yaml</code></li> </ul>"}, {"location": "user/references/ci-integration/github-actions/", "title": "GitHub Actions integration", "text": "<p>We provided a GitHub composite action <code>bakdata/kpops</code> that installs and executes KPOps commands with the given parameters.</p>"}, {"location": "user/references/ci-integration/github-actions/#input-parameters", "title": "Input Parameters", "text": "Name Required Default Value Type Description command \u2705 - string KPOps command to run. generate, deploy, destroy, reset, clean are possible values. Flags such as --dry-run and --execute need to be specified pipeline \u2705 - string Pipeline to run by KPOps working-directory \u274c . string root directory used by KPOps to run pipelines config \u274c - string Directory containing the config*.yaml file(s) environment \u274c - string Environment to run KPOps in components \u274c - string components package path filter-type \u274c - string Whether to include/exclude the steps defined in KPOPS_PIPELINE_STEPS parallel \u274c \"false\" string Whether to run pipelines in parallel python-version \u274c \"3.11.x\" string Python version to install (Defaults to the latest stable version of Python 3.11) kpops-version \u274c latest string KPOps version to install helm-version \u274c latest string Helm version to install token \u274c latest string secrets.GITHUB_TOKEN, needed for setup-helm action if helm-version is set to latest"}, {"location": "user/references/ci-integration/github-actions/#usage", "title": "Usage", "text": "<pre><code>steps:\n  # ...\n  # This step is useful for debugging reasons\n  - name: Generate Kafka pipeline\n    uses: bakdata/kpops@main\n    with:\n      command: generate\n      working-directory: home/my-kpops-root-dir\n      pipeline: pipelines/my-pipeline-file.yaml\n      kpops-version: 1.2.3\n\n  # It is possible to use a pre-release KPOps version from TestPyPI https://test.pypi.org/project/kpops/#history\n  - name: Deploy Kafka pipeline\n    uses: bakdata/kpops@main\n    with:\n      command: deploy --execute\n      working-directory: home/my-kpops-root-dir\n      pipeline: pipelines/my-pipeline-file.yaml\n      kpops-version: 1.2.5.dev20230707132709\n  # ...\n</code></pre>"}]}