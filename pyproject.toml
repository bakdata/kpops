[tool.poetry]
name = "kpops"
version = "2.0.9"
description = "KPOps is a tool to deploy Kafka pipelines to Kubernetes"
authors = ["bakdata <opensource@bakdata.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/bakdata/kpops"
documentation = "https://bakdata.github.io/kpops/latest"
keywords = ["kafka", "kubernetes", "stream-processing", "pipelines"]
classifiers = [
  "Environment :: Console",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Intended Audience :: Developers",
  "Typing :: Typed",
]

[tool.poetry.scripts]
kpops = "kpops.cli.main:app"

[tool.poetry.dependencies]
python = "^3.10"
pydantic = { extras = ["dotenv"], version = "^1.10.8" }
rich = "^12.4.4"
PyYAML = "^6.0"
typer = { extras = ["all"], version = "^0.6.1" }
dtyper = "^2.1.0"
pyhumps = "^3.7.3"
cachetools = "^5.2.0"
dictdiffer = "^0.9.0"
python-schema-registry-client = "^2.4.1"
httpx = "^0.24.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.1.2"
pytest-mock = "^3.10.0"
pytest-timeout = "^2.1.0"
snapshottest = "^0.6.0"
pre-commit = "^2.19.0"
ruff = "^0.0.291"
black = "^23.7.0"
typer-cli = "^0.0.13"
pyright = "^1.1.314"
pytest-rerunfailures = "^11.1.2"
pytest-httpx = "^0.22.0"
pytablewriter = { extras = ["from"], version = "^1.0.0" }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs-macros-plugin = "^0.7.0"
mkdocs-material = "^9.0.0"
mkdocs = "^1.4.2"
mkdocs-material-extensions = "^1.1.1"
mkdocs-glightbox = "^0.3.1"
mike = "^1.1.2"

[tool.poetry_bumpversion.file."kpops/__init__.py"]

[tool.ruff]
ignore = [
  # "E203", # whitespace before ':' -- Not PEP8 compliant, black won't correct it, add when out of nursery
  "E501", # Line too long -- Clashes with `black`
  "D1", # Missing docstring for {} -- Inconvenient to enforce
  "RUF012", # type class attrs with `ClassVar` -- Too strict/trigger-happy
  "UP007", # Use X | Y for type annotations -- `typer` doesn't support it
  "RET505", # Unnecessary {branch} after return statement -- Lots of false positives
  "RET506", # Unnecessary {branch} after raise statement -- Lots of false positives
  "RET507", # Unnecessary {branch} after continue statement -- Lots of false positives
  "RET508", # Unnecessary {branch} after break statement -- Lots of false positives
  "PLR09", # upper bound on number of arguments, functions, etc. -- Inconvenient to enforce
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable -- Inconvenient to enforce
  "TRY002", # Create your own exception -- Inconvenient to enforce
  "TRY003", # Avoid specifying long messages outside the exception class -- Inconvenient to enforce
]
select = [
  "F", # Pyflakes
  "E", # pycodestyle Errors
  "W", # pycodestyle Warnings
  "C90", # mccabe
  "I", # isort
  "D", # pydocstyle
  "UP", # pyupgrade
  "B", # flake8-bugbear
  "INP", # flake8-no-pep420
  "RUF", # Ruff-specific rules
  "YTT", # flake8-2020
  "ASYNC", # flake8-async
  "BLE", # flake8-blind-except
  "COM", # flake8-commas
  "C4", # flake8-comprehensions
  "T10", # flake8-debugger
  "EM", # flake8-errmsg
  "FA", # flake8-future-annotations
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLOT", # flake8-slots
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "TRY", # tryceratops
  # "FURB", # refurb, add when out of nursery
  # "LOG", # flake8-logging, add when out of nursery
]
output-format = "grouped"
show-fixes = true
task-tags = ["TODO", "HACK", "FIXME", "XXX"]
target-version = "py310"
exclude = ["tests/*snapshots/*"]

[tool.ruff.extend-per-file-ignores]
"tests/*/__init__.py" = ["F401"]

[tool.ruff.pydocstyle]
# Uses pep257-compatible docstrings
convention = "pep257"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
