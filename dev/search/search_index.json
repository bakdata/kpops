{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "developer/auto-generation/", "title": "Auto generation", "text": "<p>Auto generation happens mostly with <code>pre-commit</code> hooks. You can find the pre-commit configuration here. These pre-commit hooks call different Python scripts to auto generate code for the documentation.</p>"}, {"location": "developer/auto-generation/#generation-scripts-and-their-respective-files", "title": "Generation scripts and their respective files", "text": ""}, {"location": "developer/auto-generation/#documentation", "title": "Documentation", "text": ""}, {"location": "developer/auto-generation/#variables", "title": "Variables", "text": "<ul> <li><code>cli_env_vars.env</code> -- All CLI environment variables in a <code>dotenv</code> file.</li> <li><code>cli_env_vars.md</code> -- All CLI environment variables in a table.</li> <li><code>config_env_vars.env</code> -- Almost all pipeline config environment variables in a <code>dotenv</code> file. The script checks for each field in <code>KpopsConfig</code> whether it has an <code>env</code> attribute defined. The script is currently unable to visit the classes of fields like <code>topic_name_config</code>, hence any environment variables defined there would remain unknown to it.</li> <li><code>config_env_vars.env</code> -- Almost all pipeline config environment variables in a table.</li> <li><code>variable_substitution.yaml</code> -- A copy of <code>./tests/pipeline/resources/component-type-substitution/pipeline.yaml</code> used as an example of substitution.</li> </ul>"}, {"location": "developer/auto-generation/#cli-commands", "title": "CLI commands", "text": "<p>Generated by <code>typer-cli</code> from the code in <code>main.py</code>. It is called with Python's <code>subprocess</code> module.</p>"}, {"location": "developer/auto-generation/#pipeline-and-defaults-example-definitions", "title": "Pipeline and defaults example definitions", "text": "<p>Generates example <code>pipeline.yaml</code> and <code>defaults.yaml</code> for each individual component, stores them and also concatenates them into 1 big pipeline definition and 1 big pipeline defaults definition.</p> <p>User input</p> <ul> <li><code>headers/*\\.yaml</code> -- The top of each example. Includes a description comment, <code>type</code> and <code>name</code>. The headers for <code>pipeline.yaml</code> reside in the <code>pipeline-components</code> dir and the <code>defaults.yaml</code> headers reside in the <code>pipeline-defaults</code> dir. The names of the files must be equal to the respective component <code>type</code>.</li> <li><code>sections/*\\.yaml</code> -- Each YAML file contains a single section (component attribute) definition. The intention is to keep the minimal set of definitions there from which any component definition can be built. The names of the files must be equal to the respective component <code>type</code> and the attribute name. The sections are used for both <code>defaults.yaml</code> and <code>pipeline.yaml</code> generation and reside in the <code>pipeline-components</code> dir.</li> </ul> <p>Generated</p> <ul> <li><code>pipeline-components/dependencies/*</code>   Cached information about KPOps components</li> <li><code>pipeline_component_dependencies.yaml</code> -- Specifies per component which files in the <code>sections</code> dir should be used for the <code>pipeline.yaml</code> generation.</li> <li><code>defaults_pipeline_component_dependencies.yaml</code> -- Specifies per component which files in the <code>sections</code> dir should be used for the <code>defaults.yaml</code> generation.</li> <li><code>kpops_structure.yaml</code> -- Specifies the inheritance hierarchy of the components and what sections exist in each component.</li> <li><code>pipeline-components/*\\.yaml</code> -- All single-component pipeline definitions and one big (complete) <code>pipeline.yaml</code> that contains all of them.</li> <li><code>pipeline-defaults/*\\.yaml</code> -- All single-component defaults definitions and one big (complete) <code>defaults.yaml</code> that contains all of them.</li> </ul>"}, {"location": "developer/auto-generation/#editor-integration", "title": "Editor integration", "text": ""}, {"location": "developer/auto-generation/#schemas", "title": "Schemas", "text": "<ul> <li>config.json</li> <li>pipeline.json</li> </ul>"}, {"location": "developer/formatting/", "title": "Formatting", "text": ""}, {"location": "developer/formatting/#markdown", "title": "Markdown", "text": "<p>To ensure a consistent markdown style, we use dprint to check and reformat.</p> <pre><code>dprint fmt\n</code></pre> <p>Use the official documentation to set up dprint. The configuration can be found here.</p>"}, {"location": "user/what-is-kpops/", "title": "What is KPOps?", "text": "<p>With a couple of easy commands in the shell and a <code>pipeline.yaml</code> of under 30 lines, KPOps can not only <code>deploy</code> a Kafka pipeline<sup>1</sup> to a Kubernetes cluster, but also <code>reset</code>, <code>clean</code> or <code>destroy</code> it!</p>"}, {"location": "user/what-is-kpops/#key-features", "title": "Key features", "text": "<ul> <li>Deploy Kafka apps to Kubernetes: KPOps allows to deploy consecutive Kafka Streams applications and producers using an easy-to-read and -write pipeline definition.</li> <li>Manage Kafka Connectors: KPOps connects with your Kafka Connect cluster and deploys, validates, and deletes your connectors.</li> <li>Configure multiple pipelines and steps: KPOps has various abstractions that simplify configuring multiple pipelines and steps within pipelines by sharing common configuration between different components, such as producers or streaming applications.</li> <li>Handle your topics and schemas: KPOps not only creates and deletes your topics but also registers and deletes your schemas.</li> <li>Clean termination of Kafka components: KPOps removes your pipeline components (i.e., Kafka Streams applications) from the Kubernetes cluster and cleans up the component-related states (i.e., removing/resetting offset of Kafka consumer groups).</li> <li>Preview your pipeline changes: With the KPOps dry-run, you can ensure your pipeline definition is set up correctly. This helps to minimize downtime and prevent potential errors or issues that could impact your production environment.</li> </ul>"}, {"location": "user/what-is-kpops/#example", "title": "Example", "text": "An overview of Word-count pipeline shown in Streams Explorer Word-count pipeline.yaml<pre><code>- type: producer-app\n  name: data-producer\n  app:\n    image: bakdata/kpops-demo-sentence-producer\n    imageTag: \"1.0.0\"\n\n- type: streams-app\n  name: word-counter\n  to:\n    topics:\n      ${output_topic_name}:\n        type: output\n        configs:\n          cleanup.policy: compact\n  app:\n    replicaCount: 1\n    image: bakdata/kpops-demo-word-count-app\n    imageTag: \"1.0.0\"\n\n- type: kafka-sink-connector\n  name: redis-sink-connector\n  app:\n    connector.class: com.github.jcustenborder.kafka.connect.redis.RedisSinkConnector\n    redis.hosts: redis-headless:6379\n    redis.database: 0\n    tasks.max: 1\n    key.converter: org.apache.kafka.connect.storage.StringConverter\n    value.converter: org.apache.kafka.connect.storage.StringConverter\n</code></pre> <ol> <li> <p>A Kafka pipeline can consist of consecutive streaming applications, producers, and connectors.\u00a0\u21a9</p> </li> </ol>"}, {"location": "user/core-concepts/config/", "title": "Configuration", "text": "<p>KPOps reads its global configuration that is unrelated to a pipeline's components from <code>config.yaml</code>.</p> <p>Consider enabling KPOps' editor integration feature to enjoy the benefits of autocompletion and validation when configuring your pipeline.</p> <p>To learn about any of the available settings, take a look at the example below.</p> <code>config.yaml</code> <pre><code># CONFIGURATION\n#\n# The path to the folder containing the defaults.yaml file and the environment\n# defaults files.\ndefaults_path: .\n# The environment you want to generate and deploy the pipeline to. Suffix your\n# environment files with this value (e.g. defaults_development.yaml and\n# pipeline_development.yaml for environment=development).\n# REQUIRED\nenvironment: development\n# The Kafka brokers address.\n# REQUIRED\nbrokers: \"http://broker1:9092,http://broker2:9092\"\n# The name of the defaults file and the prefix of the defaults environment file.\ndefaults_filename_prefix: defaults\n# Configures topic names.\ntopic_name_config: \n  # Configures the value for the variable ${output_topic_name}\n  default_output_topic_name: ${pipeline_name}-${component_name}\n  # Configures the value for the variable ${error_topic_name}\n  default_error_topic_name: ${pipeline_name}-${component_name}-error\n# Address of the Schema Registry\nschema_registry_url: \"http://localhost:8081\"\n# Address of the Kafka REST Proxy.\nkafka_rest_host: \"http://localhost:8082\"\n# Address of Kafka Connect.\nkafka_connect_host: \"http://localhost:8083\"\n# The timeout in seconds that specifies when actions like deletion or deploy\n# timeout.\ntimeout: 300\n# Flag for `helm upgrade --install`.\n# Create the release namespace if not present.\ncreate_namespace: false\n# Global flags for Helm.\nhelm_config:\n  # Set the name of the kubeconfig context. (--kube-context)\n  context: name\n  # Run Helm in Debug mode.\n  debug: false\n# Configure Helm Diff.\nhelm_diff_config: \n  # Set of keys that should not be checked.\n  ignore: \n    - name\n    - imageTag\n# Whether to retain clean up jobs in the cluster or uninstall the, after\n# completion.\nretain_clean_jobs: false\n</code></pre> <p>Environment-specific pipeline definitions</p> <p>Similarly to defaults, it is possible to have an unlimited amount of additional environment-specific pipeline definitions. The naming convention is the same: add a suffix of the form <code>_{environment}</code> to the filename.</p>"}, {"location": "user/core-concepts/defaults/", "title": "Defaults", "text": "<p>KPOps has a very efficient way of dealing with repeating settings which manifests as <code>defaults.yaml</code>. This file provides the user with the power to set defaults for any and all components, thus omitting the need to repeat the same settings in <code>pipeline.yaml</code>.</p> <p>See real-world examples for <code>defaults</code>.</p>"}, {"location": "user/core-concepts/defaults/#features", "title": "Features", "text": ""}, {"location": "user/core-concepts/defaults/#inheritance", "title": "Inheritance", "text": "<p>An important mechanic of KPOps is that <code>defaults</code> set for a component apply to all components that inherit from it.</p> <p>It is possible, although not recommended, to add settings that are specific to a component's subclass. An example would be configuring <code>offset_topic</code> under <code>kafka-connector</code> instead of <code>kafka-source-connector</code>.</p>"}, {"location": "user/core-concepts/defaults/#configuration", "title": "Configuration", "text": "<p>It is possible to set specific <code>defaults</code> for each <code>environment</code> by adding files called <code>defaults_{environment}.yaml</code> to the defaults folder at <code>defaults_path</code>. The defaults are loaded based on the currently set environment.</p> <p>It is important to note that <code>defaults_{environment}.yaml</code> overrides only the settings that are explicitly set to be different from the ones in the base <code>defaults</code> file.</p> <p>Tip</p> <p><code>defaults</code> is the default value of <code>defaults_filename_prefix</code>. Together with <code>defaults_path</code> and <code>environment</code> it can be changed in <code>config.yaml</code></p>"}, {"location": "user/core-concepts/defaults/#components", "title": "Components", "text": "<p>The <code>defaults</code> codeblocks in this section contain the full set of settings that are specific to the component. If a setting already exists in a parent config, it will not be included in the child's.</p>"}, {"location": "user/core-concepts/defaults/#kubernetesapp", "title": "KubernetesApp", "text": "<code>defaults.yaml</code> <pre><code># Base Kubernetes App\n#\n# Parent of: HelmApp\n# Child of: PipelineComponent\nkubernetes-app:\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` contains application-specific settings, hence it does not have a rigid\n  # structure. The fields below are just an example.\n  app: # required\n    image: exampleImage # Example\n    debug: false # Example\n    commandLine: {} # Example\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkaapp", "title": "KafkaApp", "text": "<code>defaults.yaml</code> <pre><code># Base component for Kafka-based components.\n#\n# Parent of: ProducerApp, StreamsApp\n# Child of: KubernetesApp\nkafka-app:\n  # `app` can contain application-specific settings, hence  the user is free to\n  # add the key-value pairs they need.\n  app: # required\n    streams: # required\n      brokers: ${kafka_brokers} # required\n      schemaRegistryUrl: ${schema_registry_url}\n    nameOverride: override-with-this-name # kafka-app-specific\n    imageTag: \"1.0.0\" # Example values that are shared between streams-app and producer-app\n  version: \"2.12.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/defaults/#streamsapp", "title": "StreamsApp", "text": "<code>defaults.yaml</code> <pre><code># StreamsApp component that configures a streams bootstrap app.\n#\n# Child of: KafkaApp\n# More documentation on StreamsApp: https://github.com/bakdata/streams-bootstrap\nstreams-app:\n  # No arbitrary keys are allowed under `app`here\n  # Allowed configs:\n  # https://github.com/bakdata/streams-bootstrap/tree/master/charts/streams-app\n  app: # required\n    # Streams Bootstrap streams section\n    streams: # required, streams-app-specific\n      brokers: ${kafka_brokers} # required\n      schemaRegistryUrl: ${schema_registry_url}\n      inputTopics:\n        - topic1\n        - topic2\n      outputTopic: output-topic\n      inputPattern: input-pattern\n      extraInputTopics:\n        input_role1:\n          - input_topic1\n          - input_topic2\n        input_role2:\n          - input_topic3\n          - input_topic4\n      extraInputPatterns:\n        pattern_role1: input_pattern1\n      extraOutputTopics:\n        output_role1: output_topic1\n        output_role2: output_topic2\n      errorTopic: error-topic\n      config:\n        my.streams.config: my.value\n    nameOverride: override-with-this-name # streams-app-specific\n    autoscaling: # streams-app-specific\n      consumerGroup: consumer-group # required\n      lagThreshold: 0 # Average target value to trigger scaling actions.\n      enabled: false # Whether to enable auto-scaling using KEDA.\n      # This is the interval to check each trigger on.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#pollinginterval\n      pollingInterval: 30\n      # The period to wait after the last trigger reported active before scaling\n      #  the resource back to 0. https://keda.sh/docs/2.9/concepts/scaling-deployments/#cooldownperiod\n      cooldownPeriod: 300\n      # The offset reset policy for the consumer if the the consumer group is\n      # not yet subscribed to a partition.\n      offsetResetPolicy: earliest\n      # This setting is passed to the HPA definition that KEDA will create for a\n      # given resource and holds the maximum number of replicas of the target resouce.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#maxreplicacount\n      maxReplicas: 1\n      # Minimum number of replicas KEDA will scale the resource down to.\n      # https://keda.sh/docs/2.7/concepts/scaling-deployments/#minreplicacount\n      minReplicas: 0\n      # If this property is set, KEDA will scale the resource down to this\n      # number of replicas.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#idlereplicacount\n      idleReplicas: 0\n      topics: # List of auto-generated Kafka Streams topics used by the streams app.\n        - topic1\n        - topic2\n</code></pre>"}, {"location": "user/core-concepts/defaults/#producerapp", "title": "ProducerApp", "text": "<code>defaults.yaml</code> <pre><code>\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkaconnector", "title": "KafkaConnector", "text": "<code>defaults.yaml</code> <pre><code># Kafka connector\n#\n# Parent of: KafkaSinkConnector, KafkaSourceConnector\n# Child of: PipelineComponent\nkafka-connector:\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` contains application-specific settings, hence it does not have a rigid\n  # structure. The fields below are just an example. Extensive documentation on\n  # connectors: https://kafka.apache.org/documentation/#connectconfigs\n  app: # required\n    tasks.max: 1\n  # Helm repository configuration for resetter\n  repo_config:\n    repository_name: my-repo # required\n    url: https://bakdata.github.io/kafka-connect-resetter/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.6\" # Helm chart version\n  # Overriding Kafka Connect Resetter Helm values. E.g. to override the\n  # Image Tag etc.\n  resetter_values:\n    imageTag: \"1.2.3\"\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkasourceconnector", "title": "KafkaSourceConnector", "text": "<code>defaults.yaml</code> <pre><code># Kafka source connector\n#\n# Child of: KafkaConnector\nkafka-source-connector:\n  # The source connector has no `from` section\n  # from:\n  # offset.storage.topic\n  # https://kafka.apache.org/documentation/#connect_running\n  offset_topic: offset_topic\n</code></pre>"}, {"location": "user/core-concepts/defaults/#kafkasinkconnector", "title": "KafkaSinkConnector", "text": "<code>defaults.yaml</code> <pre><code># Kafka sink connector\n#\n# Child of: KafkaConnector\nkafka-sink-connector:\n  # No settings differ from `kafka-connector`\n</code></pre>"}, {"location": "user/core-concepts/components/helm-app/", "title": "HelmApp", "text": ""}, {"location": "user/core-concepts/components/helm-app/#usage", "title": "Usage", "text": "<p>Can be used to deploy any app in Kubernetes using Helm, for example, a REST service that serves Kafka data.</p>"}, {"location": "user/core-concepts/components/helm-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Kubernetes app managed through Helm with an associated Helm chart\n- type: helm-app\n  name: helm-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` contains application-specific settings, hence it does not have a rigid\n  # structure. The fields below are just an example.\n  app: # required\n    image: exampleImage # Example\n    debug: false # Example\n    commandLine: {} # Example\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/helm-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/helm-app/#deploy", "title": "deploy", "text": "<p>Deploy using Helm.</p>"}, {"location": "user/core-concepts/components/helm-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/helm-app/#reset", "title": "reset", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/helm-app/#clean", "title": "clean", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kafka-app/", "title": "KafkaApp", "text": "<p>Subclass of HelmApp.</p>"}, {"location": "user/core-concepts/components/kafka-app/#usage", "title": "Usage", "text": "<ul> <li>Defines a streams-bootstrap component</li> <li>Should not be used in <code>pipeline.yaml</code> as the component can be defined as either a StreamsApp or a ProducerApp</li> <li>Often used in <code>defaults.yaml</code></li> </ul>"}, {"location": "user/core-concepts/components/kafka-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Base component for Kafka-based components.\n# Producer or streaming apps should inherit from this class.\n- type: kafka-app # required\n  name: kafka-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` can contain application-specific settings, hence  the user is free to\n  # add the key-value pairs they need.\n  app: # required\n    streams: # required\n      brokers: ${kafka_brokers} # required\n      schemaRegistryUrl: ${schema_registry_url}\n    nameOverride: override-with-this-name # kafka-app-specific\n    imageTag: \"1.0.0\" # Example values that are shared between streams-app and producer-app\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"2.12.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/kafka-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kafka-app/#deploy", "title": "deploy", "text": "<p>In addition to HelmApp's <code>deploy</code>:</p> <ul> <li>Create topics if provided (optional)</li> <li>Submit Avro schemas to the registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/kafka-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/kafka-app/#reset", "title": "reset", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kafka-app/#clean", "title": "clean", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kafka-connector/", "title": "KafkaConnector", "text": "<p><code>KafkaConnector</code> is a component that deploys Kafka Connectors. Since a connector cannot be different from sink or source it is not recommended to use <code>KafkaConnector</code> for deployment in <code>pipeline.yaml</code>. Instead, <code>KafkaConnector</code> should be used in <code>defaults.yaml</code> to set defaults for all connectors in the pipeline as they can share some common settings.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/", "title": "KafkaSinkConnector", "text": "<p>Subclass of KafkaConnector.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#usage", "title": "Usage", "text": "<p>Lets other systems pull data from Apache Kafka.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Kafka sink connector\n- type: kafka-sink-connector\n  name: kafka-sink-connector # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` contains application-specific settings, hence it does not have a rigid\n  # structure. The fields below are just an example. Extensive documentation on\n  # connectors: https://kafka.apache.org/documentation/#connectconfigs\n  app: # required\n    tasks.max: 1\n  # Helm repository configuration for resetter\n  repo_config:\n    repository_name: my-repo # required\n    url: https://bakdata.github.io/kafka-connect-resetter/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.6\" # Helm chart version\n  # Overriding Kafka Connect Resetter Helm values. E.g. to override the\n  # Image Tag etc.\n  resetter_values:\n    imageTag: \"1.2.3\"\n</code></pre>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kafka-sink-connector/#deploy", "title": "deploy", "text": "<ul> <li>Add the sink connector to the Kafka Connect cluster</li> <li>Create the output topics if provided (optional)</li> <li>Register schemas in the Schema Registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#destroy", "title": "destroy", "text": "<p>The associated sink connector is removed from the Kafka Connect cluster.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#reset", "title": "reset", "text": "<p>Reset the consumer group offsets using bakdata's sink resetter.</p>"}, {"location": "user/core-concepts/components/kafka-sink-connector/#clean", "title": "clean", "text": "<ul> <li>Delete associated consumer group</li> <li>Delete configured error topics</li> </ul>"}, {"location": "user/core-concepts/components/kafka-source-connector/", "title": "KafkaSourceConnector", "text": "<p>Subclass of KafkaConnector.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#usage", "title": "Usage", "text": "<p>Manages source connectors in your Kafka Connect cluster.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Kafka source connector\n- type: kafka-source-connector # required\n  name: kafka-source-connector # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  # The source connector has no `from` section\n  # from:\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` contains application-specific settings, hence it does not have a rigid\n  # structure. The fields below are just an example. Extensive documentation on\n  # connectors: https://kafka.apache.org/documentation/#connectconfigs\n  app: # required\n    tasks.max: 1\n  # Helm repository configuration for resetter\n  repo_config:\n    repository_name: my-repo # required\n    url: https://bakdata.github.io/kafka-connect-resetter/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.6\" # Helm chart version\n  # Overriding Kafka Connect Resetter Helm values. E.g. to override the\n  # Image Tag etc.\n  resetter_values:\n    imageTag: \"1.2.3\"\n  # offset.storage.topic\n  # https://kafka.apache.org/documentation/#connect_running\n  offset_topic: offset_topic\n</code></pre>"}, {"location": "user/core-concepts/components/kafka-source-connector/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kafka-source-connector/#deploy", "title": "deploy", "text": "<ul> <li>Add the source connector to the Kafka Connect cluster</li> <li>Create the output topics if provided (optional)</li> <li>Register schemas in the Schema registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/kafka-source-connector/#destroy", "title": "destroy", "text": "<p>Remove the source connector from the Kafka Connect cluster.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#reset", "title": "reset", "text": "<p>Delete state associated with the connector using bakdata's sink resetter.</p>"}, {"location": "user/core-concepts/components/kafka-source-connector/#clean", "title": "clean", "text": "<ul> <li>Delete all associated output topics</li> <li>Delete all associated schemas in the Schema Registry</li> <li>Delete state associated with the connector</li> </ul>"}, {"location": "user/core-concepts/components/kubernetes-app/", "title": "KubernetesApp", "text": ""}, {"location": "user/core-concepts/components/kubernetes-app/#usage", "title": "Usage", "text": "<p>Can be used to create components for any Kubernetes app.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Base Kubernetes App\n- type: kubernetes-app\n  name: kubernetes-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # `app` contains application-specific settings, hence it does not have a rigid\n  # structure. The fields below are just an example.\n  app: # required\n    image: exampleImage # Example\n    debug: false # Example\n    commandLine: {} # Example\n</code></pre>"}, {"location": "user/core-concepts/components/kubernetes-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/kubernetes-app/#deploy", "title": "deploy", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#destroy", "title": "destroy", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#reset", "title": "reset", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/kubernetes-app/#clean", "title": "clean", "text": "<p>Do nothing.</p>"}, {"location": "user/core-concepts/components/overview/", "title": "Overview", "text": "<p>This section explains the different components of KPOps, their usage and configuration in the pipeline definition <code>pipeline.yaml</code>.</p> <pre><code>flowchart BT\n    KubernetesApp --&gt; PipelineComponent\n    HelmApp --&gt; KubernetesApp\n    KafkaApp --&gt; HelmApp\n    StreamsApp --&gt; KafkaApp\n    ProducerApp --&gt; KafkaApp\n    KafkaConnector --&gt; PipelineComponent\n    KafkaSourceConnector --&gt; KafkaConnector\n    KafkaSinkConnector --&gt; KafkaConnector\n\n    click KubernetesApp \"/kpops/user/core-concepts/components/kubernetes-app\"\n    click HelmApp \"/kpops/user/core-concepts/components/helm-app\"\n    click KafkaApp \"/kpops/user/core-concepts/components/kafka-app\"\n    click StreamsApp \"/kpops/user/core-concepts/components/streams-app\"\n    click ProducerApp \"/kpops/user/core-concepts/components/producer-app\"\n    click KafkaConnector \"/kpops/user/core-concepts/components/kafka-connector\"\n    click KafkaSourceConnector \"/kpops/user/core-concepts/components/kafka-source-connector\"\n    click KafkaSinkConnector \"/kpops/user/core-concepts/components/kafka-sink-connector\"</code></pre> <p>KPOps component hierarchy</p>"}, {"location": "user/core-concepts/components/producer-app/", "title": "ProducerApp", "text": "<p>Subclass of KafkaApp.</p>"}, {"location": "user/core-concepts/components/producer-app/#usage", "title": "Usage", "text": "<p>Configures a streams-bootstrap Kafka producer app</p>"}, {"location": "user/core-concepts/components/producer-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># Holds configuration to use as values for the streams bootstrap producer-app Helm\n# chart.\n# More documentation on ProducerApp:\n# https://github.com/bakdata/streams-bootstrap\n- type: producer-app\n  name: producer-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  # from: # While the producer-app does inherit from kafka-app, it does not need a\n  # `from` section, hence it does not support it.\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # Allowed configs:\n  # https://github.com/bakdata/streams-bootstrap/tree/master/charts/producer-app\n  app: # required\n    streams: # required, producer-app-specific\n      brokers: ${kafka_brokers} # required\n      schemaRegistryUrl: ${schema_registry_url}\n      outputTopic: output_topic\n      extraOutputTopics:\n        output_role1: output_topic1\n        output_role2: output_topic2\n    nameOverride: override-with-this-name # kafka-app-specific\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"2.12.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/producer-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/producer-app/#deploy", "title": "deploy", "text": "<p>In addition to KubernetesApp's <code>deploy</code>:</p> <ul> <li>Create topics if provided (optional)</li> <li>Submit Avro schemas to the registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/producer-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/producer-app/#reset", "title": "reset", "text": "<p>Do nothing, producers are stateless.</p>"}, {"location": "user/core-concepts/components/producer-app/#clean", "title": "clean", "text": "<ul> <li>Delete the output topics of the Kafka producer</li> <li>Delete all associated schemas in the Schema Registry</li> </ul>"}, {"location": "user/core-concepts/components/streams-app/", "title": "StreamsApp", "text": "<p>Subclass of KafkaApp.</p>"}, {"location": "user/core-concepts/components/streams-app/#usage", "title": "Usage", "text": "<p>Configures a streams-bootstrap Kafka Streams app</p>"}, {"location": "user/core-concepts/components/streams-app/#configuration", "title": "Configuration", "text": "<code>pipeline.yaml</code> <pre><code># StreamsApp component that configures a streams bootstrap app.\n# More documentation on StreamsApp: https://github.com/bakdata/streams-bootstrap\n- type: streams-app # required\n  name: streams-app # required\n  # Pipeline prefix that will prefix every component name. If you wish to not\n  # have any prefix you can specify an empty string.\n  prefix: ${pipeline_name}-\n  from: # Must not be null\n    topics: # read from topic\n      ${pipeline_name}-input-topic:\n        type: input # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra\n      ${pipeline_name}-input-pattern-topic:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      ${pipeline_name}-extra-pattern-topic:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n    components: # read from specific component\n      account-producer:\n        type: output # Implied when role is NOT specified\n      other-producer:\n        role: some-role # Implies `type` to be extra\n      component-as-input-pattern:\n        type: pattern # Implied to be an input pattern if `role` is undefined\n      component-as-extra-pattern:\n        type: pattern # Implied to be an extra pattern if `role` is defined\n        role: some-role\n  # Topic(s) into which the component will write output\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: output # Implied when role is NOT specified\n      ${pipeline_name}-extra-topic:\n        role: topic-role # Implies `type` to be extra; Will throw an error if `type` is defined\n      ${pipeline_name}-error-topic:\n        type: error\n        # Currently KPOps supports Avro and JSON schemas.\n        key_schema: key-schema # must implement SchemaProvider to use\n        value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs: # https://kafka.apache.org/documentation/#topicconfigs\n          cleanup.policy: compact\n    models: # SchemaProvider is initiated with the values given here\n      model: model\n  namespace: namespace # required\n  # No arbitrary keys are allowed under `app`here\n  # Allowed configs:\n  # https://github.com/bakdata/streams-bootstrap/tree/master/charts/streams-app\n  app: # required\n    # Streams Bootstrap streams section\n    streams: # required, streams-app-specific\n      brokers: ${kafka_brokers} # required\n      schemaRegistryUrl: ${schema_registry_url}\n      inputTopics:\n        - topic1\n        - topic2\n      outputTopic: output-topic\n      inputPattern: input-pattern\n      extraInputTopics:\n        input_role1:\n          - input_topic1\n          - input_topic2\n        input_role2:\n          - input_topic3\n          - input_topic4\n      extraInputPatterns:\n        pattern_role1: input_pattern1\n      extraOutputTopics:\n        output_role1: output_topic1\n        output_role2: output_topic2\n      errorTopic: error-topic\n      config:\n        my.streams.config: my.value\n    nameOverride: override-with-this-name # streams-app-specific\n    autoscaling: # streams-app-specific\n      consumerGroup: consumer-group # required\n      lagThreshold: 0 # Average target value to trigger scaling actions.\n      enabled: false # Whether to enable auto-scaling using KEDA.\n      # This is the interval to check each trigger on.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#pollinginterval\n      pollingInterval: 30\n      # The period to wait after the last trigger reported active before scaling\n      #  the resource back to 0. https://keda.sh/docs/2.9/concepts/scaling-deployments/#cooldownperiod\n      cooldownPeriod: 300\n      # The offset reset policy for the consumer if the the consumer group is\n      # not yet subscribed to a partition.\n      offsetResetPolicy: earliest\n      # This setting is passed to the HPA definition that KEDA will create for a\n      # given resource and holds the maximum number of replicas of the target resouce.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#maxreplicacount\n      maxReplicas: 1\n      # Minimum number of replicas KEDA will scale the resource down to.\n      # https://keda.sh/docs/2.7/concepts/scaling-deployments/#minreplicacount\n      minReplicas: 0\n      # If this property is set, KEDA will scale the resource down to this\n      # number of replicas.\n      # https://keda.sh/docs/2.9/concepts/scaling-deployments/#idlereplicacount\n      idleReplicas: 0\n      topics: # List of auto-generated Kafka Streams topics used by the streams app.\n        - topic1\n        - topic2\n  # Helm repository configuration (optional)\n  # If not set the helm repo add will not be called. Useful when using local Helm charts\n  repo_config:\n    repository_name: bakdata-streams-bootstrap # required\n    url: https://bakdata.github.io/streams-bootstrap/ # required\n    repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"2.12.0\" # Helm chart version\n</code></pre>"}, {"location": "user/core-concepts/components/streams-app/#operations", "title": "Operations", "text": ""}, {"location": "user/core-concepts/components/streams-app/#deploy", "title": "deploy", "text": "<p>In addition to KubernetesApp's <code>deploy</code>:</p> <ul> <li>Create topics if provided (optional)</li> <li>Submit Avro schemas to the registry if provided (optional)</li> </ul>"}, {"location": "user/core-concepts/components/streams-app/#destroy", "title": "destroy", "text": "<p>Uninstall Helm release.</p>"}, {"location": "user/core-concepts/components/streams-app/#reset", "title": "reset", "text": "<ul> <li>Delete the consumer group offsets</li> <li>Delete Kafka Streams state</li> </ul>"}, {"location": "user/core-concepts/components/streams-app/#clean", "title": "clean", "text": "<p>Similar to <code>reset</code> with to additional steps:</p> <ul> <li>Delete the app's output topics</li> <li>Delete all associated schemas in the Schema Registry</li> </ul>"}, {"location": "user/core-concepts/variables/environment_variables/", "title": "Environment variables", "text": "<p>Environment variables can be set by using the export command in Linux or the set command in Windows.</p> <p>dotenv files</p> <p>KPOps currently supports <code>.env</code> files only for variables related to the config. Full support for <code>.env</code> files is on the roadmap. One of the possible ways to use one and export the contents manually is with the following command: <code>export $(xargs &lt; .env)</code>. This would work in <code>bash</code> suppose there are no spaces inside the values.</p>"}, {"location": "user/core-concepts/variables/environment_variables/#config", "title": "Config", "text": "<p>These variables are a lower priority alternative to the settings in <code>config.yaml</code>. Variables marked as required can instead be set in the pipeline config.</p> Name Default Value Required Description Setting name KPOPS_DEFAULTS_PATH . False The path to the folder containing the defaults.yaml file and the environment defaults files. Paths can either be absolute or relative to <code>config.yaml</code> defaults_path KPOPS_ENVIRONMENT True The environment you want to generate and deploy the pipeline to. Suffix your environment files with this value (e.g. defaults_development.yaml for environment=development). environment KPOPS_KAFKA_BROKERS True The comma separated Kafka brokers address. kafka_brokers KPOPS_DEFAULTS_FILENAME_PREFIX defaults False The name of the defaults file and the prefix of the defaults environment file. defaults_filename_prefix KPOPS_TOPIC_NAME_CONFIG__DEFAULT_OUTPUT_TOPIC_NAME ${pipeline_name}-${component_name} False Configures the value for the variable ${output_topic_name} topic_name_config.default_output_topic_name KPOPS_TOPIC_NAME_CONFIG__DEFAULT_ERROR_TOPIC_NAME ${pipeline_name}-${component_name}-error False Configures the value for the variable ${error_topic_name} topic_name_config.default_error_topic_name KPOPS_SCHEMA_REGISTRY__ENABLED False False Whether the Schema Registry handler should be initialized. schema_registry.enabled KPOPS_SCHEMA_REGISTRY__URL http://localhost:8081/ False Address of the Schema Registry. schema_registry.url KPOPS_KAFKA_REST__URL http://localhost:8082/ False Address of the Kafka REST Proxy. kafka_rest.url KPOPS_KAFKA_CONNECT__URL http://localhost:8083/ False Address of Kafka Connect. kafka_connect.url KPOPS_TIMEOUT 300 False The timeout in seconds that specifies when actions like deletion or deploy timeout. timeout KPOPS_CREATE_NAMESPACE False False Flag for <code>helm upgrade --install</code>. Create the release namespace if not present. create_namespace KPOPS_HELM_CONFIG__CONTEXT False Name of kubeconfig context (<code>--kube-context</code>) helm_config.context KPOPS_HELM_CONFIG__DEBUG False False Run Helm in Debug mode helm_config.debug KPOPS_HELM_CONFIG__API_VERSION False Kubernetes API version used for Capabilities.APIVersions helm_config.api_version KPOPS_HELM_DIFF_CONFIG__IGNORE True Set of keys that should not be checked. helm_diff_config.ignore KPOPS_RETAIN_CLEAN_JOBS False False Whether to retain clean up jobs in the cluster or uninstall the, after completion. retain_clean_jobs config_env_vars.env Exhaustive list of all config-related environment variables<pre><code># Pipeline config environment variables\n#\n# The default setup is shown. These variables are a lower priority\n# alternative to the settings in `config.yaml`. Variables marked as\n# required can instead be set in the pipeline config.\n#\n# defaults_path\n# The path to the folder containing the defaults.yaml file and the\n# environment defaults files. Paths can either be absolute or relative\n# to `config.yaml`\nKPOPS_DEFAULTS_PATH=.\n# environment\n# The environment you want to generate and deploy the pipeline to.\n# Suffix your environment files with this value (e.g.\n# defaults_development.yaml for environment=development).\nKPOPS_ENVIRONMENT # No default value, required\n# kafka_brokers\n# The comma separated Kafka brokers address.\nKPOPS_KAFKA_BROKERS # No default value, required\n# defaults_filename_prefix\n# The name of the defaults file and the prefix of the defaults\n# environment file.\nKPOPS_DEFAULTS_FILENAME_PREFIX=defaults\n# topic_name_config.default_output_topic_name\n# Configures the value for the variable ${output_topic_name}\nKPOPS_TOPIC_NAME_CONFIG__DEFAULT_OUTPUT_TOPIC_NAME=${pipeline_name}-${component_name}\n# topic_name_config.default_error_topic_name\n# Configures the value for the variable ${error_topic_name}\nKPOPS_TOPIC_NAME_CONFIG__DEFAULT_ERROR_TOPIC_NAME=${pipeline_name}-${component_name}-error\n# schema_registry.enabled\n# Whether the Schema Registry handler should be initialized.\nKPOPS_SCHEMA_REGISTRY__ENABLED=False\n# schema_registry.url\n# Address of the Schema Registry.\nKPOPS_SCHEMA_REGISTRY__URL=http://localhost:8081/\n# kafka_rest.url\n# Address of the Kafka REST Proxy.\nKPOPS_KAFKA_REST__URL=http://localhost:8082/\n# kafka_connect.url\n# Address of Kafka Connect.\nKPOPS_KAFKA_CONNECT__URL=http://localhost:8083/\n# timeout\n# The timeout in seconds that specifies when actions like deletion or\n# deploy timeout.\nKPOPS_TIMEOUT=300\n# create_namespace\n# Flag for `helm upgrade --install`. Create the release namespace if\n# not present.\nKPOPS_CREATE_NAMESPACE=False\n# helm_config.context\n# Name of kubeconfig context (`--kube-context`)\nKPOPS_HELM_CONFIG__CONTEXT # No default value, not required\n# helm_config.debug\n# Run Helm in Debug mode\nKPOPS_HELM_CONFIG__DEBUG=False\n# helm_config.api_version\n# Kubernetes API version used for Capabilities.APIVersions\nKPOPS_HELM_CONFIG__API_VERSION # No default value, not required\n# helm_diff_config.ignore\n# Set of keys that should not be checked.\nKPOPS_HELM_DIFF_CONFIG__IGNORE # No default value, required\n# retain_clean_jobs\n# Whether to retain clean up jobs in the cluster or uninstall the,\n# after completion.\nKPOPS_RETAIN_CLEAN_JOBS=False\n</code></pre>"}, {"location": "user/core-concepts/variables/environment_variables/#cli", "title": "CLI", "text": "<p>These variables are a lower priority alternative to the commands' flags. If a variable is set, the corresponding flag does not have to be specified in commands. Variables marked as required can instead be set as flags.</p> Name Default Value Required Description KPOPS_PIPELINE_BASE_DIR . False Base directory to the pipelines (default is current working directory) KPOPS_CONFIG_PATH config.yaml False Path to the config.yaml file KPOPS_DEFAULT_PATH False Path to defaults folder KPOPS_DOTENV_PATH False Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one. KPOPS_PIPELINE_PATH True Path to YAML with pipeline definition KPOPS_PIPELINE_STEPS False Comma separated list of steps to apply the command on cli_env_vars.env Exhaustive list of all cli-related environment variables<pre><code># CLI Environment variables\n#\n# The default setup is shown. These variables are a lower priority\n# alternative to the commands' flags. If a variable is set, the\n# corresponding flag does not have to be specified in commands.\n# Variables marked as required can instead be set as flags.\n#\n# Base directory to the pipelines (default is current working\n# directory)\nKPOPS_PIPELINE_BASE_DIR=.\n# Path to the config.yaml file\nKPOPS_CONFIG_PATH=config.yaml\n# Path to defaults folder\nKPOPS_DEFAULT_PATH # No default value, not required\n# Path to dotenv file. Multiple files can be provided. The files will\n# be loaded in order, with each file overriding the previous one.\nKPOPS_DOTENV_PATH # No default value, not required\n# Path to YAML with pipeline definition\nKPOPS_PIPELINE_PATH # No default value, required\n# Comma separated list of steps to apply the command on\nKPOPS_PIPELINE_STEPS # No default value, not required\n</code></pre>"}, {"location": "user/core-concepts/variables/substitution/", "title": "Substitution", "text": "<p>KPOps supports the usage of placeholders and environment variables in pipeline definition and defaults.</p>"}, {"location": "user/core-concepts/variables/substitution/#component-specific-variables", "title": "Component-specific variables", "text": "<p>These variables can be used in a component's definition to refer to any of its attributes, including ones that the user has defined in the defaults.</p> <p>All of them are prefixed with <code>component_</code> and follow the following form: <code>component_{attribute_name}</code>. If the attribute itself contains attributes, they can be referred to like this: <code>component_{attribute_name}_{subattribute_name}</code>.</p> Example <pre><code>- type: scheduled-producer\n  app:\n    labels:\n      app_type: \"${component_type}\"\n      app_name: \"${component_name}\"\n      app_schedule: \"${component_app_schedule}\"\n    commandLine:\n      FAKE_ARG: \"fake-arg-value\"\n    schedule: \"30 3/8 * * *\"\n- type: converter\n  app:\n    commandLine:\n      CONVERT_XML: true\n    resources:\n      limits:\n        memory: 2G\n      requests:\n        memory: 2G\n- type: filter\n  name: \"filter-app\"\n  app:\n    labels:\n      app_type: \"${component_type}\"\n      app_name: \"${component_name}\"\n      app_resources_requests_memory: \"${component_app_resources_requests_memory}\"\n      ${component_type}: \"${component_app_labels_app_name}-${component_app_labels_app_type}\"\n      test_placeholder_in_placeholder: \"${component_app_labels_${component_type}}\"\n    commandLine:\n      TYPE: \"nothing\"\n    resources:\n      requests:\n        memory: 3G\n    replicaCount: 4\n    autoscaling:\n      minReplicas: 4\n      maxReplicas: 4\n</code></pre>"}, {"location": "user/core-concepts/variables/substitution/#pipeline-config-specific-variables", "title": "Pipeline-config-specific variables", "text": "<p>These variables include all fields in the config and refer to the pipeline configuration that is independent of the components.</p> <p>Info</p> <p><code>error_topic_name</code> is an alias for <code>topic_name_config_default_error_topic_name</code> <code>output_topic_name</code> is an alias for <code>topic_name_config_default_output_topic_name</code></p>"}, {"location": "user/core-concepts/variables/substitution/#environment-variables", "title": "Environment variables", "text": "<p>Environment variables such as <code>$PATH</code> can be used in the pipeline definition and defaults without any transformation following the form <code>${ENV_VAR_NAME}</code>. This, of course, includes variables like the ones relevant to the KPOps cli that are exported by the user.</p> <p>See all KPOps environment variables</p>"}, {"location": "user/core-concepts/variables/substitution/#pipeline-name-variables", "title": "Pipeline name variables", "text": "<p>These are special variables that refer to the name and path of a pipeline.</p> <ul> <li> <p><code>${pipeline_name}</code>: Concatenated path of the parent directory where pipeline.yaml is defined in.   For instance, <code>./data/pipelines/v1/pipeline.yaml</code>, here the value for the variable would be <code>data-pipelines-v1</code>.</p> </li> <li> <p><code>${pipeline_name_&lt;level&gt;}</code>: Similar to the previous variable, each <code>&lt;level&gt;</code> contains a part of the path to the <code>pipeline.yaml</code> file.   Consider the previous example, <code>${pipeline_name_0}</code> would be <code>data</code>, <code>${pipeline_name_1}</code> would be <code>pipelines</code>, and <code>${pipeline_name_2}</code> equals to <code>v1</code>.</p> </li> </ul>"}, {"location": "user/core-concepts/variables/substitution/#advanced-use-cases", "title": "Advanced use cases", "text": "<ol> <li>Refer to default component field values: As long as a value is assigned to a component attribute, it is possible to refer to it with a placeholder. To see all component fields, take a look at the pipeline schema.</li> <li>Chaining variables: It is possible to chain any number of variables, see the example above.</li> <li>Cross-component substitution: YAML is quite an intricate language and with some of its magic one could write cross-component references.</li> </ol>"}, {"location": "user/examples/atm-fraud-pipeline/", "title": "ATM fraud detection pipeline", "text": "<p>ATM fraud is a demo pipeline for ATM fraud detection. The original by Confluent is written in KSQL and outlined in this blogpost. The one used in this example is re-built from scratch using bakdata's <code>streams-bootstrap</code> library.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#what-this-will-demonstrate", "title": "What this will demonstrate", "text": "<ul> <li>Deploying a PostgreSQL database using Helm</li> <li>Deploying a pipeline using KPOps</li> <li>Destroying a pipeline using KPOps</li> </ul>"}, {"location": "user/examples/atm-fraud-pipeline/#prerequisites", "title": "Prerequisites", "text": "<p>Completed all steps in the setup.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#setup-and-deployment", "title": "Setup and deployment", "text": ""}, {"location": "user/examples/atm-fraud-pipeline/#postgresql", "title": "PostgreSQL", "text": "<p>Deploy PostgreSQL using the Bitnami Helm chart: Add the helm repository:</p> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami &amp;&amp; \\\nhelm repo update\n</code></pre> <p>Install the PostgreSQL with helm:</p> <pre><code>helm upgrade --install -f ./postgresql.yaml \\\n--namespace kpops \\\npostgresql bitnami/postgresql\n</code></pre> PostgreSQL Example Helm chart values (<code>postgresql.yaml</code>) <pre><code>auth:\n  database: app_db  \n  enablePostgresUser: true\n  password: AppPassword\n  postgresPassword: StrongPassword\n  username: app1\nprimary:\n  persistence:\n    enabled: false\n    existingClaim: postgresql-data-claim\nvolumePermissions:\n  enabled: true\n</code></pre>"}, {"location": "user/examples/atm-fraud-pipeline/#atm-fraud-detection-example-pipeline-setup", "title": "ATM fraud detection example pipeline setup", "text": ""}, {"location": "user/examples/atm-fraud-pipeline/#port-forwarding", "title": "Port forwarding", "text": "<p>Before we deploy the pipeline, we need to forward the ports of <code>kafka-rest-proxy</code> and <code>kafka-connect</code>. Run the following commands in two different terminals.</p> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-rest 8082:8082\n</code></pre> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-kafka-connect 8083:8083\n</code></pre>"}, {"location": "user/examples/atm-fraud-pipeline/#deploying-the-atm-fraud-detection-pipeline", "title": "Deploying the ATM fraud detection pipeline", "text": "<ol> <li> <p>Export environment variables in your terminal:</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Deploy the pipeline</p> <pre><code>poetry run kpops deploy ./examples/bakdata/atm-fraud-detection/pipeline.yaml \\\n--pipeline-base-dir ./examples \\\n--config ./examples/bakdata/atm-fraud-detection/config.yaml \\\n--execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be deployed correctly.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#check-if-the-deployment-is-successful", "title": "Check if the deployment is successful", "text": "<p>You can use the Streams Explorer to see the deployed pipeline. To do so, port-forward the service in a separate terminal session using the command below:</p> <pre><code>kubectl port-forward -n kpops service/streams-explorer 8080:8080\n</code></pre> <p>After that open http://localhost:8080 in your browser. You should be able to see pipeline shown in the image below:</p> <p> </p> An overview of ATM fraud pipeline shown in Streams Explorer <p>Attention</p> <p>Kafka Connect needs some time to set up the connector.  Moreover, Streams Explorer needs a while to scrape the information from Kafka connect. Therefore, it might take a bit until you see the whole graph.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#teardown-resources", "title": "Teardown resources", "text": ""}, {"location": "user/examples/atm-fraud-pipeline/#postrgresql", "title": "PostrgreSQL", "text": "<p>PostgreSQL can be uninstalled by running the following command:</p> <pre><code>helm --namespace kpops uninstall postgresql\n</code></pre>"}, {"location": "user/examples/atm-fraud-pipeline/#atm-fraud-pipeline", "title": "ATM fraud pipeline", "text": "<ol> <li> <p>Export environment variables in your terminal.</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Remove the pipeline</p> <pre><code>poetry run kpops clean ./examples/bakdata/atm-fraud-detection/pipeline.yaml \\\n--pipeline-base-dir ./examples \\\n--config ./examples/bakdata/atm-fraud-detection/config.yaml \\\n--verbose \\\n--execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be destroyed correctly.</p> <p>Attention</p> <p>If you face any issues destroying this example see Teardown for manual deletion.</p>"}, {"location": "user/examples/atm-fraud-pipeline/#common-errors", "title": "Common errors", "text": "<ul> <li><code>deploy</code> fails:</li> <li>Read the error message.</li> <li>Try to correct the mistakes if there were any. Likely the configuration is not correct or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>Run <code>deploy --dry-run</code> to avoid havig to <code>clean</code> again. If an error is dropped, start over from step 1.</li> <li>If the dry-run is succesful, run <code>deploy</code>.</li> <li><code>clean</code> fails:</li> <li>Read the error message.</li> <li>Try to correct the indicated mistakes if there were any. Likely the configuration is not correct or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>If <code>clean</code> fails, follow the steps in teardown.</li> </ul>"}, {"location": "user/getting-started/quick-start/", "title": "Quick start", "text": ""}, {"location": "user/getting-started/quick-start/#word-count", "title": "Word-count", "text": "<p>Word-count is a demo pipeline which consists of a producer producing words to Kafka, a Kafka streams app counting the number of times each word occurs and finally a Redis database into which the words are exported.</p>"}, {"location": "user/getting-started/quick-start/#what-this-will-demonstrate", "title": "What this will demonstrate", "text": "<ul> <li>Deploying a Redis database using Helm</li> <li>Deploying a pipeline using KPOps</li> <li>Destroying a pipeline using KPOps</li> </ul>"}, {"location": "user/getting-started/quick-start/#prerequisites", "title": "Prerequisites", "text": "<p>Completed all steps in the setup.</p>"}, {"location": "user/getting-started/quick-start/#setup-and-deployment", "title": "Setup and deployment", "text": ""}, {"location": "user/getting-started/quick-start/#redis", "title": "Redis", "text": "<p>Deploy Redis using the Bitnami Helm chart: Add the Helm repository:</p> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami &amp;&amp; \\\nhelm repo update\n</code></pre> <p>Install Redis with Helm:</p> <pre><code>helm upgrade --install -f ./values-redis.yaml \\\n--namespace kpops \\\nredis bitnami/redis\n</code></pre> Redis example Helm chart values (<code>values-redis.yaml</code>) <pre><code>architecture: standalone\nauth:\n  enabled: false\nmaster:\n  count: 1\n  configuration: \"databases 1\"\nimage:\n  tag: 7.0.8\n</code></pre>"}, {"location": "user/getting-started/quick-start/#word-count-example-pipeline-setup", "title": "Word-count example pipeline setup", "text": ""}, {"location": "user/getting-started/quick-start/#port-forwarding", "title": "Port forwarding", "text": "<p>Before we deploy the pipeline, we need to forward the ports of <code>kafka-rest-proxy</code> and <code>kafka-connect</code>. Run the following commands in two different terminals.</p> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-rest 8082:8082\n</code></pre> <pre><code>kubectl port-forward --namespace kpops service/k8kafka-cp-kafka-connect 8083:8083\n</code></pre>"}, {"location": "user/getting-started/quick-start/#deploying-the-word-count-pipeline", "title": "Deploying the Word-count pipeline", "text": "<ol> <li> <p>Copy the configuration from the kpops-examples repository into <code>kpops&gt;examples&gt;bakdata&gt;word-count</code> like so:</p> <pre><code>kpops\n\u251c\u2500\u2500 examples\n|   \u251c\u2500\u2500 bakdata\n|   |   \u251c\u2500\u2500 word-count\n|   |   |   \u251c\u2500\u2500 config.yaml\n|   |   |   \u251c\u2500\u2500 defaults\n|   |   |   \u2502\u00a0\u00a0 \u2514\u2500\u2500 defaults.yaml\n|   |   |   \u2514\u2500\u2500 pipeline.yaml\n|   |   |\n</code></pre> </li> <li> <p>Export environment variables in your terminal:</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Deploy the pipeline</p> <pre><code>kpops deploy ./examples/bakdata/word-count/pipeline.yaml \\\n--pipeline-base-dir ./examples \\\n--config ./examples/bakdata/word-count/config.yaml \\\n--execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be deployed correctly.</p>"}, {"location": "user/getting-started/quick-start/#check-if-the-deployment-is-successful", "title": "Check if the deployment is successful", "text": "<p>You can use the Streams Explorer to inspect the deployed pipeline. To do so, port-forward the service in a separate terminal session using the command below:</p> <pre><code>kubectl port-forward -n kpops service/streams-explorer 8080:8080\n</code></pre> <p>After that open http://localhost:8080 in your browser.</p> <p>You should be able to see pipeline shown in the image below:</p> <p> </p> An overview of Word-count pipeline shown in Streams Explorer <p>Attention</p> <p>Kafka Connect needs some time to set up the connector. Moreover, Streams Explorer needs a while to scrape the information from Kafka Connect. Therefore, it might take a bit until you see the whole graph.</p>"}, {"location": "user/getting-started/quick-start/#teardown-resources", "title": "Teardown resources", "text": ""}, {"location": "user/getting-started/quick-start/#redis_1", "title": "Redis", "text": "<p>Redis can be uninstalled by running the following command:</p> <pre><code>helm --namespace kpops uninstall redis\n</code></pre>"}, {"location": "user/getting-started/quick-start/#word-count-pipeline", "title": "Word-count pipeline", "text": "<ol> <li> <p>Export environment variables in your terminal.</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Remove the pipeline</p> <pre><code>kpops clean ./examples/bakdata/word-count/pipeline.yaml \\\n--pipeline-base-dir ./examples \\\n--config ./examples/bakdata/word-count/config.yaml \\\n--verbose \\\n--execute\n</code></pre> </li> </ol> <p>Note</p> <p>You can use the <code>--dry-run</code> flag instead of the <code>--execute</code> flag and check the logs if your pipeline will be destroyed correctly.</p> <p>Attention</p> <p>If you face any issues destroying this example see Teardown for manual deletion.</p>"}, {"location": "user/getting-started/quick-start/#common-errors", "title": "Common errors", "text": "<ul> <li><code>deploy</code> fails:<ol> <li>Read the error message.</li> <li>Try to correct the mistakes if there were any. Likely the configuration is not correct or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>Run <code>deploy --dry-run</code> to avoid having to <code>clean</code> again. If an error is dropped, start over from step 1.</li> <li>If the dry-run is successful, run <code>deploy</code>.</li> </ol> </li> <li><code>clean</code> fails:<ol> <li>Read the error message.</li> <li>Try to correct the indicated mistakes if there were any. Likely the configuration is not correct or the port-forwarding is not working as intended.</li> <li>Run <code>clean</code>.</li> <li>If <code>clean</code> fails, follow the steps in teardown.</li> </ol> </li> </ul>"}, {"location": "user/getting-started/setup/", "title": "Setup KPOps", "text": "<p>In this part, you will set up KPOps. This includes:</p> <ul> <li>optionally creating a local Kubernetes cluster</li> <li>running Apache Kafka and Confluent's Schema Registry</li> <li>installing KPOps</li> </ul>"}, {"location": "user/getting-started/setup/#prerequisites", "title": "Prerequisites", "text": "<ul> <li>k3d (Version 5.4.6+) and Docker (Version &gt;= v20.10.5) or an existing Kubernetes cluster (&gt;= 1.21.0)</li> <li>kubectl (Compatible with server version 1.21.0)</li> <li>Helm (Version 3.8.0+)</li> </ul>"}, {"location": "user/getting-started/setup/#setup-kubernetes-with-k3d", "title": "Setup Kubernetes with k3d", "text": "<p>If you don't have access to an existing Kubernetes cluster, this section will guide you through creating a local cluster. We recommend the lightweight Kubernetes distribution k3s for this. k3d is a wrapper around k3s in Docker that lets you get started fast.</p> <ol> <li> <p>You can install k3d with its installation script:</p> <pre><code>wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/v5.4.6/install.sh | bash\n</code></pre> <p>For other ways of installing k3d, you can have a look at their installation guide.</p> </li> <li> <p>The Kafka deployment needs a modified Docker image. In that case the image is built and pushed to a Docker registry that holds it. If you do not have access to an existing Docker registry, you can use k3d's Docker registry:</p> <pre><code>k3d registry create kpops-registry.localhost --port 12345\n</code></pre> </li> <li> <p>Now you can create a new cluster called <code>kpops</code> that uses the previously created Docker registry:</p> <pre><code>k3d cluster create kpops --k3s-arg \"--no-deploy=traefik@server:*\" --registry-use k3d-kpops-registry.localhost:12345\n</code></pre> </li> </ol> <p>Note</p> <p>Creating a new k3d cluster automatically configures <code>kubectl</code> to connect to the local cluster by modifying your <code>~/.kube/config</code>. In case you manually set the <code>KUBECONFIG</code> variable or don't want k3d to modify your config, k3d offers many other options.</p> <p>You can check the cluster status with <code>kubectl get pods -n kube-system</code>. If all returned elements have a <code>STATUS</code> of <code>Running</code> or <code>Completed</code>, then the cluster is up and running.</p>"}, {"location": "user/getting-started/setup/#deploy-kafka", "title": "Deploy Kafka", "text": "<p>Kafka is an open-source data streaming platform. More information about Kafka can be found in the documentation. To deploy Kafka, this guide uses Confluent's Helm chart.</p> <ol> <li> <p>To allow connectivity to other systems Kafka Connect needs to be extended with drivers. You can install a JDBC driver for Kafka Connect by creating a new Docker image:</p> <ol> <li> <p>Create a <code>Dockerfile</code> with the following content:</p> <pre><code>FROM confluentinc/cp-kafka-connect:7.1.3\n\nRUN confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.6.0\n</code></pre> </li> <li> <p>Build and push the modified image to your private Docker registry:</p> <pre><code>docker build . --tag localhost:12345/kafka-connect-jdbc:7.1.3 &amp;&amp; \\\ndocker push localhost:12345/kafka-connect-jdbc:7.1.3\n</code></pre> </li> </ol> <p>Detailed instructions on building, tagging and pushing a docker image can be found in Docker docs.</p> </li> <li> <p>Add Confluent's Helm chart repository and update the index:</p> <pre><code>helm repo add confluentinc https://confluentinc.github.io/cp-helm-charts/ &amp;&amp;  \nhelm repo update\n</code></pre> </li> <li> <p>Install Kafka, Zookeeper, Confluent's Schema Registry, Kafka Rest Proxy, and Kafka Connect. A single Helm chart installs all five components. Below you can find an example for the <code>--values ./kafka.yaml</code> file configuring the deployment accordingly. Deploy the services:</p> <pre><code>helm upgrade \\\n    --install \\\n    --version 0.6.1 \\\n    --values ./kafka.yaml \\\n    --namespace kpops \\\n    --create-namespace \\\n    --wait \\\n    k8kafka confluentinc/cp-helm-charts\n</code></pre> </li> </ol> Kafka Helm chart values (<code>kafka.yaml</code>) <p>An example value configuration for Confluent's Helm chart. This configuration deploys a single Kafka Broker, a Schema Registry, Zookeeper, Kafka Rest Proxy, and Kafka Connect with minimal resources.</p> <pre><code>cp-zookeeper:\n  enabled: true\n  servers: 1\n  imageTag: 7.1.3\n  heapOptions: \"-Xms124M -Xmx124M\"\n  overrideGroupId: k8kafka\n  fullnameOverride: \"k8kafka-cp-zookeeper\"\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.2G\n    limits:\n      cpu: 250m\n      memory: 0.2G\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-kafka:\n  enabled: true\n  brokers: 1\n  imageTag: 7.1.3\n  podManagementPolicy: Parallel\n  configurationOverrides:\n    \"auto.create.topics.enable\": false\n    \"offsets.topic.replication.factor\": 1\n    \"transaction.state.log.replication.factor\": 1\n    \"transaction.state.log.min.isr\": 1\n    \"confluent.metrics.reporter.topic.replicas\": 1\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.5G\n    limits:\n      cpu: 250m\n      memory: 0.5G\n  prometheus:\n    jmx:\n      enabled: false\n  persistence:\n    enabled: false\n\ncp-schema-registry:\n  enabled: true\n  imageTag: 7.1.3\n  fullnameOverride: \"k8kafka-cp-schema-registry\"\n  overrideGroupId: k8kafka\n  kafka:\n    bootstrapServers: \"PLAINTEXT://k8kafka-cp-kafka-headless:9092\"\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.25G\n    limits:\n      cpu: 250m\n      memory: 0.25G\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-kafka-connect:\n  enabled: true\n  replicaCount: 1\n  image: k3d-kpops-registry.localhost:12345/kafka-connect-jdbc\n  imageTag: 7.1.3\n  fullnameOverride: \"k8kafka-cp-kafka-connect\"\n  overrideGroupId: k8kafka\n  kafka:\n    bootstrapServers: \"PLAINTEXT://k8kafka-cp-kafka-headless:9092\"\n  heapOptions: \"-Xms256M -Xmx256M\"\n  resources:\n    requests:\n      cpu: 500m\n      memory: 0.25G\n    limits:\n      cpu: 500m\n      memory: 0.25G\n  configurationOverrides:\n    \"consumer.max.poll.records\": \"10\"\n    \"consumer.max.poll.interval.ms\": \"900000\"\n    \"config.storage.replication.factor\": \"1\"\n    \"offset.storage.replication.factor\": \"1\"\n    \"status.storage.replication.factor\": \"1\"\n  cp-schema-registry:\n    url: http://k8kafka-cp-schema-registry:8081\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-kafka-rest:\n  enabled: true\n  imageTag: 7.1.3\n  fullnameOverride: \"k8kafka-cp-rest\"\n  heapOptions: \"-Xms256M -Xmx256M\"\n  resources:\n    requests:\n      cpu: 50m\n      memory: 0.25G\n    limits:\n      cpu: 250m\n      memory: 0.5G\n  prometheus:\n    jmx:\n      enabled: false\n\ncp-ksql-server:\n  enabled: false\ncp-control-center:\n  enabled: false\n</code></pre>"}, {"location": "user/getting-started/setup/#deploy-streams-explorer", "title": "Deploy Streams Explorer", "text": "<p>Streams Explorer allows examining Apache Kafka data pipelines in a Kubernetes cluster including the inspection of schemas and monitoring of metrics. First, add the Helm repository:</p> <pre><code>helm repo add streams-explorer https://bakdata.github.io/streams-explorer &amp;&amp; \\\nhelm repo update\n</code></pre> <p>Below you can find an example for the <code>--values ./streams-explorer.yaml</code> file configuring the deployment accordingly. Now, deploy the service:</p> <pre><code>helm upgrade \\\n    --install \\\n    --version 0.2.3 \\\n    --values ./streams-explorer.yaml \\\n    --namespace kpops \\\n    streams-explorer streams-explorer/streams-explorer\n</code></pre> Streams Explorer Helm chart values (<code>streams-explorer.yaml</code>) <p>An example value configuration for Steams Explorer Helm chart.</p> <pre><code>imageTag: \"v2.1.2\"\nconfig:\n   K8S__deployment__cluster: true\n   SCHEMAREGISTRY__url: http://k8kafka-cp-schema-registry.kpops.svc.cluster.local:8081\n   KAFKACONNECT__url: http://k8kafka-cp-kafka-connect.kpops.svc.cluster.local:8083\nresources:\n   requests:\n       cpu: 200m\n       memory: 300Mi\n   limits:\n       cpu: 200m\n       memory: 300Mi\n</code></pre>"}, {"location": "user/getting-started/setup/#check-the-status-of-your-deployments", "title": "Check the status of your deployments", "text": "<p>Now we will check if all the pods are running in our namespace. You can list all pods in the namespace with this command:</p> <pre><code>kubectl --namespace kpops get pods\n</code></pre> <p>Then you should see the following output in your terminal:</p> <pre><code>NAME                                          READY   STATUS    RESTARTS   AGE\nk8kafka-cp-kafka-connect-8fc7d544f-8pjnt      1/1     Running   0          15m\nk8kafka-cp-zookeeper-0                        1/1     Running   0          15m\nk8kafka-cp-kafka-0                            1/1     Running   0          15m\nk8kafka-cp-schema-registry-588f8c65db-jdwbq   1/1     Running   0          15m\nk8kafka-cp-rest-6bbfd7b645-nwkf8              1/1     Running   0          15m\nstreams-explorer-54db878c67-s8wbz             1/1     Running   0          15m\n</code></pre> <p>Pay attention to the <code>STATUS</code> row. The pods should have a status of <code>Running</code>.</p>"}, {"location": "user/getting-started/setup/#install-kpops", "title": "Install KPOps", "text": "<p>KPOps comes as a PyPI package. You can install it with <code>pip</code>:</p> <pre><code>pip install kpops\n</code></pre>"}, {"location": "user/getting-started/teardown/", "title": "Teardown resources", "text": ""}, {"location": "user/getting-started/teardown/#kpops-teardown-commands", "title": "KPOps teardown commands", "text": "<ul> <li><code>destroy</code>: Removes Kubernetes resources.</li> <li><code>reset</code>: Runs <code>destroy</code>, resets the states of Kafka Streams apps and resets offsets to zero.</li> <li><code>clean</code>: Runs <code>reset</code> and removes all Kafka resources.</li> </ul>"}, {"location": "user/getting-started/teardown/#kpops-deployed-pipeline", "title": "KPOps-deployed pipeline", "text": "<p>The <code>kpops</code> CLI can be used to destroy a pipeline that was previously deployed with KPOps. In case that doesn't work, the pipeline can always be taken down manually with <code>helm</code> (see section Infrastructure).</p> <ol> <li> <p>Export environment variables.</p> <pre><code>export DOCKER_REGISTRY=bakdata &amp;&amp; \\\nexport NAMESPACE=kpops\n</code></pre> </li> <li> <p>Navigate to the <code>examples</code> folder.     Replace the <code>&lt;name-of-the-example-directory&gt;</code> with the example you want to tear down.     For example the <code>atm-fraud-detection</code>.</p> </li> <li> <p>Remove the pipeline</p> <pre><code># Uncomment 1 line to either destroy, reset or clean.\n\n# poetry run kpops destroy &lt;name-of-the-example-directory&gt;/pipeline.yaml \\\n# poetry run kpops reset &lt;name-of-the-example-directory&gt;/pipeline.yaml \\\n# poetry run kpops clean &lt;name-of-the-example-directory&gt;/pipeline.yaml \\\n--config &lt;name-of-the-example-directory&gt;/config.yaml \\\n--execute\n</code></pre> </li> </ol>"}, {"location": "user/getting-started/teardown/#infrastructure", "title": "Infrastructure", "text": "<p>Delete namespace:</p> <pre><code>kubectl delete namespace kpops\n</code></pre> <p>Note</p> <p>In case <code>kpops destroy</code> is not working one can uninstall the pipeline services one by one. This is equivalent to running <code>kpops destroy</code>. In case a clean uninstall (like the one <code>kpops clean</code> does)  is needed, one needs to also delete the topics and schemas created by deployment of the pipeline.</p>"}, {"location": "user/getting-started/teardown/#local-cluster", "title": "Local cluster", "text": "<p>Delete local cluster:</p> <pre><code>k3d cluster delete kpops\n</code></pre>"}, {"location": "user/getting-started/teardown/#local-image-registry", "title": "Local image registry", "text": "<p>Delete local registry:</p> <pre><code>k3d registry delete k3d-kpops-registry.localhost\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/", "title": "Migrate from V1 to V2", "text": ""}, {"location": "user/migration-guide/v1-v2/#derive-component-type-automatically-from-class-name", "title": "Derive component type automatically from class name", "text": "<p>KPOps automatically infers the component <code>type</code> from the class name. Therefore, the <code>type</code> and <code>schema_type</code> attributes can be removed from your custom components. By convention the <code>type</code> would be the lower, and kebab cased name of the class.</p> <pre><code>class MyCoolStreamApp(StreamsApp):\n-    type = \"my-cool-stream-app\"\n+    ...\n</code></pre> <p>Because of this new convention <code>producer</code> has been renamed to <code>producer-app</code>. This must be addressed in your <code>pipeline.yaml</code> and <code>defaults.yaml</code>.</p> <pre><code>- producer:\n+ producer-app:\n    app:\n        streams:\n        outputTopic: output_topic\n        extraOutputTopics:\n            output_role1: output_topic1\n            output_role2: output_topic2\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#refactor-inputoutput-types", "title": "Refactor input/output types", "text": ""}, {"location": "user/migration-guide/v1-v2/#to-section", "title": "To section", "text": "<p>In the <code>to</code> section these have changed:</p> <ul> <li>The default type is <code>output</code></li> <li>If <code>role</code> is set, type is inferred to be <code>extra</code></li> <li>The type <code>error</code> needs to be defined explicitly</li> </ul> <pre><code>  to:\n    topics:\n      ${pipeline_name}-topic-1:\n-       type: extra\n        role: \"role-1\"\n        ...\n      ${pipeline_name}-topic-2:\n-       type: output\n        ...\n      ${pipeline_name}-topic-3:\n         type: error\n         ...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#from-section", "title": "From section", "text": "<p>In the <code>from</code> section these have changed:</p> <ul> <li>The default type is <code>input</code></li> <li><code>input-pattern</code> type is replaced by <code>pattern</code></li> <li>If <code>role</code> is set, type is inferred to be <code>extra</code></li> <li>If <code>role</code> is set, type is explicitly set to <code>pattern</code>, this would be inferred type <code>extra-pattern</code></li> </ul> <pre><code>  from:\n    topics:\n      ${pipeline_name}-input-topic:\n-       type: input\n        ...\n      ${pipeline_name}-extra-topic:\n-       type: extra\n        role: topic-role\n        ...\n      ${pipeline_name}-input-pattern-topic:\n-       type: input-pattern\n+       type: pattern\n        ...\n      ${pipeline_name}-extra-pattern-topic:\n-       type: extra-pattern\n+       type: pattern\n        role: some-role\n        ...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#remove-camel-case-conversion-of-internal-models", "title": "Remove camel case conversion of internal models", "text": "<p>All the internal KPOps models are now snake_case, and only Helm/Kubernetes values require camel casing. You can find an example of a <code>pipeline.yaml</code> in the following. Notice that the <code>app</code> section here remains untouched.</p> <pre><code>...\ntype: streams-app\n  name: streams-app\n  namespace: namespace\n  app:\n    streams:\n      brokers: ${brokers}\n      schemaRegistryUrl: ${schema_registry_url}\n     autoscaling:\n      consumerGroup: consumer-group\n      lagThreshold: 0\n      enabled: false\n      pollingInterval: 30\n\n  to:\n    topics:\n      ${pipeline_name}-output-topic:\n        type: error\n-       keySchema: key-schema\n+       key_schema: key-schema\n-       valueSchema: value-schema\n+       value_schema: value-schema\n        partitions_count: 1\n        replication_factor: 1\n        configs:\n          cleanup.policy: compact\n    models:\n      model: model\n  prefix: ${pipeline_name}-\n- repoConfig:\n+ repo_config:\n-   repositoryName: bakdata-streams-bootstrap\n+   repository_name: bakdata-streams-bootstrap\n    url: https://bakdata.github.io/streams-bootstrap/\n-   repoAuthFlags:\n+   repo_auth_flags:\n      username: user\n      password: pass\n      ca_file: /home/user/path/to/ca-file\n      insecure_skip_tls_verify: false\n  version: \"1.0.4\"\n...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#refactor-handling-of-helm-flags", "title": "Refactor handling of Helm flags", "text": "<p>If you are using the <code>KubernetesApp</code> class to define your own Kubernetes resource to deploy, the abstract function <code>get_helm_chart</code> that returns the chart for deploying the app using Helm is now a Python property and renamed to <code>helm_chart</code>.</p> <pre><code>class MyCoolApp(KubernetesApp):\n\n+   @property\n    @override\n-   def get_helm_chart(self) -&gt; str:\n+   def helm_chart(self) -&gt; str:\n        return \"./charts/charts-folder\"\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#plural-broker-field-in-pipeline-config", "title": "Plural broker field in pipeline config", "text": "<p>Since you can pass a comma separated string of broker address, the broker field in KPOps is now plural. The pluralization has affected multiple areas:</p>"}, {"location": "user/migration-guide/v1-v2/#configyaml", "title": "config.yaml", "text": "<pre><code>  environment: development\n- broker: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n+ brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n  kafka_connect_host: \"http://localhost:8083\"\n  kafka_rest_host: \"http://localhost:8082\"\n  schema_registry_url: \"http://localhost:8081\"\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#pipelineyaml-and-defaultyaml", "title": "pipeline.yaml and default.yaml", "text": "<p>The variable is now called <code>brokers</code>.</p> <pre><code>...\n  app:\n    streams:\n-     brokers: ${broker}\n+     brokers: ${brokers}\n      schemaRegistryUrl: ${schema_registry_url}\n    nameOverride: override-with-this-name\n    imageTag: \"1.0.0\"\n...\n</code></pre>"}, {"location": "user/migration-guide/v1-v2/#environment-variable", "title": "Environment variable", "text": "<p>Previously, if you set the environment variable <code>KPOPS_KAFKA_BROKER</code>, you need to replace that now with <code>KPOPS_KAFKA_BROKERS</code>.</p>"}, {"location": "user/migration-guide/v2-v3/", "title": "Migrate from V2 to V3", "text": ""}, {"location": "user/migration-guide/v2-v3/#make-kafka-rest-proxy-kafka-connect-hosts-default-and-improve-schema-registry-config", "title": "Make Kafka REST Proxy &amp; Kafka Connect hosts default and improve Schema Registry config", "text": "<p>The breaking changes target the <code>config.yaml</code> file:</p> <ul> <li> <p>The <code>schema_registry_url</code> is replaced with <code>schema_registry.url</code> (default <code>http://localhost:8081</code>) and <code>schema_registry.enabled</code> (default <code>false</code>).</p> </li> <li> <p><code>kafka_rest_host</code> is renamed to <code>kafka_rest.url</code> (default <code>http://localhost:8082</code>).</p> </li> <li> <p><code>kafka_connect_host</code> is replaced with <code>kafka_connect.url</code> (default <code>http://localhost:8083</code>).</p> </li> <li> <p><code>brokers</code> is renamed to <code>kafka_brokers</code>.</p> </li> </ul> <p>The environment variable names of these config fields changed respectively. Please refer to the environment variables documentation page to see the newest changes.</p>"}, {"location": "user/migration-guide/v2-v3/#configyaml", "title": "config.yaml", "text": "<pre><code>  environment: development\n- brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n- kafka_rest_host: \"http://my-custom-rest.url:8082\"\n- kafka_connect_host: \"http://my-custom-connect.url:8083\"\n- schema_registry_url: \"http://my-custom-sr.url:8081\"\n+ kafka_brokers: \"http://k8kafka-cp-kafka-headless.kpops.svc.cluster.local:9092\"\n+ kafka_rest:\n+   url: \"http://my-custom-rest.url:8082\"\n+ kafka_connect:\n+   url: \"http://my-custom-connect.url:8083\"\n+ schema_registry:\n+   enabled: true\n+   url: \"http://my-custom-sr.url:8081\"\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#pipelineyaml-and-defaultyaml", "title": "pipeline.yaml and default.yaml", "text": "<p>The variable is now called <code>kafka_brokers</code>.</p> <pre><code>...\n  app:\n    streams:\n-     brokers: ${brokers}\n+     brokers: ${kafka_brokers}\n      schemaRegistryUrl: ${schema_registry_url}\n    nameOverride: override-with-this-name\n    imageTag: \"1.0.0\"\n...\n</code></pre>"}, {"location": "user/migration-guide/v2-v3/#move-github-action-to-repsitory-root", "title": "Move GitHub action to repsitory root", "text": "<p>The location of the GitHub action has changed, and it's now available directly as <code>bakdata/kpops</code>.</p> <p>You'll need to change it in your GitHub CI workflows.</p> <pre><code>steps:\n  - name: kpops deploy\n-   uses: bakdata/kpops/actions/kpops-runner@main\n+   uses: bakdata/kpops@main\n    with:\n      command: deploy --execute\n      # ...\n</code></pre>"}, {"location": "user/references/cli-commands/", "title": "CLI Usage", "text": "<p>Usage:</p> <pre><code>$ kpops [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <ul> <li><code>-V, --version</code>: Print KPOps version</li> <li><code>--install-completion</code>: Install completion for the current shell.</li> <li><code>--show-completion</code>: Show completion for the current shell, to copy it or customize the installation.</li> <li><code>--help</code>: Show this message and exit.</li> </ul> <p>Commands:</p> <ul> <li><code>clean</code>: Clean pipeline steps</li> <li><code>deploy</code>: Deploy pipeline steps</li> <li><code>destroy</code>: Destroy pipeline steps</li> <li><code>generate</code>: Enriches pipelines steps with defaults.</li> <li><code>reset</code>: Reset pipeline steps</li> <li><code>schema</code>: Generate json schema.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-clean", "title": "<code>kpops clean</code>", "text": "<p>Clean pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops clean [OPTIONS] PIPELINE_PATH [COMPONENTS_MODULE]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATH</code>: Path to YAML with pipeline definition  [env var: KPOPS_PIPELINE_PATH;required]</li> <li><code>[COMPONENTS_MODULE]</code>: Custom Python module containing your project-specific components</li> </ul> <p>Options:</p> <ul> <li><code>--pipeline-base-dir DIRECTORY</code>: Base directory to the pipelines (default is current working directory)  [env var: KPOPS_PIPELINE_BASE_DIR; default: .]</li> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--defaults DIRECTORY</code>: Path to defaults folder  [env var: KPOPS_DEFAULT_PATH]</li> <li><code>--config FILE</code>: Path to the config.yaml file  [env var: KPOPS_CONFIG_PATH; default: config.yaml]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-deploy", "title": "<code>kpops deploy</code>", "text": "<p>Deploy pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops deploy [OPTIONS] PIPELINE_PATH [COMPONENTS_MODULE]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATH</code>: Path to YAML with pipeline definition  [env var: KPOPS_PIPELINE_PATH;required]</li> <li><code>[COMPONENTS_MODULE]</code>: Custom Python module containing your project-specific components</li> </ul> <p>Options:</p> <ul> <li><code>--pipeline-base-dir DIRECTORY</code>: Base directory to the pipelines (default is current working directory)  [env var: KPOPS_PIPELINE_BASE_DIR; default: .]</li> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--defaults DIRECTORY</code>: Path to defaults folder  [env var: KPOPS_DEFAULT_PATH]</li> <li><code>--config FILE</code>: Path to the config.yaml file  [env var: KPOPS_CONFIG_PATH; default: config.yaml]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-destroy", "title": "<code>kpops destroy</code>", "text": "<p>Destroy pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops destroy [OPTIONS] PIPELINE_PATH [COMPONENTS_MODULE]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATH</code>: Path to YAML with pipeline definition  [env var: KPOPS_PIPELINE_PATH;required]</li> <li><code>[COMPONENTS_MODULE]</code>: Custom Python module containing your project-specific components</li> </ul> <p>Options:</p> <ul> <li><code>--pipeline-base-dir DIRECTORY</code>: Base directory to the pipelines (default is current working directory)  [env var: KPOPS_PIPELINE_BASE_DIR; default: .]</li> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--defaults DIRECTORY</code>: Path to defaults folder  [env var: KPOPS_DEFAULT_PATH]</li> <li><code>--config FILE</code>: Path to the config.yaml file  [env var: KPOPS_CONFIG_PATH; default: config.yaml]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-generate", "title": "<code>kpops generate</code>", "text": "<p>Enriches pipelines steps with defaults. The output is used as input for the deploy/destroy/... commands.</p> <p>Usage:</p> <pre><code>$ kpops generate [OPTIONS] PIPELINE_PATH [COMPONENTS_MODULE]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATH</code>: Path to YAML with pipeline definition  [env var: KPOPS_PIPELINE_PATH;required]</li> <li><code>[COMPONENTS_MODULE]</code>: Custom Python module containing your project-specific components</li> </ul> <p>Options:</p> <ul> <li><code>--pipeline-base-dir DIRECTORY</code>: Base directory to the pipelines (default is current working directory)  [env var: KPOPS_PIPELINE_BASE_DIR; default: .]</li> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--defaults DIRECTORY</code>: Path to defaults folder  [env var: KPOPS_DEFAULT_PATH]</li> <li><code>--config FILE</code>: Path to the config.yaml file  [env var: KPOPS_CONFIG_PATH; default: config.yaml]</li> <li><code>--template / --no-template</code>: Run Helm template  [default: no-template]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-reset", "title": "<code>kpops reset</code>", "text": "<p>Reset pipeline steps</p> <p>Usage:</p> <pre><code>$ kpops reset [OPTIONS] PIPELINE_PATH [COMPONENTS_MODULE]\n</code></pre> <p>Arguments:</p> <ul> <li><code>PIPELINE_PATH</code>: Path to YAML with pipeline definition  [env var: KPOPS_PIPELINE_PATH;required]</li> <li><code>[COMPONENTS_MODULE]</code>: Custom Python module containing your project-specific components</li> </ul> <p>Options:</p> <ul> <li><code>--pipeline-base-dir DIRECTORY</code>: Base directory to the pipelines (default is current working directory)  [env var: KPOPS_PIPELINE_BASE_DIR; default: .]</li> <li><code>--dotenv FILE</code>: Path to dotenv file. Multiple files can be provided. The files will be loaded in order, with each file overriding the previous one.  [env var: KPOPS_DOTENV_PATH]</li> <li><code>--defaults DIRECTORY</code>: Path to defaults folder  [env var: KPOPS_DEFAULT_PATH]</li> <li><code>--config FILE</code>: Path to the config.yaml file  [env var: KPOPS_CONFIG_PATH; default: config.yaml]</li> <li><code>--steps TEXT</code>: Comma separated list of steps to apply the command on  [env var: KPOPS_PIPELINE_STEPS]</li> <li><code>--filter-type [include|exclude]</code>: Whether the --steps option should include/exclude the steps  [default: include]</li> <li><code>--dry-run / --execute</code>: Whether to dry run the command or execute it  [default: dry-run]</li> <li><code>--verbose / --no-verbose</code>: Enable verbose printing  [default: no-verbose]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/cli-commands/#kpops-schema", "title": "<code>kpops schema</code>", "text": "<p>Generate json schema.</p> <p>The schemas can be used to enable support for kpops files in a text editor.</p> <p>Usage:</p> <pre><code>$ kpops schema [OPTIONS] SCOPE:{pipeline|config} [COMPONENTS_MODULE]\n</code></pre> <p>Arguments:</p> <ul> <li><code>SCOPE:{pipeline|config}</code>:          Scope of the generated schema<pre><code>pipeline: Schema of PipelineComponents. Includes the built-in kpops components by default. To include custom components, provide [COMPONENTS_MODULES].\n\nconfig: Schema of KpopsConfig.  [required]\n</code></pre> <ul> <li><code>[COMPONENTS_MODULE]</code>: Custom Python module containing your project-specific components</li> </ul> </li> </ul> <p>Options:</p> <ul> <li><code>--include-stock-components / --no-include-stock-components</code>: Include the built-in KPOps components.  [default: include-stock-components]</li> <li><code>--help</code>: Show this message and exit.</li> </ul>"}, {"location": "user/references/editor-integration/", "title": "Editor integration", "text": "<p>KPOps provides JSON schemas that enable autocompletion and validation for some of the files that the user must work with.</p>"}, {"location": "user/references/editor-integration/#supported-files", "title": "Supported files", "text": "<ul> <li><code>pipeline.yaml</code></li> <li><code>config.yaml</code></li> </ul>"}, {"location": "user/references/editor-integration/#usage", "title": "Usage", "text": "<ol> <li>Install the yaml-language-server in your editor of choice. (requires LSP support)</li> <li>Configure the extension with the settings below.</li> </ol> <code>settings.json</code> <pre><code>{\n    \"yaml.schemas\": {\n        \"https://bakdata.github.io/kpops/2.0/schema/config.json\": \"config.yaml\",\n        \"https://bakdata.github.io/kpops/2.0/schema/pipeline.json\": \"pipeline.yaml\"\n    }\n}\n</code></pre> <p>Advanced usage</p> <p>It is possible to generate schemas with the <code>kpops schema</code> command. Useful when using custom components or when using a pre-release version of KPOps.</p>"}, {"location": "user/references/ci-integration/github-actions/", "title": "GitHub Actions integration", "text": "<p>We provided a GitHub composite action <code>bakdata/kpops</code> that installs and executes KPOps commands with the given parameters.</p>"}, {"location": "user/references/ci-integration/github-actions/#input-parameters", "title": "Input Parameters", "text": "Name Required Default Value Type Description command \u2705 - string KPOps command to run. generate, deploy, destroy, reset, clean are possible values. Flags such as --dry-run and --execute need to be specified pipeline \u2705 - string Pipeline to run by KPOps working-directory \u274c . string root directory used by KPOps to run pipelines pipeline-base-dir \u274c - string directory where relative pipeline variables are initialized from defaults \u274c - string defaults folder path config \u274c - string config.yaml file path components \u274c - string components package path filter-type \u274c - string Whether to include/exclude the steps defined in KPOPS_PIPELINE_STEPS python-version \u274c \"3.11.x\" string Python version to install (Defaults to the latest stable version of Python 3.11) kpops-version \u274c latest string KPOps version to install helm-version \u274c latest string Helm version to install token \u274c latest string secrets.GITHUB_TOKEN, needed for setup-helm action if helm-version is set to latest"}, {"location": "user/references/ci-integration/github-actions/#usage", "title": "Usage", "text": "<pre><code>steps:\n  # ...\n  # This step is useful for debugging reasons\n  - name: Generate Kafka pipeline\n    uses: bakdata/kpops@main\n    with:\n      command: generate\n      working-directory: home/my-kpops-root-dir\n      pipeline: pipelines/my-pipeline-file.yaml\n      kpops-version: 1.2.3\n\n  - name: Deploy Kafka pipeline\n    uses: bakdata/kpops@main\n    with:\n      command: deploy --execute\n      working-directory: home/my-kpops-root-dir\n      pipeline: pipelines/my-pipeline-file.yaml\n      kpops-version: 1.2.3\n  # ...\n</code></pre> <p>It is possible to use a pre-release KPOps version from TestPyPI.</p> <pre><code>steps:\n  - name: Deploy Kafka pipeline\n    uses: bakdata/kpops@main\n    with:\n      command: deploy --execute\n      working-directory: home/my-kpops-root-dir\n      pipeline: pipelines/my-pipeline-file.yaml\n      kpops-version: 1.2.5.dev20230707132709 -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/\n</code></pre>"}]}